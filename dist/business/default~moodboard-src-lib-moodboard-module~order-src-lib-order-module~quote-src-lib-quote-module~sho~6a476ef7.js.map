{"version":3,"sources":["./projects/quote/src/lib/components/quote-list/quote-list.component.ts","./projects/quote/src/lib/components/quote-list/quote-list.component.html","./projects/quote/src/lib/components/quote-list/quote-list.service.ts","./projects/quote/src/lib/components/quote-create/quote-create.component.html","./projects/quote/src/lib/components/quote-create/quote-create.component.ts","./projects/quote/src/lib/common/quote-common.module.ts","./projects/quote/src/lib/components/quote/quote-detail.service.ts","./projects/quote/src/lib/common/components/quote-create-form/quote-create-form.component.ts","./projects/quote/src/lib/common/components/quote-create-form/quote-create-form.component.html","./projects/quote/src/lib/common/components/quote-header/quote-header.component.ts","./projects/quote/src/lib/common/components/quote-header/quote-header.component.html","./projects/quote/src/lib/common/components/quote-create-form/quote-create-form.service.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js","./projects/quote/src/lib/common/components/quote-header/quote-header.service.ts","./projects/quote/src/lib/quote-routing.ts","./projects/quote/src/lib/common/components/item-type/item-type.component.html","./projects/quote/src/lib/common/components/item-type/item-type.component.ts","./projects/quote/src/lib/quote.service.ts","./projects/quote/src/lib/components/quote/quote.component.ts","./projects/quote/src/lib/components/quote/quote.component.html","./projects/quote/src/lib/common/components/total-cell-renderer/total-cell-renderer.component.ts","./projects/quote/src/lib/common/components/total-cell-renderer/total-cell-renderer.component.html","./projects/quote/src/lib/quote.module.ts"],"names":[],"mappings":"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,cAAc,kEAAK,qBAAqB,yEAAY,MAAM,iBAAiB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oEAAO;AAC3B,QAAQ,kEAAK,SAAS,kEAAK;AAC3B;AACA;AACA;AACA,SAAS;AACT,QAAQ,kEAAK,YAAY,kEAAK;AAC9B;AACA;AACA;AACA,SAAS;AACT,QAAQ,kEAAK,qBAAqB,kEAAK;AACvC;AACA;AACA;AACA,SAAS;AACT,QAAQ,uEAAU,cAAc,oEAAO;AACvC,QAAQ,uEAAU,cAAc,oEAAO,sBAAsB,kEAAK,EAAE,aAAa;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAAc;AACrD;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA,WAAW,4DAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB,CAAC,4EAAa,CAAC,4EAAa,CAAC,8EAAe;AAC1F;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAc;AAC7C;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,wBAAwB,+DAAwB,EAAE,yEAAyE,gEAAyB,GAAG,6DAA6D,KAAK;AACzN,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,6BAA6B,6DAA6D;AAC1F,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA,4BAA4B,6CAAO;AACnC;AACA,gCAAgC;AAChC;AACA,iCAAiC;AACjC;AACA,4CAA4C,eAAe;AAC3D;AACA,6CAA6C,6CAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mDAAK;AAC3C;AACA;AACA,4CAA4C,iEAAS,WAAW,iEAAS,OAAO,mDAAK;AACrF;AACA;AACA,sBAAsB,4DAAI,KAAK,iEAAS;AACxC,SAAS;AACT;AACA,gCAAgC,0DAAY;AAC5C;AACA,oDAAoD,8DAAM,UAAU,2DAAG,QAAQ,EAAE;AACjF;AACA,oDAAoD,8DAAM,WAAW,2DAAG,QAAQ,EAAE;AAClF;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA,kCAAkC,qCAAqC;AACvE;AACA,uCAAuC,mFAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wCAAwC;AAC7E;AACA,0CAA0C,kFAAoB;AAC9D;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA,mCAAmC,uEAAc;AACjD;AACA;AACA;AACA;AACA;AACA,kBAAkB,4EAAoB,IAAI,iEAAS;AACnD;AACA;AACA;AACA;AACA,0CAA0C,iEAAS;AACnD;AACA;AACA,SAAS;AACT,kCAAkC,iEAAS,QAAQ,iuCAAuC,iEAAU,gBAAgB,+DAAQ;AACzE,wBAAwB,iEAAU,gBAAgB,kEAAW;AAC7D,sCAAsC,4DAAK,gBAAgB,4DAAK;AAChE;AACA;AACA,kDAAkD,6EAAc;AAChE;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iEAAU,gBAAgB,+DAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4DAAK,gBAAgB,4DAAK;AACrE,aAAa,6EAAc;AAC3B;AACA;AACA;AACA,4DAA4D,wDAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4DAAI;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C,4BAA4B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4EAA0B;AACzD;AACA;AACA;AACA;AACA;AACA,qCAAqC,iEAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qCAAqC,iEAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,mDAAK;AACxC,yCAAyC,iEAAS;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,mDAAK;AACb,kBAAkB,iEAAS;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,kCAAkC,+DAAwB,CAAC,oEAAoB,GAAG,+DAAwB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O,+DAAoB,EAAE,GAAG;AACnD,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B;AACA,SAAS;AACT,kBAAkB,uDAAS;AAC3B;AACA,SAAS;AACT,kBAAkB,uDAAS;AAC3B,mBAAmB,wEAAmB;AACtC,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAS;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAAI;AAC3C;AACA;AACA,kFAAkF,sBAAsB;AACxG;AAC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","file":"default~moodboard-src-lib-moodboard-module~order-src-lib-order-module~quote-src-lib-quote-module~sho~6a476ef7.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { GridOptions, GridReadyEvent, ICellRendererParams } from 'ag-grid-community';\r\nimport {\r\n  ImageRendererComponent,\r\n  UserService,\r\n} from 'projects/core/src/public-api';\r\nimport { Observable } from 'rxjs';\r\nimport { quoteRoute } from '../../quote-routing';\r\nimport { QuoteListService } from './quote-list.service';\r\n\r\n@Component({\r\n  selector: 'lib-quote-list',\r\n  templateUrl: './quote-list.component.html',\r\n  styleUrls: ['./quote-list.component.scss'],\r\n})\r\nexport class QuoteListComponent implements OnInit {\r\n  quoteInfo = {\r\n    bannerIconImg: 'assets/dashboard/images/quote.svg',\r\n    bannerIconImgTxt: 'Quote Icon',\r\n    bannerImg: 'assets/quote/images/quote_banner.jpg',\r\n    bannerImgTxt: 'Quote Banner Image',\r\n    bannerBottomTxt:\r\n      'Get an estimated cost for a particular moodboard, piece or project.',\r\n    text: 'Quote',\r\n  };\r\n\r\n  columnDefs = [\r\n    { field: 'sgid', headerName: 'Quote Number' },\r\n    { field: 'name', headerName: 'Customer name' },\r\n    { field: 'company_name', headerName: 'Company Name' },\r\n    { field: 'project_name', headerName: 'Project Name' },\r\n    {\r\n      field: 'created_at',\r\n      headerName: 'Quote Created Date',\r\n      valueFormatter : (params:ICellRendererParams)=>{\r\n        return params?.data?.created_at?.split(' ')[0];\r\n      }\r\n    },\r\n    {\r\n      field: 'is_order',\r\n      headerName: 'Order Submitted',\r\n      onCellClicked: (params: any) => {\r\n        console.log(params);\r\n      },\r\n    },\r\n  ];\r\n\r\n  defaultColDef = {\r\n    wrapText: true,\r\n    cellClass: 'grid-cell',\r\n    cellStyle: {\r\n      'line-height': 'normal',\r\n      'align-items': 'center',\r\n      'justify-content': 'center',\r\n      display: 'flex',\r\n      padding: '0 0.5rem',\r\n    },\r\n  };\r\n\r\n  rowData: Observable<any[]> = new Observable();\r\n  gridOptions: GridOptions = {\r\n    onRowClicked: (param) => this.onRowClicked(param),\r\n    // headerHeight: 100\r\n    rowHeight: 50,\r\n    onGridReady: (api: GridReadyEvent) => this.onGridReady(api),\r\n  };\r\n\r\n  selectedButton: 'allQuote' | 'myQuote' = 'allQuote';\r\n  frameworkComponents = {\r\n    ImageRendererComponent: ImageRendererComponent,\r\n  };\r\n  projectList : any= []\r\n  selectedProject = \"\";\r\n  constructor(\r\n    private _quoteListService: QuoteListService,\r\n    private _router: Router,\r\n    private _userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getProjectList()\r\n  }\r\n  onGridReady(api: GridReadyEvent) {\r\n    this.getQuoteList()\r\n    api.api.sizeColumnsToFit();\r\n  }\r\n\r\n  onRowClicked(param: any) {\r\n    let quoteId = param?.data?.sgid;\r\n    if (param?.data?.order_status && quoteId) {\r\n      this._router.navigate(['order', quoteId]);\r\n    } else if (quoteId) {\r\n      this._router.navigate(['quote', quoteId]);\r\n    }\r\n  }\r\n\r\n  getQuoteList() {\r\n    this.getProjectList();\r\n    this.rowData = this._quoteListService.getQuoteList(\r\n      this._userService.getUser().getId(),\r\n      this.selectedButton == 'myQuote'?'my':'',\r\n      'quotes',\r\n      this.selectedProject\r\n    );\r\n  }\r\n  myQuote(){\r\n    this.selectedButton = 'myQuote';\r\n    this.getQuoteList()\r\n  }\r\n  allQuote(){\r\n    this.selectedButton ='allQuote';\r\n    this.getQuoteList();\r\n  }\r\n\r\n  getProjectList(){\r\n    let userId =  this._userService.getUser().getId();\r\n    this._quoteListService.getProjectList(this.selectedButton == 'myQuote'? 'my':'all',userId).subscribe((response:any) => {\r\n      this.projectList = response.quoteProject;\r\n    });    \r\n  }\r\n\r\n  createQuote() {\r\n    this._router.navigate(['quote/create']);\r\n  }\r\n\r\n  projectFilter(value: any){\r\n    this.selectedProject = value;\r\n    this.getQuoteList()\r\n  }\r\n}\r\n","<div class=\"quotes\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n  <app-banner\r\n    [iconSrc]=\"quoteInfo.bannerIconImg\"\r\n    [iconAltTxt]=\"quoteInfo.bannerIconImgTxt\"\r\n    [leftTxt]=\"quoteInfo.text\"\r\n    [src]=\"quoteInfo.bannerImg\"\r\n    [altTxt]=\"quoteInfo.bannerImgTxt\"\r\n    [bottomTxt]=\"quoteInfo.bannerBottomTxt\"\r\n  ></app-banner>\r\n\r\n  <div\r\n    class=\"quotes-create\"\r\n    fxLayout=\"row\"\r\n    fxLayoutAlign=\"center center\"\r\n    fxLayoutGap=\"2rem\"\r\n  >\r\n    <button mat-raised-button (click)=\"createQuote()\">\r\n      <mat-icon inline=\"true\">add_circle_outline</mat-icon>\r\n    </button>\r\n    <span class=\"quotes-create-text\">CREATE A NEW QUOTE</span>\r\n    <mat-form-field class=\"select\">\r\n      <mat-label>Select a Project</mat-label>\r\n      <mat-select (selectionChange)=\"projectFilter($event.value)\" >\r\n        <mat-option  *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div\r\n    class=\"quotes-filter\"\r\n    fxLayout=\"row\"\r\n    fxLayoutAlign=\"center center\"\r\n    fxLayoutGap=\"2rem\"\r\n  >\r\n    <button [style.background]=\"selectedButton==='myQuote'?'#F3F3F3':''\" mat-flat-button [color]=\"selectedButton==='allQuote' ?'accent':''\" (click)=\"allQuote()\">ALL QUOTES</button>\r\n    <button [style.background]=\"selectedButton==='allQuote'?'#F3F3F3':''\" mat-flat-button [color]=\"selectedButton==='myQuote'?'accent':''\" (click)=\"myQuote()\">MY QUOTES</button>\r\n  </div>\r\n  <ag-grid-angular\r\n  [defaultColDef]=\"defaultColDef\"\r\n    style=\"height: 500px;\"\r\n    [gridOptions]=\"gridOptions\"\r\n    class=\"ag-theme-alpine quotes-table\"\r\n    [rowData]=\"rowData | async\"\r\n    [columnDefs]=\"columnDefs\"\r\n  >\r\n  </ag-grid-angular>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { EnvironmentService } from 'projects/core/src/lib/services/environment.service';\r\nimport { HttpService } from 'projects/core/src/public-api';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuoteListService {\r\n  constructor(private http: HttpService, private env: EnvironmentService) {}\r\n\r\n  getQuoteList<T>(\r\n    userId: number,\r\n    type?: string,\r\n    sourceType?: string,\r\n    projectName: string = ''\r\n  ): Observable<T> {\r\n    let url =\r\n      'load/customer/quotes?user_id=' +\r\n      userId +\r\n      '&source_type=' +\r\n      type +\r\n      '&type=' +\r\n      sourceType +\r\n      '&project_name=' +\r\n      projectName;\r\n    return this.http.sendGETRequest(this.env.getEndPoint() + url).pipe(\r\n      map((data: any) => {\r\n        return data.quote;\r\n      })\r\n    );\r\n  }\r\n\r\n  getProjectList(sourceType: string, userId: number) {\r\n    return this.http.sendGETRequest(\r\n      this.env.getEndPoint() +\r\n        'getQuoteProjectFilter?project_name=' +\r\n        '&source_type=' +\r\n        sourceType +\r\n        '&userid=' +\r\n        userId\r\n    );\r\n  }\r\n}\r\n","<app-create-form-header\r\n  [iconPath]=\"'assets/order/images/order-icon.png'\"\r\n  text=\"QUOTE\"\r\n  [subTitle]=\"subTitle\"\r\n>\r\n  <span subtitle>\r\n    <b *ngIf=\"customerName\">{{ \" \" + customerName }}</b>\r\n  </span>\r\n</app-create-form-header>\r\n<lib-quote-create-form\r\n  class=\"table\"\r\n  [type]=\"type\"\r\n  [submitButtonText]=\"submitButtonText\"\r\n  #quoteFormComp\r\n  (onSubmit)=\"onSubmit($event)\"\r\n  (onCancel)=\"onCancel()\"\r\n></lib-quote-create-form>\r\n","import { Location } from '@angular/common';\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToasterService } from 'projects/core/src/lib/services/toaster.service';\r\nimport { UserService } from 'projects/core/src/public-api';\r\nimport {\r\n  QuoteCreateFormComponent,\r\n  QuoteFormType,\r\n} from '../../common/components/quote-create-form/quote-create-form.component';\r\nimport { QuoteCreateService } from './quote-create.service';\r\n\r\n@Component({\r\n  selector: 'lib-quote-create',\r\n  templateUrl: './quote-create.component.html',\r\n  styleUrls: ['./quote-create.component.scss'],\r\n})\r\nexport class QuoteCreateComponent implements OnInit {\r\n  customerName: string = '';\r\n  subTitle =\r\n    'Get an estimated cost for a particular moodboard, piece or project.';\r\n  submitButtonText = 'CREATE';\r\n  type: QuoteFormType = 'CREATE';\r\n\r\n  @ViewChild('quoteFormComp') quoteFormComp: QuoteCreateFormComponent =\r\n    {} as QuoteCreateFormComponent;\r\n  constructor(private _router: Router, private _toaster: ToasterService) {\r\n    let stateObject = _router.getCurrentNavigation()?.extras.state;\r\n    this.customerName = stateObject?.customerName;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.customerName) {\r\n      this._router.navigate(['quote/create']);\r\n    }\r\n    if (this._router.url.includes('copy')) {\r\n      this.type = 'COPY';\r\n      this.subTitle = 'Copying Quote named -';\r\n    } else if (this._router.url.includes('edit')) {\r\n      this.subTitle = 'Editing Quote named -';\r\n      this.type = 'EDIT';\r\n      this.submitButtonText = 'UPDATE';\r\n    }\r\n  }\r\n\r\n  onSubmit(quote: any) {\r\n    this._toaster.success('Quote Created');\r\n    this._router.navigate(['quote', quote.sgid]);\r\n  }\r\n\r\n  onCancel() {\r\n    // this._location.back();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { QuoteHeaderComponent } from './components/quote-header/quote-header.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { CoreModule } from 'projects/core/src/public-api';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { TotalCellRendererComponent } from './components/total-cell-renderer/total-cell-renderer.component';\r\nimport { ItemTypeComponent } from './components/item-type/item-type.component';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { QuoteCreateFormComponent } from './components/quote-create-form/quote-create-form.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatCardModule} from '@angular/material/card';\r\n\r\n@NgModule({\r\n  declarations: [QuoteHeaderComponent, TotalCellRendererComponent, ItemTypeComponent, QuoteCreateFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    CoreModule,\r\n    FlexLayoutModule,\r\n    AgGridModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatDialogModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule\r\n  ], exports : [\r\n    QuoteHeaderComponent,\r\n    QuoteCreateFormComponent,\r\n    ItemTypeComponent,\r\n    TotalCellRendererComponent\r\n  ]\r\n})\r\nexport class QuoteCommonModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { EnvironmentService } from 'projects/core/src/lib/services/environment.service';\r\nimport { HttpService } from 'projects/core/src/public-api';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuoteDetailService {\r\n  constructor(private _http: HttpService, private _env: EnvironmentService) {}\r\n\r\n  updateQuote(json: Array<any>): Observable<any> {\r\n    return this._http.sendPOSTRequest(\r\n      this._env.getEndPoint() + 'save/quote/items',\r\n      JSON.stringify(json)\r\n    );\r\n  }\r\n\r\n  createOrder(params: any) {\r\n    return this._http.sendPOSTRequest(\r\n      this._env.getEndPoint() + 'create/order',\r\n      JSON.stringify(params)\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ToasterService } from 'projects/core/src/lib/services/toaster.service';\r\nimport { CoreService, UserService } from 'projects/core/src/public-api';\r\nimport { Location } from '@angular/common';\r\nimport { QuoteCreateFormService } from './quote-create-form.service';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { QuoteService } from '../../../quote.service';\r\n\r\nexport type QuoteFormType = 'CREATE' | 'EDIT' | 'COPY';\r\n@Component({\r\n  selector: 'lib-quote-create-form',\r\n  templateUrl: './quote-create-form.component.html',\r\n  styleUrls: ['./quote-create-form.component.scss'],\r\n})\r\nexport class QuoteCreateFormComponent implements OnInit {\r\n  @Input() quoteNumber: string = '';\r\n  @Input() phone: string = '';\r\n  @Input() customerName = '';\r\n  @Input() address = '';\r\n  @Input() email = '';\r\n  @Input() stateId: number = NaN;\r\n  @Input() companyName = '';\r\n  @Input() companyId = ''; \r\n  @Input() city = '';\r\n  @Input() projectName = '';\r\n  @Input() projectId = '';\r\n  @Input() zipCode = '';\r\n  @Input() submitButtonText = 'CREATE';\r\n  @Output() onCancel = new EventEmitter();\r\n  @Output() onSubmit = new EventEmitter();\r\n  @Input() type: QuoteFormType = 'CREATE';\r\n  stateList: Array<any> = ['A', 'B'];\r\n  showPDropdown: any = true;\r\n  showDropdown: any = true;\r\n  quoteFromGroup: FormGroup = new FormGroup({});\r\n  dCompanyList: any = [];\r\n  companyList: any = [];\r\n  projectList: any = [];\r\n  selectedCompany: any = '';\r\n  selectedProject: any = '';\r\n  constructor(\r\n    private _coreService: CoreService,\r\n    private _router: Router,\r\n    private _toaster: ToasterService,\r\n    private _location: Location,\r\n    private _fromService: QuoteCreateFormService,\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: any,\r\n    public _dialogRef: MatDialogRef<QuoteCreateFormComponent>,\r\n    public _user: UserService,\r\n    private _quoteService: QuoteService,\r\n\r\n    ) {\r\n    let stateObject = _router.getCurrentNavigation()?.extras.state;\r\n    this.quoteNumber = stateObject?.quoteNumber;\r\n    this.phone = stateObject?.phone;\r\n    this.customerName = stateObject?.customerName;\r\n    this.address = stateObject?.address;\r\n    this.email = stateObject?.email;\r\n    this.stateId = stateObject?.state;\r\n    this.companyName = stateObject?.companyName;\r\n    this.city = stateObject?.city;\r\n    this.projectName = stateObject?.projectName;\r\n    this.zipCode = stateObject?.zipCode;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.quoteNumber) {\r\n      this.quoteFromGroup.addControl(\r\n        'quote_id',\r\n        new FormControl(this.quoteNumber, Validators.required)\r\n      );\r\n    }\r\n\r\n    this.quoteFromGroup.addControl(\r\n      'contact_no',\r\n      new FormControl(this.phone, [\r\n        Validators.required,\r\n        Validators.pattern(\r\n          '^(1s?)?((([0-9]{3}))|[0-9]{3})[s-]?[\\0-9]{3}[s-]?[0-9]{4}$'\r\n        ),\r\n      ])\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'name',\r\n      new FormControl(this.customerName, Validators.required)\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'address',\r\n      new FormControl(this.address, Validators.required)\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'email',\r\n      new FormControl(this.email, [\r\n        Validators.required,\r\n        Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$'),\r\n      ])\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'state_id',\r\n      new FormControl(this.stateId, [Validators.required])\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'company_id',\r\n      new FormControl(this.companyId)\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'companyName',\r\n      new FormControl(\r\n        this.companyName ?? this._user.getUser().getCompanyName())\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'city',\r\n      new FormControl(this.city, Validators.required)\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'project_id',\r\n      new FormControl(this.projectId)\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'project_name',\r\n      new FormControl(this.projectName)\r\n    );\r\n    this.quoteFromGroup.addControl(\r\n      'zipcode',\r\n      new FormControl(this.zipCode, [\r\n        Validators.required,\r\n        Validators.pattern('^[0-9]{5}(?:-[0-9]{5})?$'),\r\n      ])\r\n    );\r\n    this.getStateList();\r\n    this.getCompanyList();\r\n  }\r\n\r\n  getStateList() {\r\n    this._coreService.getStateList().subscribe((data) => {\r\n      this.stateList = data;\r\n    });\r\n  }\r\n\r\n\r\n\r\n  getCompanyList() {\r\n    this._quoteService.getCompanyList().subscribe((data: any) => {\r\n      if(typeof data.result == 'string'){\r\n        this.companyList = [];\r\n        this.selectedCompany = \"\";\r\n        return;\r\n      }\r\n     // this.companyList = data.result.map((x: any) => x.company);\r\n      this.companyList  = data.result;\r\n      let companyId = data.result.find((x: any)=> x.company == this.selectedCompany)?.sgid;\r\n      if(companyId){\r\n        this.getProjectList(companyId, null);\r\n      }\r\n    });\r\n  }\r\n  getProjectList(companyId: any, event: any) {\r\n    if(event !== null) companyId = event.target.value;\r\n    this._quoteService.getProjectList(companyId).subscribe((data: any)=> {\r\n      if(typeof data.result == 'string'){\r\n        this.projectList = [];\r\n        this.selectedProject = \"\";\r\n      } else {\r\n        this.projectList  = data.result; //.map((x: any)=> x.project);\r\n        this.selectedProject = this.projectList[0];\r\n      }\r\n    })  \r\n  }\r\n  cancel() {\r\n    this.onCancel.emit();\r\n    if (this.dialogData.isDialog) {\r\n      this._dialogRef.close();\r\n    } else {\r\n      this._location.back();\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this._coreService\r\n      .validateZipCode(\r\n        this.quoteFromGroup.get('city')?.value,\r\n        this.quoteFromGroup.get('state_id')?.value,\r\n        this.quoteFromGroup.get('zipcode')?.value\r\n      )\r\n      .subscribe(\r\n        (data) => {\r\n          if (data?.status) {\r\n            this._fromService\r\n              .createQuote(this.quoteFromGroup, this.type)\r\n              .subscribe(\r\n                (data) => {\r\n                  this.onSubmit.emit(data?.quote);\r\n                  if (this.dialogData.isDialog) {\r\n                    this._toaster.success('Quote Created');\r\n                    this._dialogRef.close();\r\n                  }\r\n                },\r\n                (error) => {\r\n                  this._toaster.error(error);\r\n                }\r\n              );\r\n          } else {\r\n            this._toaster.warning('Invalid Zip code');\r\n          }\r\n        },\r\n        (error) => {\r\n          this._toaster.warning('Invalid Zip code');\r\n        }\r\n      );\r\n  }\r\n}\r\n","<div\r\n  fxFlex\r\n  class=\"quote-create__form\"\r\n  fxLayout=\"column\"\r\n  fxLayoutAlign=\"center center\"\r\n>\r\n<div  \r\n  fxLayout=\"row\"\r\n  fxFlex=\"100\"\r\n  style=\"width: 100%;\"\r\n  >\r\n<div          \r\n  fxFlex=\"95\"\r\n  fxLayout=\"row\"\r\n  fxLayoutAlign=\"center center\">\r\n<span class=\"quote-create__form--title\"> CREATE A NEW QUOTE</span>\r\n</div>\r\n<div          \r\n  fxFlex=\"5\"\r\n  fxLayout=\"row\"\r\n  fxLayoutAlign=\"row-reverse\">\r\n<span class=\"quote-create__form--title\" (click)=\"cancel();\" *ngIf=\"dialogData.isDialog == true\"> \r\n  <img src=\"assets/quote/images/close-22.svg\" height=\"22px\" width=\"22px\">\r\n</span>\r\n</div>\r\n</div>\r\n  <form\r\n    [formGroup]=\"quoteFromGroup\"\r\n    action=\"\"\r\n    class=\"quote-create__form--elements\"\r\n    fxLayout=\"row wrap\"\r\n    fxLayoutAlign=\"space-between stretch\"\r\n  >\r\n    <div\r\n      *ngIf=\"quoteNumber\"\r\n      fxFlex=\"45\"\r\n      fxLayout=\"column\"\r\n      fxLayoutAlign=\"stretch\"\r\n    >\r\n      <span class=\"label\">Quote Number <span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [readonly]=\"quoteNumber\"\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('quote_id')?.invalid,\r\n          'read-only': quoteNumber\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"quote_id\"\r\n        placeholder=\"Enter Quote Number\"\r\n      />\r\n    </div>\r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Customer Name<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('name')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"name\"\r\n        placeholder=\"Enter Customer Name\"\r\n      />\r\n    </div>\r\n\r\n     <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Company Name<span class=\"asterisk\">*</span>\r\n    </span>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\r\n    <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showDropdown=!showDropdown; showPDropdown=!showPDropdown\" class=\"add\">\r\n      <img src=\"assets/quote/images/SVG-Icons-06.svg\">\r\n    </a>\r\n    <a mat-button *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\r\n      <img src=\"assets/quote/images/SVG-Icons-06.svg\">\r\n    </a>\r\n    <input style=\"width: 100%;\" *ngIf=\"showDropdown\"\r\n        [readonly]=\"!_user.getUser().isInternalUser()\"\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('companyName')?.invalid,\r\n          'read-only': !_user.getUser().isInternalUser()\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"companyName\"\r\n        placeholder=\"Add Company Name\"\r\n      />\r\n      <select style=\"width: 100%;\" *ngIf=\"_user.getUser().isInternalUser() && !showDropdown\"\r\n      [ngClass]=\"{\r\n        'error-border': quoteFromGroup.get('company_id')?.invalid\r\n      }\"\r\n      formControlName=\"company_id\"\r\n      (change)=\"getProjectList('', $event)\"\r\n    >\r\n      <option  *ngFor=\"let cmp of companyList\" [value]=\"cmp.sgid\" >\r\n        {{ cmp.company }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n    </div>\r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Project Name<span class=\"asterisk\">*</span> </span>\r\n      <div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\r\n        <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showPDropdown=!showPDropdown\" class=\"add\">\r\n          <img src=\"assets/quote/images/SVG-Icons-06.svg\">\r\n        </a>\r\n        <a *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\r\n          <img src=\"assets/quote/images/SVG-Icons-06.svg\">        </a>\r\n    \r\n      <input style=\"width: 100%;\" *ngIf=\"showPDropdown\"\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('project_name')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"project_name\"\r\n        placeholder=\"Add Project Name\"\r\n      />\r\n      <select style=\"width: 100%;\" *ngIf=\"_user.getUser().isInternalUser() && !showPDropdown \"\r\n      [ngClass]=\"{\r\n        'error-border': quoteFromGroup.get('project_id')?.invalid\r\n      }\"\r\n      formControlName=\"project_id\"\r\n    >\r\n      <option *ngFor=\"let prj of projectList\" [value]=\"prj.sgid\">\r\n        {{ prj.project }}\r\n      </option>\r\n    </select>\r\n</div>\r\n    </div>\r\n   \r\n    \r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Email<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('email')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"email\"\r\n        placeholder=\"Add on Email\"\r\n      />\r\n    </div>\r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Phone<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('contact_no')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        placeholder=\"Add a Phone Number\"\r\n        formControlName=\"contact_no\"\r\n      />\r\n    </div>\r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Address<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('address')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"address\"\r\n        placeholder=\"Enter on Address\"\r\n      />\r\n    </div>\r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">State<span class=\"asterisk\">*</span></span>\r\n      <select\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('state_id')?.invalid\r\n        }\"\r\n        formControlName=\"state_id\"\r\n      >\r\n        <option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">\r\n          {{ state.name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n    \r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">City<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [readonly]=\"type === 'COPY'\"\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('city')?.invalid,\r\n          'read-only': type === 'COPY'\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"city\"\r\n        placeholder=\"Enter a City\"\r\n      />\r\n    </div>\r\n    \r\n    <div fxFlex=\"45\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Zip Code<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [readonly]=\"type === 'COPY'\"\r\n        [ngClass]=\"{\r\n          'error-border': quoteFromGroup.get('zipcode')?.invalid,\r\n          'read-only': type === 'COPY'\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"zipcode\"\r\n        placeholder=\"Add a ZipCode\"\r\n      />\r\n    </div>\r\n  </form>\r\n  <div\r\n    class=\"quote-create__actions\"\r\n    fxLayout=\"row\"\r\n    fxLayoutAlign=\"center center\"\r\n    fxLayoutGap=\"2rem\"\r\n  >\r\n    <button\r\n      mat-raised-button\r\n      [disabled]=\"quoteFromGroup.invalid\"\r\n      class=\"btn btn-primary\"\r\n      (click)=\"submit()\"\r\n    >\r\n      {{ submitButtonText }}\r\n    </button>\r\n    <button\r\n    class=\"btn btn-cancel\"\r\n    mat-raised-button (click)=\"cancel()\">CANCEL</button>\r\n  </div>\r\n</div>\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  ICellRendererParams,\r\n} from 'ag-grid-community';\r\nimport { ToasterService } from 'projects/core/src/lib/services/toaster.service';\r\nimport {\r\n  CoreService,\r\n  CounterComponent,\r\n  ImageRendererComponent,\r\n  UserService,\r\n} from 'projects/core/src/public-api';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ItemTypeComponent } from '../item-type/item-type.component';\r\nimport { TotalCellRendererComponent } from '../total-cell-renderer/total-cell-renderer.component';\r\nimport { QuoteHeaderService } from './quote-header.service';\r\n\r\n@Component({\r\n  selector: 'lib-quote-header',\r\n  templateUrl: './quote-header.component.html',\r\n  styleUrls: ['./quote-header.component.scss'],\r\n})\r\nexport class QuoteHeaderComponent implements OnInit {\r\n  @Input() quoteId: number = 0;\r\n  @Input() text: string = 'QUOTE';\r\n  @Input() iconPath: string = 'assets/quote/images/quote-icon.png';\r\n\r\n  @Output() onCopy = new EventEmitter();\r\n  @Output() onEdit = new EventEmitter();\r\n  @ViewChild('dialog') dialog: TemplateRef<any> = {} as TemplateRef<any>;\r\n  editQuote = false;\r\n\r\n  agGrid: GridReadyEvent = {} as GridReadyEvent;\r\n  quoteDetails: any = {};\r\n  moodboards: Array<any> = [];\r\n  selectedMoodboard: any = '';\r\n  moodboardList: Array<any> = [];\r\n  pinnedBottomRowData = [\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'SUB TOTAL',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'DELIVERY FEE',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'TAXES',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'TOTAL',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n  ];\r\n\r\n  columnDefs = [\r\n    {\r\n      field: 'sgid',\r\n      width: 120,\r\n      headerName: 'S. NO',\r\n      headerTooltip: 'S.NO',\r\n      colSpan: (params: any) => (params.data.subTotal === 'abc' ? 10 : 1),\r\n      cellStyle: (params: any) => {\r\n        if (params.data.subTotal === 'abc') {\r\n          return { 'text-align': 'end' };\r\n        }\r\n        return '';\r\n      },\r\n    },\r\n    { field: 'warehouse_name', headerName: 'CITY' },\r\n    { field: 'sku', headerName: 'SKU' },\r\n    {\r\n      headerName: 'IMAGE',\r\n      cellRenderer: 'ImageRendererComponent',\r\n      field: 'product_images.small',\r\n      cellStyle: {\r\n        padding: '0.3rem',\r\n      },\r\n      // valueGetter: async (params:ICellRendererParams)=>{\r\n      // let x = await this._core.getBase64Image(params?.data?.product_images?.small).toPromise();\r\n      // return 'data:image/jpeg;base64' + x?.imageurl;\r\n      // }\r\n    },\r\n    {\r\n      headerName: 'PRODUCT NAME',\r\n      field: 'name',\r\n      width: '250px',\r\n    },\r\n    {\r\n      headerName: 'TYPE',\r\n      field: 'button_type',\r\n      cellRenderer: 'ItemTypeCellRenderer',\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 0 ? 'Rent' : 'Buy';\r\n      },\r\n    },\r\n    {\r\n      headerName: 'QUANTITY',\r\n      field: 'is_qty',\r\n      cellRenderer: 'CounterCellRenderer',\r\n    },\r\n    {\r\n      headerName: 'BUY PRICE ($)',\r\n      field: 'buy_price',\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 1 ? params.data.buy_price : 'NA';\r\n      },\r\n    },\r\n    {\r\n      headerName: 'RENTAL PRICE/MONTH',\r\n      field: 'price',\r\n      cellRenderer: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 0 ? params.value : 'NA';\r\n      },\r\n    },\r\n    // { headerName: 'DISCOUNT ($)', field: 'discount' },\r\n\r\n    {\r\n      headerName: 'MONTHS',\r\n      field: 'months',\r\n    },\r\n    {\r\n      headerName: 'TOTAL ($)',\r\n      field: 'is_total',\r\n      cellRenderer: 'TotalCellRendererComponent',\r\n    },\r\n  ];\r\n\r\n  gridOptions: GridOptions = {\r\n    onGridReady: (api: GridReadyEvent) => {\r\n      this.agGrid = api;\r\n      this.onGridReady(api);\r\n    },\r\n    rowHeight: 100,\r\n    headerHeight: 100,\r\n    getRowHeight: (params: any) => {\r\n      return params?.data?.isExtraRow ? 50 : 100;\r\n    },\r\n  };\r\n  defaultColDef = {\r\n    wrapText: true,\r\n    cellClass: 'grid-cell',\r\n    cellStyle: {\r\n      'line-height': 'normal',\r\n      'align-items': 'center',\r\n      'justify-content': 'center',\r\n      display: 'flex',\r\n      padding: '0 0.5rem',\r\n    },\r\n  };\r\n  frameworkComponents = {\r\n    ImageRendererComponent: ImageRendererComponent,\r\n    TotalCellRendererComponent: TotalCellRendererComponent,\r\n    ItemTypeCellRenderer: ItemTypeComponent,\r\n    CounterCellRenderer: CounterComponent,\r\n  };\r\n  rowData: Observable<any[]> = new Observable();\r\n\r\n  private dialogRef: MatDialogRef<any> | undefined = undefined;\r\n  constructor(\r\n    private _quoteHeaderService: QuoteHeaderService,\r\n    private _router: Router,\r\n    private _user: UserService,\r\n    private _core: CoreService,\r\n    private _matDialog: MatDialog,\r\n    private _toaster: ToasterService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getQuoteInformation();\r\n    this.getMoodboardInQuote();\r\n  }\r\n  onGridReady(evt: GridReadyEvent) {\r\n    this.agGrid = evt;\r\n    evt.api.sizeColumnsToFit();\r\n    this.rowData = this.getQuoteSummary();\r\n  }\r\n\r\n  getQuoteSummary<T>(): Observable<T> {\r\n    return this._quoteHeaderService.getQuoteSummary<T>(this.quoteId).pipe(\r\n      map((x: any) => {\r\n        if(x.quote_items.length>0){\r\n          this.updateBottomData(x.quote);\r\n        } else {\r\n          this.updateBottomData({delivery_fee:0,tax_percentage:0,tax_amount:0})\r\n        }\r\n        this.agGrid.api.redrawRows();\r\n        return x.quote_items\r\n      })\r\n    );\r\n  }\r\n\r\n  getMoodboardInQuote() {\r\n    this._quoteHeaderService\r\n      .getMoodboardInQuote<Array<any>>(this.quoteId)\r\n      .subscribe((data: Array<any>) => {\r\n        if (typeof data === 'string') {\r\n          return;\r\n        }\r\n        this.moodboards = data;\r\n      });\r\n  }\r\n\r\n  getQuoteInformation() {\r\n    let userId = this._user.getUser().getId();\r\n    let companyId = this._user.getUser().getCompanyId();\r\n    this._quoteHeaderService\r\n      .getQuoteInformation(this.quoteId)\r\n      .subscribe((data) => {\r\n        this.quoteDetails = data;\r\n        if (this.quoteDetails.userid === userId) {\r\n          this.editQuote = true;\r\n        }\r\n        if (\r\n          companyId === this.quoteDetails.company_id &&\r\n          this.quoteDetails.application_type === 1\r\n        ) {\r\n          this.editQuote = true;\r\n        }\r\n      });\r\n  }\r\n\r\n  private getQuoteObject() {\r\n    return {\r\n      quoteNumber: this.quoteDetails.sgid,\r\n      phone: this.quoteDetails.contactno,\r\n      customerName: this.quoteDetails.name,\r\n      address: this.quoteDetails.address,\r\n      email: this.quoteDetails.email,\r\n      state: this.quoteDetails.state,\r\n      companyName: this.quoteDetails.company_name,\r\n      city: this.quoteDetails.city_name,\r\n      projectName: this.quoteDetails.project_name,\r\n      zipCode: this.quoteDetails.is_zip_code,\r\n    };\r\n  }\r\n\r\n  OnCopy(evt: any) {\r\n    this._router.navigate(['quote/copy'], { state: this.getQuoteObject() });\r\n    this.onCopy.emit(evt);\r\n  }\r\n  OnEdit(evt: any) {\r\n    this._router.navigate(['quote/edit'], { state: this.getQuoteObject() });\r\n    this.onEdit.emit(evt);\r\n  }\r\n\r\n  updateBottomData(data: any) {\r\n    this.pinnedBottomRowData[1].is_total = data?.delivery_fee;\r\n    this.pinnedBottomRowData[2].sgid = 'TAXES (' + data?.tax_percentage + '%)';\r\n    this.pinnedBottomRowData[2].is_total = data?.tax_amount;\r\n    this.pinnedBottomRowData[3].is_total = data?.tax_amount;\r\n  }\r\n  openDialog() {\r\n    this.dialogRef = this._matDialog.open(this.dialog);\r\n    this._quoteHeaderService.getMoodBoardByUser().subscribe(\r\n      (data: any) => {\r\n        this.moodboardList = data.result;\r\n      },\r\n      (error) => {\r\n        this.moodboardList = [];\r\n      }\r\n    );\r\n  }\r\n\r\n  addMoodboard(selectedMoodboard: number) {\r\n    this._quoteHeaderService\r\n      .addMoodboard(this.quoteId, selectedMoodboard)\r\n      .subscribe(\r\n        (data: any) => {\r\n          this.dialogRef?.close();\r\n          this._toaster.success(data.msg);\r\n          this.ngOnInit();\r\n          this.onGridReady(this.agGrid);\r\n        },\r\n        (error) => {\r\n          this._toaster.error('Fail to add moodboard');\r\n        }\r\n      );\r\n  }\r\n\r\n  selectionChange() {\r\n    console.log(this.selectedMoodboard);\r\n  }\r\n\r\n  removeMDFromQuote(md: any) {\r\n    this._quoteHeaderService.removeMDFromQuote(md.sgid, md.quote_id).subscribe(\r\n      (data) => {\r\n        this._toaster.success(data.msg);\r\n        this.ngOnInit();\r\n        this.onGridReady(this.agGrid);\r\n      },\r\n      (error) => this._toaster.success('Fail to removed Moodboard from Quote')\r\n    );\r\n  }\r\n}\r\n","<ng-template #dialog>\r\n  <div class=\"dialog\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\" >\r\n    <h1 mat-dialog-title>Add Moodboard</h1>\r\n    <mat-dialog-content>\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>Choose an option</mat-label>\r\n        <mat-select\r\n          [(ngModel)]=\"selectedMoodboard\"\r\n          (selectionChange)=\"selectionChange()\"\r\n        >\r\n          <ng-container *ngFor=\"let moodboard of moodboardList\">\r\n            <mat-option [value]=\"moodboard.sgid\">{{\r\n              moodboard.boardname\r\n            }}</mat-option>\r\n          </ng-container>\r\n\r\n          <mat-option *ngIf=\"moodboardList.length === 0\" value=\"\"\r\n            >No Moodboard</mat-option\r\n          >\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"center center\" >\r\n      <button\r\n        mat-flat-button\r\n        color=\"accent\"\r\n        [disabled]=\"!selectedMoodboard\"\r\n        (click)=\"addMoodboard(selectedMoodboard)\"\r\n      >\r\n        Add Moodboard\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</ng-template>\r\n\r\n<div class=\"quote\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n  <div class=\"quote-details\" fxLayout=\"row\" fxLayoutAlign=\" stretch\">\r\n    <div\r\n      class=\"quote-details__icon\"\r\n      fxFlex=\"30\"\r\n      fxLayout=\"column\"\r\n      fxLayoutAlign=\"center center\"\r\n    >\r\n      <span>{{ text }}</span>\r\n      <img [src]=\"iconPath\" alt=\"\" srcset=\"\" />\r\n    </div>\r\n    <div\r\n      class=\"quote-details__info\"\r\n      fxFlex=\"60\"\r\n      fxLayout=\"row wrap\"\r\n      fxLayoutAlign=\"start\"\r\n    >\r\n      <div fxFlex=\"66\" *ngIf=\"quoteDetails?.order_reference\">\r\n        <span class=\"label\">Order Number: </span>\r\n        <span class=\"value\">{{ quoteDetails.order_reference }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Project Name: </span>\r\n        <span class=\"value\">{{ quoteDetails.project_name }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Company Name: </span>\r\n        <span class=\"value\">{{ quoteDetails.company_name }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Address: </span>\r\n        <span class=\"value\">{{ quoteDetails.address }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Quote #: </span>\r\n        <span class=\"value\">{{ quoteDetails.sgid }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Contact No: </span>\r\n        <span class=\"value\">{{ quoteDetails.contactno }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">State: </span>\r\n        <span class=\"value\">{{ quoteDetails.is_state_name }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Customer Name: </span>\r\n        <span class=\"value\">{{ quoteDetails.name }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Email: </span>\r\n        <span class=\"value\">{{ quoteDetails.email }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">City: </span>\r\n        <span class=\"value\">{{ quoteDetails.city_name }}</span>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <span class=\"label\">Zipcode: </span>\r\n        <span class=\"value\">{{ quoteDetails.is_zip_code }}</span>\r\n      </div>\r\n    </div>\r\n    <div\r\n      class=\"quote-details__copy\"\r\n      fxFlex=\"10\"\r\n      fxLayout=\"row\"\r\n      fxLayoutAlign=\"start end\"\r\n      fxLayoutGap=\"1rem\"\r\n    >\r\n      <button\r\n        mat-mini-fab\r\n        color=\"accent\"\r\n        aria-label=\"Example icon button with a filter list icon\"\r\n        (click)=\"OnCopy($event)\"\r\n      >\r\n        <mat-icon>file_copy</mat-icon>\r\n      </button>\r\n      <button\r\n        mat-mini-fab\r\n        *ngIf=\"text === 'QUOTE' && editQuote\"\r\n        color=\"accent\"\r\n        aria-label=\"Example icon button with a filter list icon\"\r\n        (click)=\"OnEdit($event)\"\r\n      >\r\n        <mat-icon>edit icon</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"quote-tab-group\">\r\n    <mat-tab-group>\r\n      <mat-tab label=\"ADD A MOODBOARD\">\r\n        <div class=\"quote-moodboard\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n          <span class=\"quote-moodboard__heading\">\r\n            {{ \"Add A Moodboard\" | uppercase }}</span\r\n          >\r\n          <div\r\n            class=\"quote-moodboard__list\"\r\n            fxLayout=\"row\"\r\n            fxLayoutAlign=\" center\"\r\n            fxLayoutGap=\"3rem\"\r\n          >\r\n            <div\r\n              fxFlex=\"10\"\r\n              class=\"quote-moodboard__list--item\"\r\n              fxLayout=\"column\"\r\n              fxLayoutAlign=\"center center\"\r\n              (click)=\"openDialog()\"\r\n              *ngIf=\"text === 'QUOTE' && editQuote\"\r\n            >\r\n              <mat-icon inline=\"true\" class=\"pointer\">add_circle_outline</mat-icon>\r\n            </div>\r\n            <div\r\n              fxFlex=\"10\"\r\n              class=\"quote-moodboard__list--item moodboard-list\"\r\n              *ngFor=\"let moodboard of moodboards\"\r\n              fxLayout=\"column\"\r\n              fxLayoutAlign=\"center\"\r\n            >\r\n            <i class=\"fa fa-trash\"  *ngIf=\"text === 'QUOTE' && editQuote\" (click)=\"removeMDFromQuote(moodboard)\" aria-hidden=\"true\"></i>\r\n              <img\r\n                fxFlex\r\n                height=\"100%\"\r\n                width=\"100%\"\r\n                [src]=\"moodboard?.is_moodboard_images?.small\"\r\n                alt=\"Moodboard\"\r\n              />\r\n              <p>{{ moodboard.moodboard_name }}</p>\r\n            </div>\r\n          </div>\r\n        </div>  \r\n      </mat-tab>\r\n      <mat-tab label=\"FLOOR PLANS & UNITS\">\r\n        <mat-card>\r\n          <mat-tab-group>\r\n            <mat-tab label=\"Floor Plans\">\r\n              <div class=\"flexbox-parent\">\r\n                <div class=\"floor-plans\" layout=\"row\" layout-align=\"center center\">\r\n                  <div flex=\"15\">No Floor Plans found. Please add Floor Plan.</div>\r\n                </div>\r\n              </div>\r\n            </mat-tab>\r\n            <mat-tab label=\"Units\">\r\n              <div class=\"flexbox-parent\">\r\n                <div class=\"floor-plans\" layout=\"row\" layout-align=\"center center\">\r\n                  <div flex=\"15\">No Units found. Please add Floor Plan.</div>\r\n                </div>\r\n              </div>\r\n            </mat-tab>\r\n          </mat-tab-group>\r\n        </mat-card>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div>\r\n  \r\n  <div class=\"quote-summary\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\r\n    <div\r\n      class=\"quote-summary__info\"\r\n      fxLayout=\"row\"\r\n      fxLayoutAlign=\"start start\"\r\n      fxLayoutGap=\"2rem\"\r\n    >\r\n      <div>\r\n        <span class=\"quote-summary__info--label\">Customer City :</span>\r\n        <span class=\"quote-summary__info--value\">\r\n          {{ quoteDetails.city_name }}</span\r\n        >\r\n      </div>\r\n      <div>\r\n        <span class=\"quote-summary__info--label\">Zipcode:</span>\r\n        <span class=\"quote-summary__info--value\">{{\r\n          quoteDetails.is_zip_code\r\n        }}</span>\r\n      </div>\r\n    </div>\r\n    <ag-grid-angular\r\n      [gridOptions]=\"gridOptions\"\r\n      style=\"height: 600px; width: 100%\"\r\n      class=\"ag-theme-alpine quotes-table\"\r\n      [rowData]=\"rowData | async\"\r\n      [frameworkComponents]=\"frameworkComponents\"\r\n      [pinnedBottomRowData]=\"pinnedBottomRowData\"\r\n      [defaultColDef]=\"defaultColDef\"\r\n      [columnDefs]=\"columnDefs\"\r\n    >\r\n    </ag-grid-angular>\r\n    <div\r\n      class=\"quote-summary__actions\"\r\n      fxLayout=\"row\"\r\n      fxLayoutAlign=\"center\"\r\n      fxLayoutGap=\"2rem\"\r\n    >\r\n      <ng-content [select]=\"actions\"> </ng-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { EnvironmentService } from 'projects/core/src/lib/services/environment.service';\r\nimport { HttpService, UserService } from 'projects/core/src/public-api';\r\nimport { Observable } from 'rxjs';\r\nimport { QuoteFormType } from './quote-create-form.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuoteCreateFormService {\r\n  constructor(\r\n    private _http: HttpService,\r\n    private _env: EnvironmentService,\r\n    private _user: UserService\r\n  ) {}\r\n\r\n  private getParams(form: FormGroup) {\r\n    let obj = form.value;\r\n    obj.user_id = this._user.getUser().getId();\r\n    obj.userid = this._user.getUser().getId();\r\n    return obj;\r\n  }\r\n\r\n  createQuote(obj: FormGroup, type: QuoteFormType): Observable<any> {\r\n    obj = this.getParams(obj);\r\n\r\n    let url = 'create/customer/info';\r\n    if (type === 'EDIT') {\r\n      url = 'update/customer/info';\r\n    }\r\n    if (type === 'COPY') {\r\n      url = 'clone/quote';\r\n    }\r\n    return this._http.sendPOSTRequest(\r\n      this._env.getEndPoint() + url,\r\n      JSON.stringify(obj)\r\n    );\r\n  }\r\n}\r\n","import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/**\n * The max height of the select's overlay panel.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this.overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return ɵMatSelect_BaseFactory(t || MatSelect); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\nconst ɵMatSelect_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSelect);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n            }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, _MatSelectBase, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map","import { Injectable } from '@angular/core';\r\nimport { EnvironmentService } from 'projects/core/src/lib/services/environment.service';\r\nimport { HttpService, UserService } from 'projects/core/src/public-api';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuoteHeaderService {\r\n  constructor(\r\n    private _http: HttpService,\r\n    private _env: EnvironmentService,\r\n    private _user: UserService\r\n  ) {}\r\n\r\n  getQuoteSummary<T>(quoteId: number): Observable<T> {\r\n    return this._http\r\n      .sendGETRequest(\r\n        this._env.getEndPoint() + 'quote/items?quote_id=' + quoteId\r\n      )\r\n  }\r\n\r\n  getMoodboardInQuote<T>(quoteId: number): Observable<T> {\r\n    let data = {\r\n      quote_id: quoteId,\r\n    };\r\n    return this._http\r\n      .sendPOSTRequest(\r\n        this._env.getEndPoint() + 'getMoodboardInQuote',\r\n        JSON.stringify(data)\r\n      )\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (!Array.isArray(data.result)) {\r\n            return [];\r\n          }\r\n          return data.result;\r\n        })\r\n      );\r\n  }\r\n\r\n  getQuoteInformation<T>(quoteId: number): Observable<T> {\r\n    return this._http\r\n      .sendGETRequest(\r\n        this._env.getEndPoint() + 'load/quote/info?quote_id=' + quoteId\r\n      )\r\n      .pipe(map((data: any) => data.quote));\r\n  }\r\n\r\n  getMoodBoardByUser(): Observable<[]> {\r\n    return this._http.sendPOSTRequest(\r\n      this._env.getEndPoint() + 'getMoodBoardByUser',\r\n      JSON.stringify({ userid: this._user.getUser().getId() })\r\n    );\r\n  }\r\n\r\n  addMoodboard(quoteId: number, moodboardId: number) {\r\n    let obj = {\r\n      moodboard_id: moodboardId,\r\n      quote_id: quoteId,\r\n      units: null,\r\n    };\r\n    return this._http.sendPOSTRequest(\r\n      this._env.getEndPoint() + 'add/floorplan/moodboard',\r\n      JSON.stringify(obj)\r\n    );\r\n  }\r\n  removeMDFromQuote(mdId: number, quoteId: number): Observable<any> {\r\n    return this._http.sendPOSTRequest(\r\n      this._env.getEndPoint() + 'removeMoodBoardFromQuote',\r\n      JSON.stringify({ quote_id: quoteId, moodboard_id: mdId })\r\n    );\r\n  }\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { QuoteCreateComponent } from './components/quote-create/quote-create.component';\r\nimport { QuoteListComponent } from './components/quote-list/quote-list.component';\r\nimport { QuoteComponent } from './components/quote/quote.component';\r\n\r\nexport const quoteRoute: Routes = [\r\n  {\r\n    path: '',\r\n    component: QuoteListComponent,\r\n  },\r\n  {\r\n    path: 'create',\r\n    component: QuoteCreateComponent,\r\n  },\r\n  {\r\n    path: 'edit',\r\n    component: QuoteCreateComponent,\r\n  },\r\n  {\r\n    path: 'copy',\r\n    component: QuoteCreateComponent,\r\n  },\r\n  {\r\n    path: ':id',\r\n    component: QuoteComponent,\r\n  },\r\n];\r\n","<span  *ngIf=\"status === 1\">Buy</span>\r\n<span  *ngIf=\"status === 0\">Rent</span>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\r\n\r\n@Component({\r\n  selector: 'lib-item-type',\r\n  templateUrl: './item-type.component.html',\r\n  styleUrls: ['./item-type.component.scss'],\r\n})\r\nexport class ItemTypeComponent implements OnInit, ICellRendererAngularComp {\r\n  status = 0;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.status = params.data.button_type;\r\n  }\r\n\r\n  refresh(params: ICellRendererParams): boolean {\r\n    this.status = params.data.button_type;\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EnvironmentService, HttpService } from 'projects/core/src/public-api';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuoteService {\r\n\r\n  constructor(private http: HttpService, private env: EnvironmentService) { }\r\n  getCompanyList(){\r\n    return this.http.sendGETRequest(this.env.getEndPoint() + 'getCompanyListNew');\r\n  }\r\n\r\n  getProjectList(companyId: any){\r\n    return this.http.sendGETRequest( this.env.getEndPoint() + 'getProjectListNew?company_id='+companyId)\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\n\r\nimport { ToasterService } from 'projects/core/src/lib/services/toaster.service';\r\nimport {\r\n  CoreService,\r\n  PaymentComponent,\r\n  PdfService,\r\n  UserService,\r\n} from 'projects/core/src/public-api';\r\nimport { QuoteHeaderComponent } from '../../common/components/quote-header/quote-header.component';\r\nimport { QuoteDetailService } from './quote-detail.service';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport { forkJoin } from 'rxjs';\r\n@Component({\r\n  selector: 'lib-quote',\r\n  templateUrl: './quote.component.html',\r\n  styleUrls: ['./quote.component.scss'],\r\n})\r\nexport class QuoteComponent implements OnInit {\r\n  quoteId: number = 0;\r\n  @ViewChild('quoteHeader') quoteHeader: QuoteHeaderComponent =\r\n    {} as QuoteHeaderComponent;\r\n  constructor(\r\n    private _route: ActivatedRoute,\r\n    private _quoteDetailService: QuoteDetailService,\r\n    private _toaster: ToasterService,\r\n    private _dialog: MatDialog,\r\n    private _user: UserService,\r\n    private _core: CoreService,\r\n    private _pdf: PdfService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe((params: Params) => {\r\n      this.quoteId = params.id;\r\n    });\r\n  }\r\n\r\n  saveQuote() {\r\n    let quoteData: Array<any> = [];\r\n    let quoteDetails = this.quoteHeader.quoteDetails;\r\n    let pinnedRowData = this.quoteHeader.pinnedBottomRowData;\r\n    let agGrid = this.quoteHeader.agGrid;\r\n    agGrid?.api?.forEachNode((rowNode) => {\r\n      let node = rowNode.data;\r\n      let obj: any = {\r\n        sgid: node?.sgid,\r\n        button_type: node?.button_type,\r\n        quote_id: quoteDetails.sgid,\r\n        sub_total: pinnedRowData[0].is_total,\r\n        old_month: node.old_month,\r\n        monthly_rent: quoteDetails.monthly_rent,\r\n        delivery_fee: quoteDetails.delivery_fee,\r\n        pickup_fee: quoteDetails.pickup_fee,\r\n        tax: pinnedRowData[2].is_total,\r\n        net_total: quoteDetails.net_total,\r\n        qty: node.is_qty,\r\n        discount: node.discount || 0,\r\n        quote_discount: quoteDetails.discount || 0,\r\n        quote_discount_price: quoteDetails.discount_price || 0,\r\n        percentage_discount: node.percentage_discount || 0,\r\n        months: node.months,\r\n        total: node.is_total,\r\n        price: node.price,\r\n        buy_price: node.buy_price,\r\n        sale_price: node.price,\r\n        apply_b2b_discount: node.b2b_discount || 0,\r\n      };\r\n      quoteData.push(obj);\r\n    });\r\n    this._quoteDetailService.updateQuote(quoteData).subscribe(\r\n      (data) => {\r\n        this._toaster.success('Quote Saved Successfully');\r\n      },\r\n      (error) => {\r\n        this._toaster.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  continueToPayment() {\r\n    this._dialog\r\n      .open(PaymentComponent, {\r\n        height: '15rem',\r\n        data: { quoteId: this.quoteHeader?.quoteDetails?.sgid },\r\n      })\r\n      .afterClosed()\r\n      .subscribe(\r\n        (data) => {\r\n          data['quote_id'] = this.quoteHeader?.quoteDetails?.sgid;\r\n          data['sgid'] = this._user.getUser().getId();\r\n          this._quoteDetailService.createOrder(data).subscribe(\r\n            (data) => {\r\n              this._toaster.success('Payment Done');\r\n            },\r\n            (error) => {\r\n              this._toaster.success('Payment Fails');\r\n            }\r\n          );\r\n        },\r\n        (error) => {}\r\n      );\r\n  }\r\n\r\n  generatePdf() {\r\n    let data = this._pdf.getAgGridRowsAndColumns(this.quoteHeader.agGrid);\r\n    let imagesObs = this._pdf.getAllTableBase64Images(data?.rows as [], 3);\r\n    imagesObs.subscribe((images: any) => {\r\n      let doc = new jsPDF();\r\n      doc.text('Quote Information', 5, 15);\r\n      let info = [\r\n        ['Project Name:', this.quoteHeader.quoteDetails.project_name],\r\n        ['address', this.quoteHeader.quoteDetails.address],\r\n        ['Company Name:', this.quoteHeader.quoteDetails.company_name],\r\n        ['Quote :', this.quoteHeader.quoteDetails.sgid],\r\n        ['Contact No:', this.quoteHeader.quoteDetails.contactno],\r\n        ['State:', this.quoteHeader.quoteDetails.is_state_name],\r\n        ['Customer Name:', this.quoteHeader.quoteDetails.name],\r\n        ['Email:', this.quoteHeader.quoteDetails.email],\r\n        ['City:', this.quoteHeader.quoteDetails.city_name],\r\n        ['Zipcode:', this.quoteHeader.quoteDetails.zipcode],\r\n      ];\r\n      autoTable(doc, {\r\n        ...this._pdf.getInformationTableUserOptions(),\r\n        body: info,\r\n      });\r\n      doc.addPage();\r\n      doc.text('Quote Summary', 5, 15);\r\n      autoTable(doc, {\r\n        ...this._pdf.getSummaryTableUserOptions(),\r\n        columnStyles: {\r\n          0: { cellWidth: 9 },\r\n          1: { cellWidth: 20 },\r\n          2: { cellWidth: 10 },\r\n          3: { cellWidth: 20 },\r\n          4: { cellWidth: 30 },\r\n          5: { cellWidth: 15 },\r\n          6: { cellWidth: 10 },\r\n          7: { cellWidth: 20 },\r\n          8: { cellWidth: 20 },\r\n          11: { cellWidth: 20 },\r\n        },\r\n        columns: data.columns,\r\n        body: data?.rows?.map((r: any) => {\r\n          if (!parseInt(r[0])) {\r\n            let temp = [];\r\n            temp.push({ content: r[0], colSpan: r.length - 1 });\r\n            temp.push(r[r.length - 1]);\r\n            r = temp;\r\n          }\r\n          return r;\r\n        }),\r\n        willDrawCell: (data) => {\r\n          if (data.section === 'body' && data.column.index === 3) {\r\n            data.cell.raw = '';\r\n            data.cell.text = [];\r\n          }\r\n        },\r\n        didDrawCell: (data) => {\r\n          if (data.section === 'body' && data.column.index === 3) {\r\n            var base64Img = 'data:image/jpeg;base64,' + images[data.row.index];\r\n            doc.addImage(\r\n              base64Img,\r\n              'JPEG',\r\n              data.cell.x + 1,\r\n              data.cell.y + 1,\r\n              18,\r\n              18\r\n            );\r\n          }\r\n        },\r\n      });\r\n      doc.save('quote.pdf');\r\n    });\r\n  }\r\n}\r\n","<div>\r\n  <lib-quote-header fxFill #quoteHeader [quoteId]=\"quoteId\">\r\n    <ng-container actions>\r\n      <button mat-flat-button color=\"primary\" (click)=\"saveQuote()\">\r\n        SAVE QUOTE\r\n      </button>\r\n      <button\r\n        mat-flat-button\r\n        color=\"primary\"\r\n        *ngIf=\"quoteHeader.editQuote\"\r\n        (click)=\"generatePdf()\"\r\n      >\r\n        GENERATE PDF\r\n      </button>\r\n      <span fxFlex></span>\r\n      <button\r\n        mat-flat-button\r\n        color=\"accent\"\r\n        *ngIf=\"quoteHeader.editQuote\"\r\n        (click)=\"continueToPayment()\"\r\n      >\r\n        CONTINUE TO PAYMENT\r\n      </button>\r\n    </ng-container>\r\n  </lib-quote-header>\r\n</div>\r\n<table id=\"my-table\"></table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\nimport { ICellRendererParams } from 'ag-grid-community';\r\nimport { ComputationService } from 'projects/core/src/public-api';\r\n\r\n@Component({\r\n  selector: 'lib-total-cell-renderer',\r\n  templateUrl: './total-cell-renderer.component.html',\r\n  styleUrls: ['./total-cell-renderer.component.scss'],\r\n})\r\nexport class TotalCellRendererComponent\r\n  implements OnInit, ICellRendererAngularComp\r\n{\r\n  value: number = 0;\r\n  constructor(private _computationService: ComputationService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    let isExtraRow = params?.data?.isExtraRow;\r\n    if (isExtraRow) {\r\n      let keys = params.data.sgid;\r\n      switch (keys) {\r\n        case 'SUB TOTAL':\r\n          this.value = this._computationService.getSubTotal(params);\r\n          break;\r\n        case 'TOTAL':\r\n          let subTotal = this._computationService.getSubTotal(params);\r\n          let deliveryFee = parseFloat(\r\n            params.api.getValue('is_total', params.api.getPinnedBottomRow(1))\r\n          );\r\n          let taxAmount = parseFloat(\r\n            params.api.getValue('is_total', params.api.getPinnedBottomRow(2))\r\n          );\r\n          this.value = this._computationService.getTotalAmount(\r\n            subTotal,\r\n            deliveryFee,\r\n            taxAmount\r\n          );\r\n          break;\r\n        default:\r\n          this.value = params.value;\r\n          break;\r\n      }\r\n    } else {\r\n      let price = this.getItemPrice(params);\r\n      let discount = parseFloat(params.data.discount ?? 0);\r\n      let quantity = parseFloat(params.data.is_qty ?? 0);\r\n      this.value = this._computationService.getProductTotalAmount(\r\n        price,\r\n        discount,\r\n        quantity\r\n      );\r\n    }\r\n    params.node.setDataValue(params.column?.getId() as string, this.value);\r\n    // params.api.redrawRows();\r\n  }\r\n\r\n  refresh(params: ICellRendererParams): boolean {\r\n    this.agInit(params);\r\n    return true;\r\n  }\r\n\r\n  getItemPrice(params: ICellRendererParams): number {\r\n    let price =\r\n      params.data.button_type === 0\r\n        ? params.data.price ?? 0\r\n        : params.data.buy_price ?? 0;\r\n    return parseFloat(price);\r\n  }\r\n}\r\n","{{value}}","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport {  MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { CoreModule } from 'projects/core/src/public-api';\r\nimport { QuoteCommonModule } from './common/quote-common.module';\r\nimport { QuoteCreateComponent } from './components/quote-create/quote-create.component';\r\nimport { QuoteListComponent } from './components/quote-list/quote-list.component';\r\nimport { QuoteComponent } from './components/quote/quote.component';\r\n\r\nimport { quoteRoute } from './quote-routing';\r\n\r\n@NgModule({\r\n  declarations: [QuoteListComponent, QuoteComponent,QuoteCreateComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FlexLayoutModule,\r\n    QuoteCommonModule,\r\n    MatDialogModule,\r\n    CoreModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    AgGridModule,\r\n    RouterModule.forChild(quoteRoute),\r\n  ],\r\n  exports: [],\r\n})\r\nexport class QuoteModule {}\r\n"],"sourceRoot":"webpack:///"}