{"version":3,"sources":["./projects/moodboard/src/lib/moodboard.module.ts","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.html","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.html","./node_modules/ngx-infinite-scroll/__ivy_ngcc__/modules/ngx-infinite-scroll.js","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.ts","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.html","./projects/moodboard/src/lib/moodboard-routing.ts","./projects/shop/src/projects.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"names":[],"mappings":"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;AACA;AACA,cAAc,uHAAuH;AACrI;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA,yBAAyB,sBAAsB;AAC/C,wCAAwC,iDAAiD;AACzF;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,yCAAyC,cAAc,YAAY;AACnE;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,4BAA4B;AACvC,WAAW,mCAAmC;AAC9C;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA,kCAAkC,4BAA4B;AAC9D,WAAW,mCAAmC;AAC9C;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,mDAAmD;AAC9D,eAAe,EAAE;AACjB;AACA;AACA;AACA,KAAK;AACL,eAAe,EAAE;AACjB;AACA;AACA,KAAK;AACL,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,2CAA2C,+DAAQ;AACnD,gBAAgB;AAChB;AACA,UAAU,+CAAE,wCAAwC,0DAAG;AACvD,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0GAA0G,0DAAG;AAC7G,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,MAAM,QAAQ,sEAAsE,6DAAM;AAC1F,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,MAAM,2BAA2B,gBAAgB,EAAE,mHAAmH,0DAAG;AACzK,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,MAAM,qBAAqB,gBAAgB,EAAE;AAC7C;AACA,KAAK,IAAI,0DAAG;AACZ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,cAAc,sDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAY;AACnC;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,qBAAqB,kCAAkC,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,0EAA0E;AAC3F,mBAAmB,EAAE;AACrB;AACA,mBA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BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;GAEG;AAEwC;AACU;AACsB;AACzC;;;;;;;;;;;;;ACPlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiL;AACtF;AAC9B;AACV;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACwC;AACI;;AAE5C;AACA;AACA;AACA,4BAA4B,cAAc,kBAAkB,eAAe,cAAc,kBAAkB,gBAAgB,2BAA2B,MAAM,OAAO,QAAQ,SAAS,kBAAkB,aAAa,mBAAmB,uBAAuB,YAAY,UAAU,SAAS,0EAA0E,aAAa,mBAAmB,YAAY,WAAW,2BAA2B,gBAAgB,eAAe,kBAAkB,OAAO,QAAQ,8EAA8E,SAAS,UAAU,mBAAmB,kBAAkB,gGAAgG,YAAY,mCAAmC,aAAa,sBAAsB,UAAU,sBAAsB,gBAAgB,qCAAqC,SAAS,UAAU,mBAAmB,kBAAkB,yCAAyC,aAAa,qCAAqC,MAAM,qCAAqC,SAAS,gCAAgC,mBAAmB,0CAA0C,gBAAgB,kBAAkB,sCAAsC,aAAa;AAC9vC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AAC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C,+DAAwB,EAAE,0IAA0I;AACrM,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY,OAAO,iBAAiB,KAAK,eAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,KAAK,iBAAiB,MAAM,OAAO;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,KAAK,KAAK,OAAO,SAAS,KAAK,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB,MAAM,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc,KAAK,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAsC,KAAK,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sCAAsC,KAAK,qBAAqB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+EAA+E,MAAM;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA,qDAAqD,MAAM;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA,4CAA4C,kFAAoB;AAChE;AACA;AACA,sBAAsB,qBAAqB;AAC3C,2BAA2B,mBAAmB,2BAA2B,EAAE;AAC3E;AACA,qBAAqB,wBAAwB;AAC7C;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"moodboard-src-lib-moodboard-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\nimport { moodboardRoutes } from './moodboard-routing';\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\nimport { CoreModule } from 'projects/core/src/public-api';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport {MatSelectModule} from '@angular/material/select';\nimport { CommonModule } from \"@angular/common\";\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { CreateMoodboardPopupComponent } from './components/create-moodboard-popup/create-moodboard-popup.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\n\n@NgModule({\n  declarations: [\n    MoodboardListComponent,\n    MoodboardComponent,\n    CreateMoodboardComponent,\n    CreateMoodboardPopupComponent,\n  ],\n  imports: [\n    CoreModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatButtonModule,\n    CommonModule,\n    MatSelectModule,\n    MatGridListModule,\n    MatStepperModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    FormsModule,\n    MatInputModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    AgGridModule,\n    MatCheckboxModule ,\n    MatDividerModule,\n    InfiniteScrollModule,\n    RouterModule.forChild(moodboardRoutes),\n  ],\n  exports : []\n})\nexport class MoodboardModule { }\n","<app-banner [iconSrc]=\"bannerIconImg\" [iconAltTxt]=\"bannerIconImgTxt\" \n[leftTxt]=\"'MoodBoard'\" [src]=\"bannerImg\" [altTxt]=\"bannerImgTxt\" [bottomTxt]=\"bannerBottomTxt\"></app-banner>\n<div class=\"mb\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n        <a mat-button (click)=\"createMB()\" mat-raised-button><mat-icon inline=\"true\">add_circle_outline</mat-icon>\n        </a>\n        <span class=\"mb-create-text h2\">Create a new Moodboard</span>\n    </div>\n    <span class=\"vertical\"></span>\n    <div fxFlex=\"40\" class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\"  fxLayoutGap=\"2rem\">\n        <mat-form-field fxFlex appearance=\"outline\" class=\"select\">\n            <mat-label>Select a Project</mat-label>\n            <mat-select (selectionChange)=\"projectFilter($event.value)\">\n              <mat-option  *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n    </div>\n</div>\n<mat-tab-group  color=\"accent\" class=\"tabs\" (selectedTabChange)=\"onTabChanged($event);\" mat-align-tabs=\"center\">\n    <mat-tab  *ngFor=\"let item of tabsData; index as i; \" label=\"{{item.title}}\">\n        <div class=\"tabs-container\" fxLayout=\"row wrap\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"center center\">\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\n                <div fxFlex=\"30\" class=\"tile\" (click)=\"mbDetails(item.sgid);\" >\n                    <div fxLayout=\"column\" class=\"card\">\n                        <img  width=\"auto\" height=\"250px\" src=\"{{item.moodboard_images}}\" alt=\"{{item.boardname}}\">\n                        <div class=\"content\">\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\n                            <div class=\"h3\" >Board Name: </div>\n                            <div class=\"\" >{{item.boardname}}</div>  \n                          </div>\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\n                            <div class=\"h3\" >Created By: </div>\n                            <div class=\"\" >{{item.user?.first_name + ' ' + item.user?.last_name}}</div>\n                          </div>\n                        </div>\n                      </div>\n                </div>\n           </ng-container>\n           </div>\n    </mat-tab>\n  </mat-tab-group>\n  \n<!-- <app-tabs [data]=\"tabsData\">\n        <mat-grid-list cols=\"3\" rowHeight=\"1:1\">\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\n                <mat-grid-tile (click)=\"mbDetails(item.sgid);\" >\n                    <app-cart  cart [data]=\"item\"></app-cart>\n                </mat-grid-tile>\n            </ng-container>\n             <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile>\n            <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile> \n          </mat-grid-list>\n</app-tabs> -->\n","import { AfterContentInit, Component, ContentChildren, OnInit, QueryList } from '@angular/core';\nimport { MatTab } from '@angular/material/tabs';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { MoodboardService } from '../../services/moodboard.service';\n\n@Component({\n  selector: 'lib-moodboard-list',\n  templateUrl: './moodboard-list.component.html',\n  styleUrls: ['./moodboard-list.component.scss']\n})\nexport class MoodboardListComponent implements OnInit {\n\n  constructor(private moodboardService:MoodboardService, private router: Router) {}\n  bannerIconImg: any = 'assets/moodboard/images/moodboard.svg';\n  bannerIconImgTxt: any = 'Moodboard';\n  bannerImgTxt: any = 'Moodboard';\n  bannerImg: any = 'assets/moodboard/images/mb-banner.jpg';\n  bannerTxt: any = 'MoodBoard';\n  bannerBottomTxt: any = 'Style & create look from our collection of designer furniture';\n  tabsData: any[] = [{title:'All Moodboards', content: '' },{title:'My Moodboards', content: '' },{title:'Disabled Moodboards', content: '' } ];\n  tabContent: any[]= [];    \n  projectList: any[] = [];\n  projectName: any = '';\n  selectedIndex: any = 0;\n  ngOnInit(): void {\n    this.getMoodBoardList();\n    this.getProjectList();\n  }\n  mbDetails(id: any){\n    this.router.navigateByUrl('/moodboard/'+id);\n  }\n  projectFilter(ev:any){\n    this.projectName = ev;\n    this.onTabChanged({index: this.selectedIndex}); \n  }\n  getProjectList(){\n    this.moodboardService.getProjectList().subscribe((response:any) => {\n      this.projectList = response.moodboardProject;\n    });    \n  }\n  getMoodBoardList(){\n    let param = {supplier_id:0,project_name: this.projectName}\n    this.moodboardService.getMoodBoardList(param).subscribe((response:any) => {\n      this.tabContent = response.result;\n    });    \n  }\n\n  onTabChanged(ev: any){\n    console.log(ev);\n    if(ev.index == 1) {\n      this.getMyMoodBoardList()\n    }\n    if(ev.index == 2) {\n      this.getDisabledMBList();\n    }\n    if(ev.index == 0) {\n      this.getMoodBoardList();\n    }\n  }  \n  createMB(){\n    this.router.navigate(['moodboard/create']);\n\n  }\n  getMyMoodBoardList(){\n    let param = {supplier_id:0,project_name: this.projectName}\n    this.moodboardService.getMyMoodBoardList(param).subscribe((response:any) => {\n      this.tabContent = response.result;\n    });    \n  }\n  getDisabledMBList(){\n    let param = {supplier_id:0,project_name: this.projectName}\n    this.moodboardService.getDisabledMBList(param).subscribe((response:any) => {\n      this.tabContent = response.result;\n    });    \n  }\n}","import { MatDialog } from '@angular/material/dialog';\nimport { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { QuoteCreateFormComponent } from 'projects/quote/src/lib/common/components/quote-create-form/quote-create-form.component';\nimport { MoodboardService } from '../../services/moodboard.service';\nimport autoTable from 'jspdf-autotable';\n\nimport {\n  GridOptions,\n  GridReadyEvent,\n  ICellRendererParams,\n} from 'ag-grid-community';\nimport {\n  ComputationService,\n  CoreService,\n  CounterComponent,\n  ImageRendererComponent,\n  PdfService,\n  ToasterService,\n  UserService,\n} from 'projects/core/src/public-api';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  ItemTypeComponent,\n  TotalCellRendererComponent,\n} from 'projects/quote/src/public-api';\nimport { calcPossibleSecurityContexts } from '@angular/compiler/src/template_parser/binding_parser';\nimport jsPDF from 'jspdf';\nimport { ProductDetailsComponent } from 'projects/shop/src/projects';\nimport { MatStepper } from '@angular/material/stepper';\nimport { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { MatTab, MatTabGroup } from '@angular/material/tabs';\n\n@Component({\n  selector: 'lib-moodboard',\n  templateUrl: './moodboard.component.html',\n  styleUrls: ['./moodboard.component.scss'],\n})\nexport class MoodboardComponent implements OnInit , AfterViewInit {\n  public mbId: any = '';\n  public userid: any = null;\n  selectedIndex = 0;\n  startCount = 0;\n  lastUserCount = 0;\n  placeholder = 'Search Products';\n  \n  @ViewChild('quickFilter', { static: true }) template: ElementRef | null = null;\n  @ViewChild('stepper') private myStepper: MatStepper | null = null;\n  @ViewChild(\"tabsReference\" , { static: true }) tabsReference: MatTabGroup | null = null;\n\n  constructor(\n    private moodboardService: MoodboardService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private _pdf: PdfService,\n    private _router: Router,\n    private _dialog: MatDialog,\n    private _toaster: ToasterService,\n    private _user: UserService,\n    private _computationService: ComputationService,\n    private _coreService: CoreService\n  ) {\n    this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\n    this.userid = this._user.getUser().getId();\n  }\n  ngAfterViewInit(): void {\n    this.setProductTab(0);\n  }\n  agGrid: GridReadyEvent = {} as GridReadyEvent;\n  bannerIconImg: any = 'assets/moodboard/images/moodboard.svg';\n  bannerIconImgTxt: any = 'Moodboard';\n  moodboardDetails: any = '';\n  mbQuotesList: any = [];\n  stateList: any = [];\n  categoriesList: Subject<any[]> = new Subject();\n  catListDefault: any[] = [];\n  selectedCategory: any = null;\n  cityList: Subject<any[]> = new Subject();\n  cityListDefault: any[] = [];\n  selectedCity: any = [];\n  min_price: any = '';\n  max_price: any = '';\n  min_price_inventory: any = '';\n  searchTxt: any = null;\n  items: any = [];\n  catagorydata = [\n    {\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\n      value: 'Living Room',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\n      value: 'Bedroom',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\n      value: 'Dining Room',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\n      value: 'Office',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\n      value: 'Outdoor',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\n      value: 'Others',\n    },\n  ];\n  frameworkComponents = {\n    ImageRendererComponent: ImageRendererComponent,\n    TotalCellRendererComponent: TotalCellRendererComponent,\n    ItemTypeCellRenderer: ItemTypeComponent,\n    CounterCellRenderer: CounterComponent,\n  };\n  pinnedBottomRowData = [\n    {\n      subTotal: 'abc',\n      sgid: 'SUB TOTAL',\n      is_total: '0',\n      isExtraRow: true,\n    },\n    {\n      subTotal: 'abc',\n      sgid: 'DELIVERY FEE',\n      is_total: '0',\n      isExtraRow: true,\n    },\n    {\n      subTotal: 'abc',\n      sgid: 'TAXES',\n      is_total: '0',\n      isExtraRow: true,\n    },\n    {\n      subTotal: 'abc',\n      sgid: 'TOTAL',\n      is_total: '0',\n      isExtraRow: true,\n    },\n  ];\n\n  columnDefs = [\n    {\n      field: 'sgid',\n      width: 120,\n      headerName: 'S. NO',\n      headerTooltip: 'S.NO',\n      colSpan: (params: any) => (params.data.subTotal === 'abc' ? 10 : 1),\n      cellStyle: (params: any) => {\n        if (params.data.subTotal === 'abc') {\n          return { 'text-align': 'end' };\n        }\n        return '';\n      },\n    },\n    { field: 'warehouse_name', headerName: 'CITY' },\n    { field: 'sku', headerName: 'SKU' },\n    {\n      headerName: 'IMAGE',\n      cellRenderer: 'ImageRendererComponent',\n      field: 'variation.images[0].image_url.small',\n      cellStyle: {\n        padding: '0.3rem',\n      },\n      valueGetter: (params: ICellRendererParams) => {\n        return params.data?.variation?.images[0]?.image_url?.small;\n      },\n    },\n    {\n      headerName: 'PRODUCT NAME',\n      field: 'name',\n      width: '250px',\n    },\n    {\n      headerName: 'TYPE',\n      field: 'button_type',\n      cellRenderer: 'ItemTypeCellRenderer',\n      valueGetter: (params: ICellRendererParams) => {\n        return params.data.button_type === 0 ? 'Rent' : 'Buy';\n      },\n    },\n    {\n      headerName: 'QUANTITY',\n      field: 'is_qty',\n      cellRenderer: 'CounterCellRenderer',\n    },\n    {\n      headerName: 'BUY PRICE ($)',\n      field: 'buy_price',\n      valueGetter: (params: ICellRendererParams) => {\n        return params.data.button_type === 1 ? params.data.buy_price : 'NA';\n      },\n    },\n    {\n      headerName: 'RENTAL PRICE/MONTH',\n      field: 'price',\n      cellRenderer: (params: ICellRendererParams) => {\n        return params.data.button_type === 0 ? params.value : 'NA';\n      },\n    },\n    // { headerName: 'DISCOUNT ($)', field: 'discount' },\n\n    {\n      headerName: 'MONTHS',\n      field: 'months',\n    },\n    {\n      headerName: 'TOTAL ($)',\n      field: 'is_total',\n      cellRenderer: 'TotalCellRendererComponent',\n    },\n  ];\n  rowData: Observable<any[]> = new Observable();\n  gridOptions: GridOptions = {\n    onGridReady: (api: GridReadyEvent) => {\n      this.agGrid = api;\n      this.onGridReady(api);\n    },\n    rowHeight: 100,\n    headerHeight: 100,\n    getRowHeight: (params: any) => {\n      return params?.data?.isExtraRow ? 50 : 100;\n    },\n  };\n  defaultColDef = {\n    wrapText: true,\n    cellClass: 'grid-cell',\n    cellStyle: {\n      'line-height': 'normal',\n      'align-items': 'center',\n      'justify-content': 'center',\n      display: 'flex',\n      padding: '0 0.5rem',\n    },\n  };\n  onGridReady(evt: GridReadyEvent) {\n    this.agGrid = evt;\n    evt.api.sizeColumnsToFit();\n    this.rowData = this.getMoodboardSummary();\n  }\n  getMoodboardSummary<T>(): Observable<T> {\n    return this.moodboardService.getMBSummary<T>(this.mbId).pipe(\n      tap((x: any) => {\n        this.agGrid.api.redrawRows();\n      })\n    );\n  }\n  openModal(templateRef: any) {\n    let dialogRef = this._dialog.open(templateRef, {\n      width: '90%',\n      maxHeight: '85vh',\n      disableClose: true,\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log('The dialog was closed');\n      // this.animal = result;\n    });\n  }\n  closeModal() {\n    this._dialog.closeAll();\n  }\n  updateBottomData(data: any) {\n    this.pinnedBottomRowData[1].is_total = data?.delivery_fee;\n    this.pinnedBottomRowData[2].sgid =\n      'TAXES (' + data?.states?.sale_tax_rate + '%)';\n    this.pinnedBottomRowData[2].is_total = data?.tax_amount;\n    this.pinnedBottomRowData[3].is_total = data?.tax_amount;\n  }\n\n  ngOnInit(): void {\n    this.getMoodboard();\n    this.getCity();\n    this.getCategory();\n    this.getItems();\n    this.getMBQuote(this.mbId);\n  }\n  scroll(el: HTMLElement) {\n    el.scrollIntoView();\n  }\n  requestRendering() {\n    this.moodboardService\n      .requestRendering({ moodboard_id: this.mbId })\n      .subscribe(\n        (response: any) => {\n          this._toaster.success('Request ' + response.result);\n        },\n        (error) => {\n          this._toaster.error('Request failed. please try later');\n        }\n      );\n  }\n  resetFilter() {\n    this.cityListDefault.map((el) => (el.isChecked = false));\n    this.cityListDefault.sort((a, b) =>\n      a.warehouse_name > b.warehouse_name ? 1 : -1\n    );\n    this.catListDefault.map((el) => (el.isChecked = false));\n    this.catListDefault.sort((a, b) => (a.name > b.name ? 1 : -1));\n    this.categoriesList.next(this.catListDefault);\n    this.cityList.next(this.cityListDefault);\n    this.selectedCategory = [];\n    this.selectedCity = [];\n    this.max_price = '';\n    this.min_price = '';\n    this.min_price_inventory = '';\n    this.resetList();\n    this.getItems();\n  }\n  getMBQuote(mbId: any) {\n    this.moodboardService.getMBQuote(mbId).subscribe((response: any) => {\n      this.mbQuotesList = response.quote;\n    });\n  }\n  getMoodboard() {\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response: any) => {\n      this.moodboardDetails = response;\n      this.updateBottomData(response.moodboard);\n    });\n  }\n  getCategory() {\n    this.moodboardService\n      .getCategoryList()\n      .pipe(\n        map((item: any) => {\n          item.result.map((i: any, index: any) => {\n            i['isChecked'] = false;\n            i['order'] = index;\n            return i;\n          });\n          return item;\n        })\n      )\n      .subscribe((response: any) => {\n        this.categoriesList.next(response.result);\n        this.catListDefault = response.result;\n      });\n  }\n  getCity() {\n    this.moodboardService\n      .getCityList()\n      .pipe(\n        map((item: any) => {\n          item.data.map((i: any, index: any) => {\n            i['isChecked'] = false;\n            i['order'] = index;\n            return i;\n          });\n          return item;\n        })\n      )\n      .subscribe((response: any) => {\n        this.cityList.next(response.data);\n        this.cityListDefault = response.data;\n      });\n  }\n  getItems(\n    start: number = 0,\n    count: number = 15,\n    category: any = null,\n    supplier: any = null,\n    warehouse: any = null,\n    max_price: any = 0,\n    min_price: any = 0,\n    min_price_inventory: any = 0,\n    searchTxt: any = null\n  ) {\n    let param = {\n      start: this.lastUserCount,\n      count: count,\n      category: category,\n      supplier: supplier,\n      warehouse: warehouse,\n      min_price: min_price,\n      max_price: max_price,\n      min_price_inventory: min_price_inventory,\n      keywords: searchTxt,\n    };\n    this.moodboardService.getItems(param).subscribe((response: any) => {\n      // this.items = response.result;\n      this.updateList(response.result);\n      this.items = this.getLastViewedUserList();\n    });\n  }\n  editMB() {\n    this.router.navigateByUrl('/moodboard/edit/' + this.mbId);\n  }\n  copyMB() {\n    this.router.navigateByUrl('/moodboard/create/' + this.mbId);\n  }\n  onCityChecked(city: any, i: any) {\n    if (city.isChecked) city.isChecked = false;\n    else city.isChecked = true;\n    this.cityListDefault[i] = city;\n    this.cityListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\n    this.cityList.next(this.cityListDefault);\n    this.selectedCity = this.cityListDefault\n      .filter((item) => item.isChecked)\n      .map((i) => i.sgid);\n    this.resetList();\n    this.getItems(\n      0,\n      15,\n      (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n      null,\n      (this.selectedCity && this.selectedCity.length )? this.selectedCity.toString() : null,\n      this.max_price,\n      this.min_price,\n      this.min_price_inventory,\n      this.searchTxt\n    );\n  }\n\n  onCategoriesChecked(cat: any, i: any) {\n    if (cat.isChecked) cat.isChecked = false;\n    else cat.isChecked = true;\n    this.catListDefault[i] = cat;\n    this.catListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\n    this.categoriesList.next(this.catListDefault);\n    this.selectedCategory = this.catListDefault\n      .filter((item) => item.isChecked)\n      .map((i) => i.sgid);\n      this.resetList();\n    this.getItems(\n      0,\n      15,\n      (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n      null,\n      (this.selectedCity && this.selectedCity.length )? this.selectedCity.toString() : null,\n      this.max_price,\n      this.min_price,\n      this.min_price_inventory,\n      this.searchTxt\n    );\n  }\n  onMinPriceRangeChange(ev: any) {\n    this.min_price = ev;\n    this.resetList();\n    this.getItems(\n      0,\n      15,\n      (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n      null,\n      (this.selectedCity && this.selectedCity.length )? this.selectedCity.toString() : null,\n      this.max_price,\n      this.min_price,\n      this.min_price_inventory,\n      this.searchTxt\n    );\n  }\n  onMaxPriceRangeChange(ev: any) {\n    this.max_price = ev;\n    this.resetList();\n    this.getItems(\n      0,\n      15,\n      (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n      null,\n      (this.selectedCity && this.selectedCity.length )? this.selectedCity.toString() : null,\n      this.max_price,\n      this.min_price,\n      this.min_price_inventory,\n      this.searchTxt\n    );\n  }\n  onQtyChange(ev: any) {\n    this.min_price_inventory = ev;\n    this.resetList();\n    this.getItems(\n      0,\n      15,\n      (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n      null,\n      (this.selectedCity && this.selectedCity.length )? this.selectedCity.toString() : null,\n      this.max_price,\n      this.min_price,\n      this.min_price_inventory,\n      this.searchTxt\n    );\n  }\n  search(ev: any) {\n    this.searchTxt = ev == '' ? null : ev;\n    this.resetList();\n    this.getItems(\n      0,\n      15,\n      (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n      null,\n      (this.selectedCity && this.selectedCity.length )? this.selectedCity.toString() : null,\n      this.max_price,\n      this.min_price,\n      this.min_price_inventory,\n      this.searchTxt\n    );\n  }\n  \n  createNewQuote() {\n    this._dialog\n      .open(QuoteCreateFormComponent, {\n        height: '500px',\n        width: '800px',\n        data: {\n          isDialog: true,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {\n        console.log(data);\n      });\n  }\n  deleteItem(mbItem: any){\n    let obj = {\n      button_type: mbItem.button_type,\n      moodboard_id: mbItem.moodboard_id,\n      product_id: mbItem.product_id,\n      sku: mbItem.sku,\n      warehouse_id: mbItem.warehouse_id,\n      user_id: this._user.getUser().getId()\n    };\n  this.moodboardService.deleteItemToMoodboard(obj).subscribe(\n    (data: any) => {\n      if (data.statusCode == 200) {\n        this._toaster.success(data?.result)\n        this.getMoodboard();\n        this.onGridReady(this.agGrid)\n      }\n      else \n        this._toaster.error(data.result);\n      },\n      (error) => this._toaster.error('Fail to add')\n  );\n  }\n\n  generateMDPdf() {\n    let data = this._pdf.getAgGridRowsAndColumns(this.agGrid);\n    let imagesObs = this._pdf.getAllTableBase64Images(data?.rows as [], 3);\n    imagesObs.subscribe((images) => {\n      let doc = new jsPDF();\n      doc.text('Moodboard Information', 5, 15);\n      let info = [\n        ['Project Name:', this.moodboardDetails?.moodboard?.project_name],\n        ['Company Name:', this.moodboardDetails?.moodboard?.company_name],\n        ['Moodboard :', this.moodboardDetails?.moodboard?.sgid],\n        ['State:', this.moodboardDetails?.moodboard?.state.name],\n        ['Moodboard Name:', this.moodboardDetails?.moodboard?.boardname],\n        ['City:', this.moodboardDetails?.moodboard?.city],\n        ['Zipcode:', this.moodboardDetails?.moodboard?.zipcode],\n      ];\n      autoTable(doc, {\n        ...this._pdf.getInformationTableUserOptions(),\n        body: info,\n      });\n\n      doc.addPage();\n      doc.text('Moodboard Summary', 5, 15);\n      autoTable(doc, {\n        ...this._pdf.getSummaryTableUserOptions(),\n        columnStyles: {\n          0: { cellWidth: 9 },\n          1: { cellWidth: 20 },\n          2: { cellWidth: 10 },\n          3: { cellWidth: 20 },\n          4: { cellWidth: 30 },\n          5: { cellWidth: 15 },\n          6: { cellWidth: 10 },\n          7: { cellWidth: 20 },\n          8: { cellWidth: 20 },\n          11: { cellWidth: 20 },\n        },\n        columns: data.columns,\n        body: data?.rows?.map((r: any) => {\n          if (!parseInt(r[0])) {\n            let temp = [];\n            temp.push({ content: r[0], colSpan: r.length - 1 });\n            temp.push(r[r.length - 1]);\n            r = temp;\n          }\n          return r;\n        }),\n        willDrawCell: (data) => {\n          if (data.section === 'body' && data.column.index === 3) {\n            data.cell.raw = '';\n            data.cell.text = [];\n          }\n        },\n        didDrawCell: (data) => {\n          if (data.section === 'body' && data.column.index === 3) {\n            var base64Img = 'data:image/jpeg;base64,' + images[data.row.index];\n            doc.addImage(\n              base64Img,\n              'JPEG',\n              data.cell.x + 1,\n              data.cell.y + 1,\n              18,\n              18\n            );\n          }\n        },\n      });\n      doc.save('moodboard.pdf');\n    });\n  }\n  productDetails(item: any, moodboardDetails: any){\n    this._dialog.open(ProductDetailsComponent,\n      {\n        height:\"90%\", \n        width:\"90%\",\n        disableClose: true,\n        data:{\n          forDialog: true,\n          forHitler: true,\n          forMoodboard: this._user.getUser().getId() === moodboardDetails?.moodboard?.userid,\n          forQuote: false,\n          item: item,\n          mb: moodboardDetails?.moodboard,\n          moodboardId:moodboardDetails?.moodboard?.id\n        }\n      }).afterClosed().subscribe(data => {\n        if (data.event) {\n          this.getMoodboard();\n          this.onGridReady(this.agGrid);\n          this.setProductTab(0)\n        }\n      })  }\n\n\n    increaseQuantity(value:any,md:any){\n      if(value >=1 && value <= md.total_warehouse_quantity ){\n        md.qty= md.is_qty = value;\n        let price = md.button_type == 1? md.buy_price: md.price;\n        md.is_total = this._computationService.getProductTotalAmount(price,0,md.qty)\n        this._coreService.updateMDItem(md).subscribe(data=>{\n          this.refresh()\n        })\n      }\n    }\n\n    refresh(){\n      this.getMoodboard();\n      this.onGridReady(this.agGrid);\n    }\n\n    //Functionalities taken from shop module\n    public selectionChange($event?: StepperSelectionEvent): void {\n      // console.log('stepper.selectedIndex: ' + this.selectedIndex \n      //     + '; $event.selectedIndex: ' + $event.selectedIndex);\n  \n      // if ($event?.selectedIndex == 0) return; // First step is still selected\n  \n      // this.selectedIndex = $event.selectedIndex;\n    }\n\n    public goto(index: number): void {\n      if (index == 0) return; // First step is not selected anymore -ok\n      this.selectedIndex = index;\n    }\n\n    filterProductPopup(){\n      this.selectedCategory = this.catListDefault.filter((item) => item.isChecked).map((i)=> i.sgid);\n      this.selectedCity = this.cityListDefault.filter((item) => item.isChecked).map((i)=> i.sgid);\n      let catIds = (this.selectedCategory && this.selectedCategory.length) ? this.catListDefault.filter((item) => item.isChecked).map((i)=> i.sgid).toString() : null;\n      let cityIds = (this.selectedCity && this.selectedCity.length) ?  this.cityListDefault.filter((item) => item.isChecked).map((i)=> i.sgid).toString() : null;\n  \n      // this.show = true;\n      this.closeModal();\n      // let param: any = {\n      //   start: this.lLimit,\n      //   count: this.hLimit,\n      //   category: catIds,\n      //   warehouse: cityIds,\n      // };\n      // if(this.min_price_popup){ param['min_price'] = this.min_price_popup};\n      // if(this.max_price_popup){ param['max_price'] = this.max_price_popup};\n      // if(this.min_price_inventory_popup){ param['min_price_inventory'] = this.min_price_inventory_popup};\n      // console.log(this.min_price , this.max_price);\n      // if(this.min_price != '') param['min_price'] = this.min_price;\n      // if(this.max_price != '') param['max_price'] = this.max_price;\n      // if(this.min_price_inventory != '') param['min_price_inventory'] = this.min_price_inventory;\n      this.getItems(\n        0,\n        15,\n        (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n        null,\n        (this.selectedCity && this.selectedCity.length) ? this.selectedCity.toString() : null,\n        this.max_price,\n        this.min_price,\n        this.min_price_inventory,\n        this.searchTxt\n      );\n    }\n\n  setProductTab(index: number) {\n    const tabGroup = this.tabsReference;\n    if (!tabGroup || !(tabGroup instanceof MatTabGroup)) return;\n\n    const tabCount = tabGroup._tabs.length;\n    tabGroup.selectedIndex = index;\n  }\n\n  onScroll() {\n    let param = {\n      start: this.lastUserCount,\n      count: 15,\n      category: (this.selectedCategory && this.selectedCategory.length) ? this.selectedCategory.toString() : null,\n      supplier: null,\n      warehouse: (this.selectedCity && this.selectedCity.length) ? this.selectedCity.toString() : null,\n      min_price: this.max_price,\n      max_price: this.min_price,\n      min_price_inventory: this.min_price_inventory,\n      searchTxt: this.searchTxt,\n    };\n    if (this.startCount !== this.lastUserCount) {\n      this.moodboardService.getItems(param).subscribe((response: any) => {\n        if (response && response.result && response.result.length) {\n          this.updateList(response.result);\n         \n        }\n      });\n      this.items = this.getLastViewedUserList();\n      this.startCount = this.lastUserCount;\n     \n    }\n  }\n\n  getLastViewedUserList() {\n    return this.items;\n  }\n\n  updateList(obj: any) {\n    let isResult = false;\n    if (obj && obj.length) {\n      this.items.push(...obj);\n      isResult = true;\n    }\n    if (isResult === true) {\n      this.lastUserCount += 15;\n    }\n  }\n\n  resetList() {\n    this.items = [];\n    this.startCount = 0;\n    this.lastUserCount = 0;\n  }\n}\n","<div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n    <div class=\"mb-details\" fxLayout=\"row\" fxLayoutAlign=\" stretch\">\n      <div\n        class=\"mb-details__icon\"\n        fxFlex=\"30\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center center\"\n      >\n        <span>{{bannerIconImgTxt}}</span>\n        <img [src]=\"bannerIconImg\" alt=\"{{bannerIconImgTxt}}\" srcset=\"\" />\n      </div>\n      <div\n        class=\"mb-details__info\"\n        fxFlex=\"80\"\n        fxLayout=\"row wrap\"\n        fxLayoutAlign=\"start\"\n      >\n      \n      <div fxFlex=\"50\" *ngIf=\"moodboardDetails?.moodboard\">\n        <span class=\"label\">Project Name: </span>\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.project_name }}</span>\n      </div>\n    <div fxFlex=\"50\">\n        <span class=\"label\">Company Name: </span>\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.company_name}}</span>\n    </div>\n        <div fxFlex=\"50\">\n            <span class=\"label\">Moodboard#: </span>\n            <span class=\"value\">{{ moodboardDetails?.moodboard?.sgid }}</span>\n          </div>\n        <div fxFlex=\"50\">\n          <span class=\"label\">Customer City: </span>\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.city }}</span>\n        </div>\n        <div fxFlex=\"50\">\n          <span class=\"label\">Moodboard Name: </span>\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.boardname }}</span>\n        </div>\n        <div fxFlex=\"50\">\n          <span class=\"label\">Zipcode: </span>\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.zipcode }}</span>\n        </div>\n\n        <div\n        fxFlex=\"60\"\n        fxLayoutGap=\"1rem\"\n      >\n        <button\n          mat-mini-fab\n          color=\"accent\"\n          aria-label=\"Example icon button with a filter list icon\"\n          (click)=\"copyMB();\"\n        >\n          <mat-icon>file_copy</mat-icon>\n        </button>\n        <button\n          mat-mini-fab\n          color=\"accent\"\n          aria-label=\"Example icon button with a filter list icon\"\n          (click)=\"editMB();\"\n          > \n          <mat-icon>edit icon</mat-icon>\n        </button>\n      </div>\n    </div>\n    <div\n    class=\"mb-details__info\"\n    fxFlex=\"20\"\n    fxLayout=\"row wrap\"\n    fxLayoutAlign=\"start\"\n  >\n  <div fxFlex=\"80\">\n    <ng-container *ngFor=\"let item of catagorydata; let i = index\">\n    <mat-card *ngIf= \"item.value == moodboardDetails?.moodboard?.moodboard_type_name\" class=\"example-card\">\n        <img mat-card-image   src=\"{{item.imageSrc}}\" alt=\"{{item.value}}\">\n        <mat-card-content>\n          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\n            <div fxLayout=\"row\" class=\"text-lable\" >{{item.value}}</div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      </ng-container>\n</div>\n</div>      \n</div>\n</div>\n<div>\n  <mat-tab-group color=\"accent\" class=\"tabs\" mat-align-tabs=\"center\" #tabsReference>\n    <mat-tab label=\"MY MOODBOARD\">\n      <div class=\"mb-details margin-top30 moodeboard-section\" fxLayout=\"column\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"stretch\">\n        <div class=\"head\" fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\n            <button mat-button color=\"accent\" class=\"btn-chip-label\"\n              aria-label=\"\">{{ moodboardDetails?.moodboard?.project_name }}</button>\n            <button mat-button color=\"accent\" aria-label=\"\" class=\"btn-chip-label\">No of\n              products : {{moodboardDetails?.moodboard_items ? moodboardDetails?.moodboard_items.length : '0'}}</button>\n          </div>\n          <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\n            <button mat-raised-button color=\"accent\" class=\"btn-chip-md\" style=\"background-color: #2C2C2C; color:#fff;\"\n              aria-label=\"\" (click)=\"requestRendering();\">Request Rendering</button>\n            <button mat-raised-button color=\"accent\" aria-label=\"\" (click)=\"generateMDPdf()\" class=\"btn-chip-md\">Generate\n              Moodboard quote PDF</button>\n          </div>\n        </div>\n        <div class=\"product-wrapper\" fxLayout=\"row wrap\"  fxLayoutGap=\"1rem\" fxLayoutGap=\"10px grid\" fxLayoutAlign=\"start center\">\n          <!-- <mat-grid-list cols=\"5\" rowHeight=\"1:1\">\n            <mat-grid-tile class=\"tile\">\n              <div fxFlex=\"80\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\" (click)=\"setProductTab(demo2BtnClick,1)\" class=\"cardImg add-product-image\">\n                <div class=\"add-block\">\n                  <img class=\"add-icon  \" src=\"assets/moodboard/images/addProduct.svg\" />\n                  <div>ADD PRODUCT</div>\n                </div>\n              </div>\n            </mat-grid-tile> -->\n            <div class=\"\" >\n              <div class=\"cardImg add\" (click)=\"setProductTab(1)\" style=\"min-height: 300px;\">\n                <div class=\"add-block\">\n                  <img class=\"add-icon  \" src=\"assets/moodboard/images/addProduct.svg\" />\n                  <div>ADD PRODUCT</div>\n                </div>\n              </div>\n            </div>\n            <ng-container *ngFor=\"let mbItem of moodboardDetails?.moodboard_items; let i = index\">\n              <div class=\"\" >\n                <div class=\"cardImg\">\n                  <div class=\"badge\" style=\"text-align: center;width: 40%;\">{{ mbItem.button_type == 0 ? 'Rent' :'Buy'}}\n                  </div>\n                  <img  src=\"{{mbItem?.variation.images[0].image_url.large}}\"\n                    alt=\"{{mbItem.name}}\" />\n                  <div class=\"title\" height=\"100px\" fxLayout=\"row\" fxLayoutAlign=\"center center\">{{mbItem.name}}</div>\n                  <div class=\"action\" fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\n                    <app-counter fxFlex=\"50\" [min]=\"1\" [readOnly]=\"true\" [max]=\"mbItem?.total_warehouse_quantity\"\n                      [counter]=\"mbItem?.qty\" (counterChange)=\" increaseQuantity($event,mbItem)\"></app-counter>\n                    <!-- <input type=\"number\" #qty  [value]=\"mbItem?.qty\" (click)=\"\"  step=\"1\"/> -->\n                    <mat-icon style=\"cursor: pointer; color: #A8A8A8;\" *ngIf=\"userid==mbItem?.userid\"\n                      (click)=\"deleteItem(mbItem)\">delete</mat-icon>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n          <!-- </mat-grid-list> -->\n        </div>\n          <div class=\"head margin-top30\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"space-between center\">\n              <!-- <mat-form-field appearance=\"fill\">\n                <mat-select>\n                  <mat-option *ngFor=\"let qoute of mbQuotesList\" [value]=\"qoute.sgid\">{{qoute.sgid}}-{{qoute.name}}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field> -->\n              <select>\n                <option *ngFor=\"let qoute of mbQuotesList\" [value]=\"qoute.sgid\">{{qoute.sgid}}-{{qoute.name}}</option>\n              </select>\n              <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\n                <button mat-button color=\"accent\" class=\"btn-yellow-quote\" aria-label=\"\">ADD TO QUOTE</button>\n                <button mat-button color=\"accent\" class=\"btn-yellow-quote\"  aria-label=\"\"\n                  (click)=\"createNewQuote()\">CREATE NEW QUOTE</button>\n                \n              </div>\n            </div>\n            <div class=\"head\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n              <!-- <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\n                <button mat-raised-button color=\"accent\" style=\"background-color: #2C2C2C; color:#fff;\" aria-label=\"\"\n                  (click)=\"createNewQuote()\">CREATE NEW QUOTE</button>\n                <button mat-raised-button color=\"accent\" aria-label=\"\">ADD TO QUOTE OR ORDER</button>\n              </div> -->\n              <!-- <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\n                <button mat-raised-button color=\"accent\" aria-label=\"\" (click)=\"requestRendering();\"\n                  style=\"background-color: #80BAFE;\">REQUEST RENDERING</button>\n                <button mat-raised-button color=\"accent\" aria-label=\"\" (click)=\"generateMDPdf()\"\n                  style=\"background-color: #80BAFE;\">GENERATE MOODBOARD QUOTE PDF</button>\n              </div> -->\n            </div>\n          </div>\n      </div>\n    </mat-tab>\n    <mat-tab label=\"ADD PRODUCTS\">\n      <div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n        <div class=\"mb-details\" fxLayout=\"row\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"stretch\">\n          <div class=\"left\" fxFlex=\"22\" fxLayoutGap=\"2rem\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">      \n            <div class=\"filter\" fxLayoutGap=\"1rem\" fxLayout=\"row wrap\">\n              <!-- <button mat-raised-button (click)=\"openModal(quickFilter)\" color=\"accent\" aria-label=\"\">View All Filters</button> -->\n              <button mat-raised-button (click)=\"resetFilter()\" style=\"margin-top:1rem !important\" color=\"accent\" aria-label=\"\">Clear Filters</button>\n            \n            </div>\n            <mat-card>\n              <div class=\"filter\">\n                <div class=\"filter-inner\">\n                  <!-- <button mat-mini-fab color=\"accent\"> \n                    <mat-icon>edit icon</mat-icon>\n                  </button> -->\n                  <img src=\"assets/moodboard/images/location.png\" class=\"filter-img\" alt=\"Cities\">\n                  <div class=\"filter-label\">\n                    <label>CITIES</label>\n                  </div>\n                </div>  \n                <div class=\"check-wrapper\" fxLayout=\"column\">\n                  <ng-container *ngFor=\"let city of (cityList | async)  | slice:0:3; let i as index\">\n                    <mat-checkbox \n                      (change)=\"onCityChecked(city, i)\"\n                      [checked]=\"city.isChecked\"\n                      >\n                      {{city.warehouse_name}}\n                    </mat-checkbox>\n                  </ng-container> \n                  <div class=\"view-more\" (click)=\"openModal(viewMoreCity)\">View More</div>\n                </div> \n              </div>\n              <div class=\"filter\">\n                <div class=\"filter-inner\">\n                  <!-- <button mat-mini-fab color=\"accent\"> \n                    <mat-icon>edit icon</mat-icon>\n                  </button> -->\n                  <img src=\"assets/moodboard/images/category.png\" class=\"filter-img\" alt=\"Cities\">\n                  <div class=\"filter-label\">\n                    <label>CATEGORIES</label>\n                  </div>\n                </div>  \n                <!-- <mat-form-field appearance=\"fill\">\n                  <mat-label>Filter by Categories</mat-label>\n                  <mat-select>\n                    <mat-option *ngFor=\"let cat of categoriesList\" (click)=\"onCategoriesChange(cat.sgid)\" [value]=\"cat.sgid\">{{cat.name}}</mat-option>\n                  </mat-select>\n                </mat-form-field>              -->\n                <div class=\"check-wrapper\" fxLayout=\"column\">\n                  <ng-container *ngFor=\"let cat of (categoriesList | async)  | slice:0:3; let i as index\">\n                    <mat-checkbox \n                      (change)=\"onCategoriesChecked(cat, i)\"\n                      [checked]=\"cat.isChecked\"\n                      >\n                      {{cat.name}}\n                    </mat-checkbox>\n                  </ng-container> \n                  <div class=\"view-more\" (click)=\"openModal(viewMoreCat)\">View More</div>\n                </div> \n              </div>\n              <div class=\"filter\">\n                <div class=\"filter-inner\">\n                  <!-- <button mat-mini-fab color=\"accent\"> \n                    <mat-icon>edit icon</mat-icon>\n                  </button> -->\n                  <img src=\"assets/moodboard/images/price.png\" class=\"filter-img\" alt=\"Cities\">\n                  <div class=\"filter-label\">\n                    <label>PRICE RANGE</label>\n                  </div>\n                </div>  \n                <div class=\"price-input\" fxLayoutGap=\"1rem\" fxLayout=\"row wrap\">\n                  <mat-form-field  fxFlex=\"40\" appearance=\"fill\">\n                  <mat-label>Min $</mat-label>\n                  <input type=\"number\" #min (input)=\"onMinPriceRangeChange(min.value)\" value=\"{{min_price}}\" matInput min=\"0\" />\n                </mat-form-field>\n                <mat-form-field fxFlex=\"40\" appearance=\"fill\">    \n                  <mat-label>Max $</mat-label>\n                  <input type=\"number\" #max (input)=\"onMaxPriceRangeChange(max.value)\" value=\"{{max_price}}\" matInput min=\"1\"/>\n                </mat-form-field>\n              </div>         \n              </div>\n              <div class=\"filter\">\n                <div class=\"filter-inner\">\n                  <!-- <button mat-mini-fab color=\"accent\"> \n                    <mat-icon>edit icon</mat-icon>\n                  </button> -->\n                  <img src=\"assets/moodboard/images/qty.png\" class=\"filter-img\" alt=\"Cities\">\n                  <div class=\"filter-label\">\n                    <label>AVAILABLE QUANTITY</label>\n                  </div>\n                </div>  \n                <mat-form-field appearance=\"fill\">\n                  <mat-label>Minimum</mat-label>\n                  <input type=\"number\" #minQty (input)=\"onQtyChange(minQty.value)\" step=\"1\" matInput min=\"1\" value=\"{{min_price_inventory}}\"/>\n                </mat-form-field>             \n              </div>\n            </mat-card>\n          </div>\n          <div class=\"right\" fxFlex=\"80\" fxLayoutGap=\"1rem\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">      \n              <div class=\"right-head-search\" fxLayout=\"column\" >\n                <app-search-bar (search)=\"search($event)\" [placeholder]=\"placeholder\"></app-search-bar>\n                <!-- <mat-form-field appearance=\"fill\">\n                  <mat-label><mat-icon>search</mat-icon>Search Products</mat-label>\n                  <input matInput (keyup)=\"search(searchInpt.value)\" value=\"\" #searchInpt type=\"search\" >\n                </mat-form-field> -->\n                <section class=\"search_placeholder\">\n                <p><b>Add furniture to your moodboard</b></p>\n                <p style=\"margin-bottom: 0px;\">Search for a product and add it to your moodboard</p>\n                </section>\n                \n              </div>\n              <div class=\"right-head\" fxFlex=\"100\" fxLayoutGap=\"1rem\" fxLayout=\"column\" >\n                <!-- <mat-card  class=\"shop__card\" *ngIf=\"(items && items.length == 0)\" fxFlex=\"100\" fxLayoutAlign=\"stretch stretch\" >\n                  <p>No Data Found.</p>\n                </mat-card> -->\n                <mat-card style=\"max-height: 580px; overflow-y: scroll;\" infiniteScroll [infiniteScrollDistance]=\"1\"\n                  [infiniteScrollThrottle]=\"50\" [scrollWindow]=\"false\" (scrolled)=\"onScroll()\">\n                  <mat-grid-list cols=\"5\" rowHeight=\"1:1\">\n                    <ng-container *ngFor=\"let item of items; let i = index\">\n                      <mat-grid-tile (click)=\"productDetails(item, moodboardDetails)\" class=\"tile\">\n                        <mat-card  class=\"cardImg\" >\n                          <div class=\"tile-box\">{{item.total_warehouse_quantity}}</div>  \n                          <img width=\"100%\" class=\"img\" src=\"{{item?.product_sku_vartion?.get_display_image[0]?.image_url?.small}}\" alt=\"{{item.product_name}}\"/></mat-card>\n                      </mat-grid-tile>\n                    </ng-container>\n                  </mat-grid-list>\n                </mat-card>\n              </div>    \n          </div>\n        </div>\n    </div>\n    </mat-tab>\n    <mat-tab disabled>\n      <ng-template mat-tab-label>\n        <button mat-raised-button type=\"button\" class=\"summary_btn_position\" (click)=\"scroll(mbsummary)\" color=\"accent\" aria-label=\"\">View Moodboard Summary</button>\n      </ng-template>\n  </mat-tab>\n  </mat-tab-group>\n    <!-- <button mat-raised-button type=\"button\" class=\"summary_btn_position\" (click)=\"scroll(mbsummary)\" color=\"accent\" aria-label=\"\">VIEW MOODBOARD SUMMARY</button> -->\n</div>\n<div class=\"mb-summary\"  #mbsummary fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n  <div\n    class=\"mb-summary__info\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"start start\"\n  >\n    <div><span class=\"mb-summary__info--value\">MOODBOARD SUMMARY</span></div>\n    <div\n    class=\"mb-summary__info\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start start\"\n    fxLayoutGap=\"2rem\"\n  > <div>\n      <span class=\"mb-summary__info--label\">Customer City :</span>\n      <span class=\"mb-summary__info--value\"> {{moodboardDetails?.moodboard?.city}}</span>\n    </div>\n    <div>\n      <span class=\"mb-summary__info--label\">Zipcode:</span>\n      <span class=\"mb-summary__info--value\">{{moodboardDetails?.moodboard?.zipcode}}</span>\n    </div>\n  </div>\n  </div>\n  <span id=\"refresh\" (click)=\"refresh()\"></span>\n  <ag-grid-angular\n    [gridOptions]=\"gridOptions\"\n    style=\"height:600px; width: 100%\"\n    class=\"ag-theme-alpine quotes-table\"\n    [rowData]=\"rowData | async\"\n    [frameworkComponents]=\"frameworkComponents\"\n    [pinnedBottomRowData]=\"pinnedBottomRowData\"\n    [defaultColDef]=\"defaultColDef\"\n    [columnDefs]=\"columnDefs\"\n  >\n  </ag-grid-angular>\n  <div\n    class=\"mb-summary__actions\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"center\"\n    fxLayoutGap=\"2rem\"\n  >\n  <ng-content [select]=\"actions\">\n  </ng-content>\n  </div>\n</div>\n<ng-template #viewMoreCity>\n<div fxLayout=\"row-reverse\">\n  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\n </div>\n  <div style=\"padding: 20px\" fxLayout=\"row wrap\" fxLayoutGap=\"2rem\">\n    <ng-container *ngFor=\"let city of (cityListDefault); let i = index\">\n        <mat-checkbox fxFlex=\"25\"\n          (change)=\"onCityChecked(city, i)\"\n          [checked]=\"city.isChecked\"\n          >\n          {{city.warehouse_name}}\n        </mat-checkbox>\n  </ng-container>\n</div>\n</ng-template>        \n<ng-template #viewMoreCat>\n  <div  fxLayout=\"row-reverse\">\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\n</div>\n  <div style=\"padding: 10px\" fxLayout=\"row wrap\" fxLayoutGap=\"2rem\">\n    <ng-container *ngFor=\"let cat of (catListDefault); let i = index\">\n        <mat-checkbox fxFlex=\"20\"\n          (change)=\"onCategoriesChecked(cat, i)\"\n          [checked]=\"cat.isChecked\"\n          >\n          {{cat.name}}\n        </mat-checkbox>\n  </ng-container>\n</div>\n</ng-template>        \n\n<ng-template #quickFilter>\n  <mat-horizontal-stepper [linear]=\"false\" [selectedIndex]=\"this.selectedIndex\"\n    (selectionChange)=\"selectionChange($event)\" #stepper>\n    <mat-step>\n      <div fxLayout=\"row-reverse\" style=\"background: #f8f8f8; margin: 0px -24px 0px -24px;\"\n        fxLayoutAlign=\"space-between center\">\n        <h2 mat-dialog-title>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\n        </h2>\n      </div>\n      <mat-dialog-content class=\"mat-typography\" fxLayoutGap=\"2rem\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n        <h1 class=\"text-center popup-title\">WANT TO FURNISH YOUR PROPERTY?</h1>\n        <h1 class=\"text-center popup-title-head\"> Let’s get started</h1>\n        <div class=\"row justify-content-center mt-5\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <div (click)=\"goto(1)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\n            <img class=\"img-icon\" src=\"assets/shop/location.svg\" alt=\"\" />\n            <span>Location</span>\n          </div>\n          <div style=\"margin:0 -18px 0px -5px\">\n            <img class=\"img-icon line\" src=\"assets/shop/Line.svg\" alt=\"\" />\n          </div>\n          <div (click)=\"goto(2)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\n            <img class=\"img-icon\" src=\"assets/shop/category.svg\" alt=\"\" />\n            <span>Categories</span>\n          </div>\n          <div style=\"margin:0 -5px 0 -18px\">\n            <img class=\"img-icon line\" src=\"assets/shop/Line.svg\" alt=\"\" />\n          </div>\n          <div (click)=\"goto(3)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\n            <img class=\"img-icon\" src=\"assets/shop/quantity.svg\" alt=\"\" />\n            <span>Quantity</span>\n          </div>\n          <div style=\"margin:0 -1px 0 -5px\">\n            <img class=\"img-icon line\" src=\"assets/shop/Line.svg\" alt=\"\" />\n          </div>\n          <div (click)=\"goto(4)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\n            <img class=\"img-icon\" src=\"assets/shop/budget.svg\" alt=\"\" />\n            <span>Budget</span>\n          </div>\n        </div>\n        <div fxLayoutAlign=\"center center\">\n          <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\">START</button>\n        </div>\n      </mat-dialog-content>\n\n    </mat-step>\n    <mat-step>\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\n        fxLayoutAlign=\"space-between center\">\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\n          <img src=\"assets/shop/location.svg\" class=\"filter-img\" style=\"margin-top: 33px;\n          margin-right: 10px;\n      \" alt=\"Cities\">\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\n            Location\n          </h2>\n        </div>\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\n        </div>\n      </div>\n      <mat-dialog-content class=\"mat-typography\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">\n        <div>\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\"> What locations you are looking to Furnish units in?\n          </h2>\n        </div>\n        <div style=\"padding: 10px;\" fxLayout=\"row wrap\" fxLayoutGap=\"1rem\">\n          <ng-container *ngFor=\"let city of cityListDefault; let i as index\">\n            <mat-checkbox fxFlex=\"22\" (change)=\"onCityChecked(city, i)\" [checked]=\"city.isChecked\">\n              {{city.warehouse_name}}\n            </mat-checkbox>\n          </ng-container>\n        </div>\n        <div fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\n          <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\">Next</button>\n        </div>\n      </mat-dialog-content>\n    </mat-step>\n    <mat-step>\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\n        fxLayoutAlign=\"space-between center\">\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\n          <img src=\"assets/shop/category.svg\" class=\"filter-img\" style=\"margin-top: 33px;\n        margin-right: 10px;\n    \" alt=\"Cities\">\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\n            Category\n          </h2>\n        </div>\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\n        </div>\n      </div>\n      <mat-dialog-content style=\"max-height: 60vh;\" class=\"mat-typography\" fxLayout=\"column\"\n        fxLayoutAlign=\"stretch center\">\n        <div>\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\"> Looking for products in any particular category?</h2>\n        </div>\n        <div style=\"padding: 10px;\" fxLayout=\"row wrap\" fxLayoutGap=\"1rem\">\n          <ng-container *ngFor=\"let cat of catListDefault; let i as index\">\n            <mat-checkbox (change)=\"onCategoriesChecked(cat, i)\" fxFlex=\"23\" [checked]=\"cat.isChecked\">\n              {{cat.name}}\n            </mat-checkbox>\n          </ng-container>\n        </div>\n      </mat-dialog-content>\n      <div style=\"padding: 1rem;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\n        <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\">Next</button>\n      </div>\n    </mat-step>\n    <mat-step>\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\n        fxLayoutAlign=\"space-between center\">\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\n          <img src=\"assets/shop/budget.svg\" class=\"filter-img\" style=\"margin-top: 33px;\n          margin-right: 10px;\n      \" alt=\"Cities\">\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\n            Budget\n          </h2>\n        </div>\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\n        </div>\n      </div>\n      <mat-dialog-content class=\"mat-typography\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n        <div>\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\">Is there a Budget Range you are working with?</h2>\n        </div>\n        <div style=\"padding: 10px 0px;\" class=\"price-input\" fxLayoutAlign=\"center center\" fxLayoutGap=\"1rem\"\n          fxLayout=\"row wrap\">\n          <mat-form-field fxFlex=\"30\" appearance=\"fill\">\n            <mat-label>$ Starting from</mat-label>\n            <input type=\"number\" #min (input)=\"onMinPriceRangeChange(min.value)\" value=\"{{min_price}}\" matInput\n              min=\"0\" />\n          </mat-form-field>\n          <mat-form-field fxFlex=\"30\" appearance=\"fill\">\n            <mat-label>$ Ending to</mat-label>\n            <input type=\"number\" #max (input)=\"onMaxPriceRangeChange(max.value)\" value=\"{{max_price}}\" matInput\n              min=\"1\" />\n          </mat-form-field>\n        </div>\n        <div fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\n          <button mat-raised-button matStepperNext color=\"accent\" class=\"btn\" aria-label=\"\">Next</button>\n        </div>\n      </mat-dialog-content>\n    </mat-step>\n    <mat-step>\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\n        fxLayoutAlign=\"space-between center\">\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\n          <img src=\"assets/shop/quantity.svg\" class=\"filter-img\" style=\"margin-top: 33px;\n          margin-right: 10px;\n      \" alt=\"Cities\">\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\n            Quantity\n          </h2>\n        </div>\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\n        </div>\n      </div>\n      <mat-dialog-content class=\"mat-typography\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n        <div>\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\"> What is the minimum quantity you are interested in?\n          </h2>\n        </div>\n        <div style=\"padding: 10px 0px;\" fxLayoutAlign=\"center center\">\n          <mat-form-field appearance=\"fill\" fxFlex=\"70\">\n            <mat-label>Miniumum Quantity</mat-label>\n            <input type=\"number\" #minQty step=\"1\" (input)=\"onQtyChange(minQty.value);\" matInput min=\"1\"\n              value=\"{{min_price_inventory}}\" />\n          </mat-form-field>\n        </div>\n        <div fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\n          <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\"\n            (click)=\"filterProductPopup();\">FINISH</button>\n        </div>\n      </mat-dialog-content>\n    </mat-step>\n  </mat-horizontal-stepper>\n\n</ng-template>","import { Directive, ElementRef, EventEmitter, Input, NgModule, NgZone, Output } from '@angular/core';\nimport { fromEvent, of } from 'rxjs';\nimport { filter, map, mergeMap, tap, throttleTime } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/services/ngx-ins-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} selector\n * @param {?} scrollWindow\n * @param {?} defaultElement\n * @param {?} fromRoot\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction resolveContainerElement(selector, scrollWindow, defaultElement, fromRoot) {\n    /** @type {?} */\n    const hasWindow = window && !!window.document && window.document.documentElement;\n    /** @type {?} */\n    let container = hasWindow && scrollWindow ? window : defaultElement;\n    if (selector) {\n        /** @type {?} */\n        const containerIsString = selector && hasWindow && typeof selector === 'string';\n        container = containerIsString\n            ? findElement(selector, defaultElement.nativeElement, fromRoot)\n            : selector;\n        if (!container) {\n            throw new Error('ngx-infinite-scroll {resolveContainerElement()}: selector for');\n        }\n    }\n    return container;\n}\n/**\n * @param {?} selector\n * @param {?} customRoot\n * @param {?} fromRoot\n * @return {?}\n */\nfunction findElement(selector, customRoot, fromRoot) {\n    /** @type {?} */\n    const rootEl = fromRoot ? window.document : customRoot;\n    return rootEl.querySelector(selector);\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction inputPropChanged(prop) {\n    return prop && !prop.firstChange;\n}\n/**\n * @return {?}\n */\nfunction hasWindowDefined() {\n    return typeof window !== 'undefined';\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/services/axis-resolver.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst VerticalProps = {\n    clientHeight: \"clientHeight\",\n    offsetHeight: \"offsetHeight\",\n    scrollHeight: \"scrollHeight\",\n    pageYOffset: \"pageYOffset\",\n    offsetTop: \"offsetTop\",\n    scrollTop: \"scrollTop\",\n    top: \"top\"\n};\n/** @type {?} */\nconst HorizontalProps = {\n    clientHeight: \"clientWidth\",\n    offsetHeight: \"offsetWidth\",\n    scrollHeight: \"scrollWidth\",\n    pageYOffset: \"pageXOffset\",\n    offsetTop: \"offsetLeft\",\n    scrollTop: \"scrollLeft\",\n    top: \"left\"\n};\nclass AxisResolver {\n    /**\n     * @param {?=} vertical\n     */\n    constructor(vertical = true) {\n        this.vertical = vertical;\n        this.propsMap = vertical ? VerticalProps : HorizontalProps;\n    }\n    /**\n     * @return {?}\n     */\n    clientHeightKey() {\n        return this.propsMap.clientHeight;\n    }\n    /**\n     * @return {?}\n     */\n    offsetHeightKey() {\n        return this.propsMap.offsetHeight;\n    }\n    /**\n     * @return {?}\n     */\n    scrollHeightKey() {\n        return this.propsMap.scrollHeight;\n    }\n    /**\n     * @return {?}\n     */\n    pageYOffsetKey() {\n        return this.propsMap.pageYOffset;\n    }\n    /**\n     * @return {?}\n     */\n    offsetTopKey() {\n        return this.propsMap.offsetTop;\n    }\n    /**\n     * @return {?}\n     */\n    scrollTopKey() {\n        return this.propsMap.scrollTop;\n    }\n    /**\n     * @return {?}\n     */\n    topKey() {\n        return this.propsMap.top;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/services/event-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @param {?} alwaysCallback\n * @param {?} shouldFireScrollEvent\n * @param {?} isTriggeredCurrentTotal\n * @return {?}\n */\nfunction shouldTriggerEvents(alwaysCallback, shouldFireScrollEvent, isTriggeredCurrentTotal) {\n    if (alwaysCallback && shouldFireScrollEvent) {\n        return true;\n    }\n    if (!isTriggeredCurrentTotal && shouldFireScrollEvent) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/services/position-resolver.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createResolver({ windowElement, axis }) {\n    return createResolverWithContainer({ axis, isWindow: isElementWindow(windowElement) }, windowElement);\n}\n/**\n * @param {?} resolver\n * @param {?} windowElement\n * @return {?}\n */\nfunction createResolverWithContainer(resolver, windowElement) {\n    /** @type {?} */\n    const container = resolver.isWindow || (windowElement && !windowElement.nativeElement)\n        ? windowElement\n        : windowElement.nativeElement;\n    return Object.assign(Object.assign({}, resolver), { container });\n}\n/**\n * @param {?} windowElement\n * @return {?}\n */\nfunction isElementWindow(windowElement) {\n    /** @type {?} */\n    const isWindow = ['Window', 'global'].some((/**\n     * @param {?} obj\n     * @return {?}\n     */\n    (obj) => Object.prototype.toString.call(windowElement).includes(obj)));\n    return isWindow;\n}\n/**\n * @param {?} isContainerWindow\n * @param {?} windowElement\n * @return {?}\n */\nfunction getDocumentElement(isContainerWindow, windowElement) {\n    return isContainerWindow ? windowElement.document.documentElement : null;\n}\n/**\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePoints(element, resolver) {\n    /** @type {?} */\n    const height = extractHeightForElement(resolver);\n    return resolver.isWindow\n        ? calculatePointsForWindow(height, element, resolver)\n        : calculatePointsForElement(height, element, resolver);\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForWindow(height, element, resolver) {\n    const { axis, container, isWindow } = resolver;\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    // scrolled until now / current y point\n    /** @type {?} */\n    const scrolled = height +\n        getElementPageYOffset(getDocumentElement(isWindow, container), axis, isWindow);\n    // total height / most bottom y point\n    /** @type {?} */\n    const nativeElementHeight = getElementHeight(element.nativeElement, isWindow, offsetHeightKey, clientHeightKey);\n    /** @type {?} */\n    const totalToScroll = getElementOffsetTop(element.nativeElement, axis, isWindow) +\n        nativeElementHeight;\n    return { height, scrolled, totalToScroll, isWindow };\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForElement(height, element, resolver) {\n    const { axis, container } = resolver;\n    // perhaps use container.offsetTop instead of 'scrollTop'\n    /** @type {?} */\n    const scrolled = container[axis.scrollTopKey()];\n    /** @type {?} */\n    const totalToScroll = container[axis.scrollHeightKey()];\n    return { height, scrolled, totalToScroll, isWindow: false };\n}\n/**\n * @param {?} axis\n * @return {?}\n */\nfunction extractHeightPropKeys(axis) {\n    return {\n        offsetHeightKey: axis.offsetHeightKey(),\n        clientHeightKey: axis.clientHeightKey()\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction extractHeightForElement({ container, isWindow, axis }) {\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    return getElementHeight(container, isWindow, offsetHeightKey, clientHeightKey);\n}\n/**\n * @param {?} elem\n * @param {?} isWindow\n * @param {?} offsetHeightKey\n * @param {?} clientHeightKey\n * @return {?}\n */\nfunction getElementHeight(elem, isWindow, offsetHeightKey, clientHeightKey) {\n    if (isNaN(elem[offsetHeightKey])) {\n        /** @type {?} */\n        const docElem = getDocumentElement(isWindow, elem);\n        return docElem ? docElem[clientHeightKey] : 0;\n    }\n    else {\n        return elem[offsetHeightKey];\n    }\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementOffsetTop(elem, axis, isWindow) {\n    /** @type {?} */\n    const topKey = axis.topKey();\n    // elem = elem.nativeElement;\n    if (!elem.getBoundingClientRect) {\n        // || elem.css('none')) {\n        return;\n    }\n    return (elem.getBoundingClientRect()[topKey] +\n        getElementPageYOffset(elem, axis, isWindow));\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementPageYOffset(elem, axis, isWindow) {\n    /** @type {?} */\n    const pageYOffset = axis.pageYOffsetKey();\n    /** @type {?} */\n    const scrollTop = axis.scrollTopKey();\n    /** @type {?} */\n    const offsetTop = axis.offsetTopKey();\n    if (isNaN(window.pageYOffset)) {\n        return getDocumentElement(isWindow, elem)[scrollTop];\n    }\n    else if (elem.ownerDocument) {\n        return elem.ownerDocument.defaultView[pageYOffset];\n    }\n    else {\n        return elem[offsetTop];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/services/scroll-resolver.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} container\n * @param {?} distance\n * @param {?} scrollingDown\n * @return {?}\n */\nfunction shouldFireScrollEvent(container, distance, scrollingDown) {\n    /** @type {?} */\n    let remaining;\n    /** @type {?} */\n    let containerBreakpoint;\n    if (container.totalToScroll <= 0) {\n        return false;\n    }\n    /** @type {?} */\n    const scrolledUntilNow = container.isWindow ? container.scrolled : container.height + container.scrolled;\n    if (scrollingDown) {\n        remaining =\n            (container.totalToScroll - scrolledUntilNow) / container.totalToScroll;\n        containerBreakpoint = distance.down / 10;\n    }\n    else {\n        /** @type {?} */\n        const totalHiddenContentHeight = container.scrolled + (container.totalToScroll - scrolledUntilNow);\n        remaining = container.scrolled / totalHiddenContentHeight;\n        containerBreakpoint = distance.up / 10;\n    }\n    /** @type {?} */\n    const shouldFireEvent = remaining <= containerBreakpoint;\n    return shouldFireEvent;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @return {?}\n */\nfunction isScrollingDownwards(lastScrollPosition, container) {\n    return lastScrollPosition < container.scrolled;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @param {?} distance\n * @return {?}\n */\nfunction getScrollStats(lastScrollPosition, container, distance) {\n    /** @type {?} */\n    const scrollDown = isScrollingDownwards(lastScrollPosition, container);\n    return {\n        fire: shouldFireScrollEvent(container, distance, scrollDown),\n        scrollDown\n    };\n}\n/**\n * @param {?} position\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} scroll\n * @param {?} scrollState\n * @param {?} triggered\n * @param {?} isScrollingDown\n * @return {?}\n */\n\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @param {?} isScrollingDown\n * @return {?}\n */\n\n/**\n * @param {?} scrollState\n * @param {?} scrolledUntilNow\n * @param {?} totalToScroll\n * @return {?}\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/services/scroll-state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollState {\n    /**\n     * @param {?} __0\n     */\n    constructor({ totalToScroll }) {\n        this.lastScrollPosition = 0;\n        this.lastTotalToScroll = 0;\n        this.totalToScroll = 0;\n        this.triggered = {\n            down: 0,\n            up: 0\n        };\n        this.totalToScroll = totalToScroll;\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    updateScrollPosition(position) {\n        return (this.lastScrollPosition = position);\n    }\n    /**\n     * @param {?} totalToScroll\n     * @return {?}\n     */\n    updateTotalToScroll(totalToScroll) {\n        if (this.lastTotalToScroll !== totalToScroll) {\n            this.lastTotalToScroll = this.totalToScroll;\n            this.totalToScroll = totalToScroll;\n        }\n    }\n    /**\n     * @param {?} scrolledUntilNow\n     * @param {?} totalToScroll\n     * @return {?}\n     */\n    updateScroll(scrolledUntilNow, totalToScroll) {\n        this.updateScrollPosition(scrolledUntilNow);\n        this.updateTotalToScroll(totalToScroll);\n    }\n    /**\n     * @param {?} scroll\n     * @param {?} isScrollingDown\n     * @return {?}\n     */\n    updateTriggeredFlag(scroll, isScrollingDown) {\n        if (isScrollingDown) {\n            this.triggered.down = scroll;\n        }\n        else {\n            this.triggered.up = scroll;\n        }\n    }\n    /**\n     * @param {?} totalToScroll\n     * @param {?} isScrollingDown\n     * @return {?}\n     */\n    isTriggeredScroll(totalToScroll, isScrollingDown) {\n        return isScrollingDown\n            ? this.triggered.down === totalToScroll\n            : this.triggered.up === totalToScroll;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/services/scroll-register.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction createScroller(config) {\n    const { scrollContainer, scrollWindow, element, fromRoot } = config;\n    /** @type {?} */\n    const resolver = createResolver({\n        axis: new AxisResolver(!config.horizontal),\n        windowElement: resolveContainerElement(scrollContainer, scrollWindow, element, fromRoot)\n    });\n    /** @type {?} */\n    const scrollState = new ScrollState({\n        totalToScroll: calculatePoints(element, resolver)\n    });\n    /** @type {?} */\n    const options = {\n        container: resolver.container,\n        throttle: config.throttle\n    };\n    /** @type {?} */\n    const distance = {\n        up: config.upDistance,\n        down: config.downDistance\n    };\n    return attachScrollEvent(options).pipe(mergeMap((/**\n     * @return {?}\n     */\n    () => of(calculatePoints(element, resolver)))), map((/**\n     * @param {?} positionStats\n     * @return {?}\n     */\n    (positionStats) => toInfiniteScrollParams(scrollState.lastScrollPosition, positionStats, distance))), tap((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ stats }) => scrollState.updateScroll(stats.scrolled, stats.totalToScroll))), filter((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ fire, scrollDown, stats: { totalToScroll } }) => shouldTriggerEvents(config.alwaysCallback, fire, scrollState.isTriggeredScroll(totalToScroll, scrollDown)))), tap((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ scrollDown, stats: { totalToScroll } }) => {\n        scrollState.updateTriggeredFlag(totalToScroll, scrollDown);\n    })), map(toInfiniteScrollAction));\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction attachScrollEvent(options) {\n    /** @type {?} */\n    let obs = fromEvent(options.container, 'scroll');\n    // For an unknown reason calling `sampleTime()` causes trouble for many users, even with `options.throttle = 0`.\n    // Let's avoid calling the function unless needed.\n    // Replacing with throttleTime seems to solve the problem\n    // See https://github.com/orizens/ngx-infinite-scroll/issues/198\n    if (options.throttle) {\n        obs = obs.pipe(throttleTime(options.throttle));\n    }\n    return obs;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} stats\n * @param {?} distance\n * @return {?}\n */\nfunction toInfiniteScrollParams(lastScrollPosition, stats, distance) {\n    const { scrollDown, fire } = getScrollStats(lastScrollPosition, stats, distance);\n    return {\n        scrollDown,\n        fire,\n        stats\n    };\n}\n/** @type {?} */\nconst InfiniteScrollActions = {\n    DOWN: '[NGX_ISE] DOWN',\n    UP: '[NGX_ISE] UP'\n};\n/**\n * @param {?} response\n * @return {?}\n */\nfunction toInfiniteScrollAction(response) {\n    const { scrollDown, stats: { scrolled: currentScrollPosition } } = response;\n    return {\n        type: scrollDown ? InfiniteScrollActions.DOWN : InfiniteScrollActions.UP,\n        payload: {\n            currentScrollPosition\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/modules/infinite-scroll.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InfiniteScrollDirective {\n    /**\n     * @param {?} element\n     * @param {?} zone\n     */\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.scrolled = new EventEmitter();\n        this.scrolledUp = new EventEmitter();\n        this.infiniteScrollDistance = 2;\n        this.infiniteScrollUpDistance = 1.5;\n        this.infiniteScrollThrottle = 150;\n        this.infiniteScrollDisabled = false;\n        this.infiniteScrollContainer = null;\n        this.scrollWindow = true;\n        this.immediateCheck = false;\n        this.horizontal = false;\n        this.alwaysCallback = false;\n        this.fromRoot = false;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!this.infiniteScrollDisabled) {\n            this.setup();\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance }) {\n        /** @type {?} */\n        const containerChanged = inputPropChanged(infiniteScrollContainer);\n        /** @type {?} */\n        const disabledChanged = inputPropChanged(infiniteScrollDisabled);\n        /** @type {?} */\n        const distanceChanged = inputPropChanged(infiniteScrollDistance);\n        /** @type {?} */\n        const shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||\n            (disabledChanged && !infiniteScrollDisabled.currentValue) || distanceChanged;\n        if (containerChanged || disabledChanged || distanceChanged) {\n            this.destroyScroller();\n            if (shouldSetup) {\n                this.setup();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    setup() {\n        if (hasWindowDefined()) {\n            this.zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this.disposeScroller = createScroller({\n                    fromRoot: this.fromRoot,\n                    alwaysCallback: this.alwaysCallback,\n                    disable: this.infiniteScrollDisabled,\n                    downDistance: this.infiniteScrollDistance,\n                    element: this.element,\n                    horizontal: this.horizontal,\n                    scrollContainer: this.infiniteScrollContainer,\n                    scrollWindow: this.scrollWindow,\n                    throttle: this.infiniteScrollThrottle,\n                    upDistance: this.infiniteScrollUpDistance\n                }).subscribe((/**\n                 * @param {?} payload\n                 * @return {?}\n                 */\n                (payload) => this.zone.run((/**\n                 * @return {?}\n                 */\n                () => this.handleOnScroll(payload)))));\n            }));\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    handleOnScroll({ type, payload }) {\n        switch (type) {\n            case InfiniteScrollActions.DOWN:\n                return this.scrolled.emit(payload);\n            case InfiniteScrollActions.UP:\n                return this.scrolledUp.emit(payload);\n            default:\n                return;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyScroller();\n    }\n    /**\n     * @return {?}\n     */\n    destroyScroller() {\n        if (this.disposeScroller) {\n            this.disposeScroller.unsubscribe();\n        }\n    }\n}\nInfiniteScrollDirective.ɵfac = function InfiniteScrollDirective_Factory(t) { return new (t || InfiniteScrollDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nInfiniteScrollDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InfiniteScrollDirective, selectors: [[\"\", \"infiniteScroll\", \"\"], [\"\", \"infinite-scroll\", \"\"], [\"\", \"data-infinite-scroll\", \"\"]], inputs: { infiniteScrollDistance: \"infiniteScrollDistance\", infiniteScrollUpDistance: \"infiniteScrollUpDistance\", infiniteScrollThrottle: \"infiniteScrollThrottle\", infiniteScrollDisabled: \"infiniteScrollDisabled\", infiniteScrollContainer: \"infiniteScrollContainer\", scrollWindow: \"scrollWindow\", immediateCheck: \"immediateCheck\", horizontal: \"horizontal\", alwaysCallback: \"alwaysCallback\", fromRoot: \"fromRoot\" }, outputs: { scrolled: \"scrolled\", scrolledUp: \"scrolledUp\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nInfiniteScrollDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nInfiniteScrollDirective.propDecorators = {\n    scrolled: [{ type: Output }],\n    scrolledUp: [{ type: Output }],\n    infiniteScrollDistance: [{ type: Input }],\n    infiniteScrollUpDistance: [{ type: Input }],\n    infiniteScrollThrottle: [{ type: Input }],\n    infiniteScrollDisabled: [{ type: Input }],\n    infiniteScrollContainer: [{ type: Input }],\n    scrollWindow: [{ type: Input }],\n    immediateCheck: [{ type: Input }],\n    horizontal: [{ type: Input }],\n    alwaysCallback: [{ type: Input }],\n    fromRoot: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InfiniteScrollDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { scrolled: [{\n            type: Output\n        }], scrolledUp: [{\n            type: Output\n        }], infiniteScrollDistance: [{\n            type: Input\n        }], infiniteScrollUpDistance: [{\n            type: Input\n        }], infiniteScrollThrottle: [{\n            type: Input\n        }], infiniteScrollDisabled: [{\n            type: Input\n        }], infiniteScrollContainer: [{\n            type: Input\n        }], scrollWindow: [{\n            type: Input\n        }], immediateCheck: [{\n            type: Input\n        }], horizontal: [{\n            type: Input\n        }], alwaysCallback: [{\n            type: Input\n        }], fromRoot: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/modules/ngx-infinite-scroll.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InfiniteScrollModule {\n}\nInfiniteScrollModule.ɵfac = function InfiniteScrollModule_Factory(t) { return new (t || InfiniteScrollModule)(); };\nInfiniteScrollModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: InfiniteScrollModule });\nInfiniteScrollModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [], imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InfiniteScrollModule, { declarations: [InfiniteScrollDirective], exports: [InfiniteScrollDirective] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InfiniteScrollModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [InfiniteScrollDirective],\n                exports: [InfiniteScrollDirective],\n                imports: [],\n                providers: []\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/ngx-infinite-scroll.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * Entry point for all public APIs of the package.\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-infinite-scroll.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InfiniteScrollDirective, InfiniteScrollModule };\n\n//# sourceMappingURL=ngx-infinite-scroll.js.map","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MoodboardService } from '../../services/moodboard.service';\nimport { ToasterService, UserService } from 'projects/core/src/public-api';\nimport { QuoteService } from 'projects/quote/src/public-api';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'lib-create-moodboard',\n  templateUrl: './create-moodboard.component.html',\n  styleUrls: ['./create-moodboard.component.scss']\n})\nexport class CreateMoodboardComponent implements OnInit {\n  bannerIconImg: any = 'assets/moodboard/images/mb.png';\n  bannerIconImgTxt: any = 'Moodboard';\n  bottomTxt: any = 'Style & create look from our collection of designer furniture';\n  mbCreateForm: FormGroup;\n  stateList: any = [];\n  mbTypeList: any = [];\n  showPDropdown: any = false;\n  showDropdown: any = false;\n  dCompanyList: any = [];\n  companyList: any = [];\n  projectList: any = [];\n  selectedCompany: any = '';\n  selectedProject: any = '';\n\n  catagorydata = [{\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\n      value: 'Living Room',\n      type_id: 1\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\n      value: 'Bedroom',\n      type_id: 2\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\n      value: 'Dining Room',\n      type_id: 3\n    },\n\n    {\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\n      value: 'Office',\n      type_id: 4\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\n      value: 'Outdoor',\n      type_id: 5\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\n      value: 'Others',\n      type_id: 6\n    }\n  ]\n  mbId: any = null;\n  currentPage: any = '';\n  boardname: any = '';\n  constructor(public fb: FormBuilder, private moodboardService:MoodboardService,\n    public _user: UserService, private _toster: ToasterService,private _quoteService: QuoteService,\n    private activatedRoute: ActivatedRoute, private router: Router,\n    private _location: Location) {\n    this.mbCreateForm = this.fb.group({\n                          moodboardName: ['', Validators.required],\n                          moodboardType: ['', Validators.required],\n                          moodboardCompany: [''],\n                          moodboardProjectName: [''],\n                          company_id: [''],\n                          project_id: [''],\n                          moodboardState: ['', Validators.required],\n                          moodboardCity: ['', Validators.required],\n                          moodboardZip: ['', Validators.required]\n                        });\n      this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\n      this.currentPage = this.router.url.split('/')[2];                  \n     }\n  ngOnInit(): void {\n    this.getStates();\n    this.getMoodBoardType();  \n    this.getcompanyByUserMoodboard();\n    if(this.mbId != null){\n      this.getMoodboard();\n    }\n    this.getCompanyList();\n\n  }\n  getMoodBoardType(){\n    this.moodboardService.getMoodBoardType().subscribe((response:any) => {\n      this.mbTypeList = response.result;\n      this.catagorydata = this.mbTypeList.map((item: any, i: any) => Object.assign({}, item, this.catagorydata[i]));\n    });    \n  }\n  getcompanyByUserMoodboard(){\n    this.moodboardService.getcompanyByUserMoodboard().subscribe((response:any) => {\n      this.mbCreateForm.patchValue({moodboardCompany:response.result[0].company});\n    });    \n  }\n\n  getCompanyList() {\n    this._quoteService.getCompanyList().subscribe((data: any) => {\n      if(typeof data.result == 'string'){\n        this.companyList = [];\n        this.selectedCompany = \"\";\n        return;\n      }\n     // this.companyList = data.result.map((x: any) => x.company);\n      this.companyList  = data.result;\n      let companyId = data.result.find((x: any)=> x.company == this.selectedCompany)?.sgid;\n      if(companyId){\n        this.getProjectList(companyId, null);\n      }\n    });\n  }\n  getProjectList(companyId: any, event: any) {\n    if(event !== null) companyId = event.target.value;\n    this._quoteService.getProjectList(companyId).subscribe((data: any)=> {\n      if(typeof data.result == 'string'){\n        this.projectList = [];\n        this.selectedProject = \"\";\n      } else {\n        this.projectList  = data.result; //.map((x: any)=> x.project);\n        this.selectedProject = this.projectList[0];\n      }\n    })  \n  }\n\n  validatedCityZipCode(){\n    let param = {zipcode: this.mbCreateForm.value.moodboardZip, \n      city_name: this.mbCreateForm.value.moodboardCity};\n    this.moodboardService.validatedCityZipCode(param).subscribe((response:any) => {\n       response.result;\n    });    \n  }\n  getStates(){\n    this.moodboardService.getStateList().subscribe((response:any) => {\n      this.stateList = response.states;\n    });    \n\n  }\n  getMoodboard(){\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response:any) => {\n      this.boardname = response.moodboard.boardname;\n      this.mbCreateForm.setValue({\n        moodboardName: response.moodboard.boardname,\n        moodboardType: response.moodboard.boardtypeid.toString(),\n        moodboardCompany: response.moodboard.company_name,\n        moodboardProjectName: response.moodboard.project_name,\n        company_id: response.moodboard.company_id,\n        project_id: response.moodboard.project_id,\n        moodboardState: response.moodboard.state,\n        moodboardCity: response.moodboard.city,\n        moodboardZip: response.moodboard.zipcode\n      });\n    });    \n\n  }\n  resetForm(){\n    this.mbCreateForm.reset();\n    this._location.back();\n  }\n  onSubmit() {\n    let val = this.mbCreateForm.value;\n    let param: {[index: string]:any} = { \n      moodboard_name: val.moodboardName,\n      moodboard_type: val.moodboardType,\n      company_name: val.moodboardCompany,\n      project_name: val.moodboardProjectName,\n      state: val.moodboardState,\n      city: val.moodboardCity,\n      zipcode: val.moodboardZip,\n      userid: this._user.getUser().getId()\n    }\n    if(this.showDropdown == false)\n    param['company_name'] = this.companyList.find((x: any)=> x.sgid == val.company_id)?.company;\n    if(this.showPDropdown == false)\n    param['project_name'] = this.projectList.find((x: any)=> x.sgid == val.project_id)?.project;\n\n    if(this.mbId!== '' && this.currentPage != 'create') { \n      param['moodboard_id'] = this.mbId;\n      this.moodboardService.updateMoodboard(param).subscribe((response:any) => {\n        if(response.statusCode === 200){ \n          this._toster.success(response.message);\n          this.router.navigate(['moodboard',response.moodboard_id])\n      }\n        else this._toster.error(response.message);\n      }, error => this._toster.error('Please contact site administrator!')\n      );\n    }else{\n      this.moodboardService.createMoodboard(param).subscribe((response:any) => {\n        if(response.statusCode === 200)\n        { this._toster.success(response.message);\n//          this.router.navigate(['moodboard',response.moodboard_id])\n          this._location.back();\n      }\n        else this._toster.error(response.message);\n      }, error => this._toster.error('Please contact site administrator!')\n      );\n    }\n  }\n}\n","<div\n  fxFlex\n  class=\"mb-create__form\"\n  fxLayout=\"column\"\n  fxLayoutAlign=\"center center\"\n>  \n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n        <span *ngIf=\"mbId == null\" class=\"mb-create__form--title\">CREATE A NEW MOODBOARD</span>\n        <span *ngIf=\"mbId != '' && currentPage != 'create'\" class=\"mb-create__form--title\">Editing Moodboard named <strong>{{boardname}}</strong></span>\n        <span *ngIf=\"currentPage == 'create' && mbId != null\" class=\"mb-create__form--title\">Copying Moodboard named <strong>{{boardname}}</strong></span>\n    </div>\n</div>\n\n<div class=\"mb-form\">\n  <form [formGroup]=\"mbCreateForm\"  class=\"add-field\" (ngSubmit)=\"onSubmit()\">\n          <label style=\"display: flex;\" class=\"label\">Moodboard Type <span class=\"asterisk\">*</span></label>\n          <mat-button-toggle-group formControlName=\"moodboardType\" #mbtypegroup=\"matButtonToggleGroup\"   aria-label=\"Moodboard Type\">\n            <ng-container *ngFor=\"let item of catagorydata; let i = index\">\n            <mat-button-toggle [ngClass]=\"{'selected': mbtypegroup.value == item?.type_id}\" value=\"{{item?.type_id}}\">\n                <img mat-card-image width=\"100px\" height=\"100px\" src=\"{{item.imageSrc}}\" alt=\"{{item.value}}\">\n                <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\n                  <div fxLayout=\"row\" class=\"text-lable\" >{{item.value}}</div>\n                </div>\n              </mat-button-toggle>          \n            </ng-container>\n          </mat-button-toggle-group>\n<div class=\"mb-form-inner\" style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n  <div fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \n    <!-- <mat-form-field appearance = \"fill\">\n      <label for=\"moodboardName\">Moodboard Name <span class=\"asterisk\">*</span></label>\n      <input formControlName=\"moodboardName\" matInput placeholder = \"Name your Board\">\n    </mat-form-field> -->\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Moodboard Name<span class=\"asterisk\">*</span></span>\n      <input\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardName')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardName\"\n        placeholder=\"Name your Board\"\n      />\n    </div>\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Project Name<span class=\"asterisk\">*</span> </span>\n      <div fxLayout=\"row\"  style=\"width: 100%;\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\n        <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showPDropdown=!showPDropdown\" class=\"add\">\n          <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\n        </a>\n        <a *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\n          <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">        </a>\n    \n      <input *ngIf=\"showPDropdown\"\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardProjectName')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardProjectName\"\n        placeholder=\"Add Project Name\"\n      />\n      <select *ngIf=\"_user.getUser().isInternalUser() && !showPDropdown \"\n      [ngClass]=\"{\n        'error-border': mbCreateForm.get('project_id')?.invalid\n      }\"\n      formControlName=\"project_id\"\n    >\n      <option *ngFor=\"let prj of projectList\" [value]=\"prj.sgid\">\n        {{ prj.project }}\n      </option>\n    </select>\n  </div>\n    </div>\n \n    <div fxFlex=\"100\" fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">City<span class=\"asterisk\">*</span></span>\n      <input\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardCity')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardCity\"\n        placeholder=\"Enter a City\"\n      />\n    </div>\n \n\n    \n    \n   <!-- <mat-form-field appearance = \"fill\">\n    <label for=\"moodboardCompany\">Company Name <span class=\"asterisk\">*</span></label>\n    <input formControlName=\"moodboardCompany\" matInput placeholder = \"Enter Company Name\">\n </mat-form-field>\n <mat-form-field appearance = \"fill\">\n  <label for=\"moodboardProjectName\">Project Name <span class=\"asterisk\">*</span></label>\n  <input formControlName=\"moodboardProjectName\" matInput placeholder = \"Name your Project\">\n</mat-form-field> -->\n\n  </div>\n  <div fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Company Name<span class=\"asterisk\">*</span>\n    </span>\n    <div fxLayout=\"row\" style=\"width: 100%;\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\n    <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showDropdown=!showDropdown; showPDropdown=!showPDropdown\" class=\"add\">\n      <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\n    </a>\n    <a mat-button *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\n      <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\n    </a>\n    <input *ngIf=\"showDropdown\"\n        [readonly]=\"!_user.getUser().isInternalUser()\"\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardCompany')?.invalid,\n          'read-only': !_user.getUser().isInternalUser()\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardCompany\"\n        placeholder=\"Add Company Name\"\n      />\n      <select *ngIf=\"_user.getUser().isInternalUser() && !showDropdown\"\n      [ngClass]=\"{\n        'error-border': mbCreateForm.get('company_id')?.invalid\n      }\"\n      formControlName=\"company_id\"\n      (change)=\"getProjectList('', $event)\"\n    >\n      <option  *ngFor=\"let cmp of companyList\" [value]=\"cmp.sgid\" >\n        {{ cmp.company }}\n      </option>\n    </select>\n  </div>\n    </div>\n\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">State<span class=\"asterisk\">*</span></span>\n      <select\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardState')?.invalid\n        }\"\n        formControlName=\"moodboardState\"\n      >\n        <option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">\n          {{ state.name }}\n        </option>\n      </select>\n    </div>\n    \n    <div fxFlex=\"100\" fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Zip Code<span class=\"asterisk\">*</span></span>\n      <input\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardZip')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardZip\"\n        placeholder=\"Add a ZipCode\"\n      />\n    </div>\n    <!-- <mat-form-field appearance = \"fill\">\n      <mat-label>State <span class=\"asterisk\">*</span></mat-label>\n        <mat-select formControlName=\"moodboardState\">\n          <mat-option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">{{state.name}}</mat-option>\n        </mat-select>\n\n    </mat-form-field>\n    <mat-form-field appearance = \"fill\">\n      <label for=\"moodboardCity\">City <span class=\"asterisk\">*</span></label>\n      <input formControlName=\"moodboardCity\" matInput placeholder = \"Enter a City\">\n   </mat-form-field>\n   <mat-form-field appearance = \"fill\">\n    <label for=\"moodboardZip\">Zip Code <span class=\"asterisk\">*</span></label>\n    <input (input)=\"validatedCityZipCode()\" formControlName=\"moodboardZip\" matInput placeholder = \"Add a ZipCode\">\n </mat-form-field> -->\n \n  </div>\n</div>\n<div class=\"mb-form-inner\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n  <button *ngIf=\"mbId == '' || mbId != '' && currentPage == 'create'\"   class=\"btn btn-primary\"  mat-raised-button\n  color=\"accent\"  type=\"submit\" mat-button>CREATE</button>\n  <button *ngIf=\"mbId != '' && currentPage != 'create'\" class=\"btn btn-primary\" type=\"submit\"           mat-raised-button\n  color=\"accent\" mat-button>UPDATE</button>\n  <button (click)=\"resetForm();\" class=\"btn btn-primary\" mat-raised-button color=\"accent\"  mat-button>CANCEL</button>\n  <div fxLayoutGap=\"4rem\"></div>         \n  \n</div>          \n\n</form>  \n</div>          \n</div>      \n     \n\n\n","import { Routes } from '@angular/router';\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\n\nexport const moodboardRoutes: Routes = [\n  {\n    path: '',\n    component: MoodboardListComponent\n  },{\n    path: 'create',\n    component: CreateMoodboardComponent\n  },{\n    path: 'create/:id',\n    component: CreateMoodboardComponent\n  },{\n    path: 'edit/:id',\n    component: CreateMoodboardComponent\n  },{\n    path:':id',\n    component:MoodboardComponent\n  }\n];\n\n\n\n\n","/*\n * Public API Surface of shop\n */\n\nexport * from './lib/service/shop.service';\nexport * from './lib/components/shop/shop.component';\nexport * from './lib/components/product-details/product-details.component';\nexport * from './lib/shop.module';\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\";\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() { return this._rowspan; }\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() { return this._colspan; }\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() { return this._cols; }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() { return this._gutter; }\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() { return this._rowHeight; }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map"],"sourceRoot":"webpack:///"}