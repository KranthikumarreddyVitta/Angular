{"version":3,"sources":["./projects/moodboard/src/lib/moodboard.module.ts","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.html","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.html","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.ts","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.html","./projects/moodboard/src/lib/components/moodboard/share-mb/share-mb.component.ts","./projects/moodboard/src/lib/components/moodboard/share-mb/share-mb.component.html","./projects/moodboard/src/lib/moodboard-routing.ts","./projects/shop/src/projects.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"names":[],"mappings":"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C,aAAa,qCAAqC,MAAM,qCAAqC,SAAS,gCAAgC,mBAAmB,0CAA0C,gBAAgB,kBAAkB,sCAAsC,aAAa;AAC9vC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAc;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,wBAAwB,4BAA4B,kFAAoB,SAAS;AACjF;AACA,mBAAmB,sBAAsB;AACzC,wBAAwB,4BAA4B,kFAAoB,SAAS;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,oBAAoB;AAC5K,mBAAmB,+DAAwB,EAAE,4JAA4J;AACzM,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,yCAAyC,wJAAwJ;AACnN,QAAQ,6DAAsB;AAC9B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,uDAAuD;AAC9D;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,0BAA0B;AAChG;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,eAAe,OAAO,mDAAK,EAAE;AAC7B;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,+BAA+B,+DAAiB;AAChD,iCAAiC,qEAAuB;AACxD,yCAAyC,cAAc,kBAAkB,eAAe,cAAc,kBAAkB,gBAAgB,2BAA2B,MAAM,OAAO,QAAQ,SAAS,kBAAkB,aAAa,mBAAmB,uBAAuB,YAAY,UAAU,SAAS,0EAA0E,aAAa,mBAAmB,YAAY,WAAW,2BAA2B,gBAAgB,eAAe,kBAAkB,OAAO,QAAQ,8EAA8E,SAAS,UAAU,mBAAmB,kBAAkB,gGAAgG,YAAY,mCAAmC,aAAa,sBAAsB,UAAU,sBAAsB,gBAAgB,qCAAqC,SAAS,UAAU,mBAAmB,kBAAkB,yCAAyC,aAAa,qCAAqC,MAAM,qCAAqC,SAAS,gCAAgC,mBAAmB,0CAA0C,gBAAgB,kBAAkB,sCAAsC,aAAa;AAC3wC,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG;AAC5D,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAQ;AAChB;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,wDAAiB,GAAG;AAC5I,uBAAuB,+DAAwB,EAAE,qKAAqK;AACtN,QAAQ,4DAAqB,WAAW,8DAAO;AAC/C,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,yIAAyI;AAChJ,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA,cAAc,OAAO,6DAAe,SAAS,8DAAO,GAAG,oBAAoB,IAAI;AAC/E;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,+BAA+B,+DAAiB;AAChD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,EAAE,EAAE,GAAG;AAChE,kBAAkB,6DAAe;AACjC,mBAAmB,8DAAO,GAAG,oBAAoB;AACjD,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,+CAA+C;AAC/H,iCAAiC,+DAAwB,EAAE,0IAA0I;AACrM,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY,OAAO,iBAAiB,KAAK,eAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,KAAK,iBAAiB,MAAM,OAAO;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,KAAK,KAAK,OAAO,SAAS,KAAK,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB,MAAM,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc,KAAK,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAsC,KAAK,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sCAAsC,KAAK,qBAAqB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+EAA+E,MAAM;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA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","file":"moodboard-src-lib-moodboard-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\nimport { moodboardRoutes } from './moodboard-routing';\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\nimport { CoreModule } from 'projects/core/src/public-api';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { CommonModule } from '@angular/common';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { CreateMoodboardPopupComponent } from './components/create-moodboard-popup/create-moodboard-popup.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ShopCommonModule } from 'projects/shop/src/projects';\nimport { ShareMBComponent } from './components/moodboard/share-mb/share-mb.component';\n\n@NgModule({\n  declarations: [\n    MoodboardListComponent,\n    MoodboardComponent,\n    CreateMoodboardComponent,\n    CreateMoodboardPopupComponent,\n    ShareMBComponent,\n  ],\n  imports: [\n    CoreModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatButtonModule,\n    CommonModule,\n    MatSelectModule,\n    MatGridListModule,\n    MatStepperModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    FormsModule,\n    MatInputModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    AgGridModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    ShopCommonModule,\n    InfiniteScrollModule,\n    RouterModule.forChild(moodboardRoutes),\n  ],\n  exports: [],\n})\nexport class MoodboardModule {}\n","<app-banner [iconSrc]=\"bannerIconImg\" [iconAltTxt]=\"bannerIconImgTxt\" \n[leftTxt]=\"'MoodBoard'\" [src]=\"bannerImg\" [altTxt]=\"bannerImgTxt\" [bottomTxt]=\"bannerBottomTxt\"></app-banner>\n<div class=\"mb\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" (click)=\"createMB()\">\n        <a mat-button  mat-raised-button><mat-icon inline=\"true\">add_circle_outline</mat-icon>\n        </a>\n        <span class=\"mb-create-text h2\">Create a new Moodboard</span>\n    </div>\n    <!-- <div class=\"vertical\" ></div> -->\n    <!-- <div fxFlex=\"40\" class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\"  fxLayoutGap=\"2rem\"> -->\n        <!-- <mat-form-field fxFlex appearance=\"outline\" class=\"select\">\n            <mat-label>Select a Project</mat-label>\n            <mat-select (selectionChange)=\"projectFilter($event.value)\">\n              <mat-option  *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</mat-option>\n            </mat-select>\n        </mat-form-field> -->\n        <!-- <select (change)=\"projectFilter($event)\">\n          <option value=\"\">Select a Project</option>\n          <option *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</option>\n        </select>\n    </div> -->\n</div>\n<mat-tab-group  color=\"accent\" class=\"tabs\" (selectedTabChange)=\"onTabChanged($event);\" mat-align-tabs=\"center\">\n    <mat-tab  *ngFor=\"let item of tabsData; index as i; \" label=\"{{item.title}}\">\n      <div fxLayout=\"row\"  fxLayoutAlign=\"center center\" >\n        <select (change)=\"projectFilter($event)\" [(ngModel)]=\"projectName\">\n          <option value=\"\">Select a Project</option>\n          <option *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</option>\n        </select>\n      </div>\n        <div class=\"tabs-container\" fxLayout=\"row wrap\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"center center\">\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\n                <div fxFlex=\"25\" class=\"tile\" >\n                    <div fxLayout=\"column\" class=\"card\" fxLayoutAlign=\"center center\">\n                      <div class=\"remove-wrapper\" *ngIf=\"selectedIndex == 1\" (click)=\"removeMB(item.sgid);\">\n                        <a class=\"fa fa-trash pointer ng-star-inserted\" style=\"float: right; margin: 10px 10px 0 0;\"></a>\n                      </div>   \n                      <img  width=\"100%\" (click)=\"mbDetails(item.sgid);\" height=\"260px\" [src]=\"item?.is_moodboard_images?.large ? item?.is_moodboard_images?.large : defaultImg\" alt=\"{{item?.boardname}}\">\n                        <div class=\"content\" (click)=\"mbDetails(item.sgid);\">\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\n                            <div class=\"h3\" >Board Name: </div>\n                            <div class=\"\" >{{item.boardname}}</div>  \n                          </div>\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\n                            <div class=\"h3\" >Created By: </div>\n                            <div class=\"\" >{{item.user?.first_name + ' ' + item.user?.last_name}}</div>\n                          </div>\n                          <div fxLayout=\"row\" *ngIf=\"isInternal\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\n                            <div class=\"h3\" >Source: </div>\n                            <div class=\"\" *ngIf=\"item.application_type == 2\">Business Inhabitr</div>\n                            <div class=\"\" *ngIf=\"item.application_type == 1\">PDM</div>\n                          </div>\n                        </div>\n                      </div>\n                </div>\n           </ng-container>\n           </div>\n    </mat-tab>\n  </mat-tab-group>\n  \n<!-- <app-tabs [data]=\"tabsData\">\n        <mat-grid-list cols=\"3\" rowHeight=\"1:1\">\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\n                <mat-grid-tile (click)=\"mbDetails(item.sgid);\" >\n                    <app-cart  cart [data]=\"item\"></app-cart>\n                </mat-grid-tile>\n            </ng-container>\n             <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile>\n            <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile> \n          </mat-grid-list>\n</app-tabs> -->\n","import { AfterContentInit, Component, ContentChildren, OnInit, QueryList } from '@angular/core';\nimport { MatTab } from '@angular/material/tabs';\nimport { Router } from '@angular/router';\nimport { ToasterService, UserService } from 'projects/core/src/public-api';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { MoodboardService } from '../../services/moodboard.service';\n\n@Component({\n  selector: 'lib-moodboard-list',\n  templateUrl: './moodboard-list.component.html',\n  styleUrls: ['./moodboard-list.component.scss']\n})\nexport class MoodboardListComponent implements OnInit {\n\n  constructor(private moodboardService:MoodboardService, \n    private router: Router , \n    private _user:UserService,\n    private _toaster: ToasterService\n    ) {}\n  bannerIconImg: any = 'assets/moodboard/images/moodboard.svg';\n  bannerIconImgTxt: any = 'Moodboard';\n  bannerImgTxt: any = 'Moodboard';\n  bannerImg: any = 'assets/moodboard/images/mb-banner.jpg';\n  bannerTxt: any = 'MoodBoard';\n  bannerBottomTxt: any = 'Style & create look from our collection of designer furniture';\n  tabsData: any[] = [{title:'All Moodboards', content: '' },{title:'My Moodboards', content: '' },{title:'Disabled Moodboards', content: '' } ];\n  tabContent: any[]= [];    \n  projectList: any[] = [];\n  projectName: any = '';\n  selectedIndex: any = 0;\n  defaultImg=\"https://inhabitr-furniture-prod.s3.amazonaws.com/noimage.jpg\";\n  isInternal:boolean = false;\n  \n  ngOnInit(): void {\n    this.getMoodBoardList();\n    this.getProjectList();\n    this.isInternal = this._user.getUser().isInternalUser();\n  }\n  mbDetails(id: any){\n    this.router.navigateByUrl('business/moodboard/'+id);\n  }\n  projectFilter(ev:any){\n    this.projectName = ev?.target.value;\n    this.onTabChanged({index: this.selectedIndex}); \n  }\n  getProjectList(){\n    this.moodboardService.getProjectList().subscribe((response:any) => {\n      this.projectList = response.moodboardProject;\n    });    \n  }\n  getMoodBoardList(){\n    let param = {supplier_id:0,project_name: this.projectName}\n    this.moodboardService.getMoodBoardList(param).subscribe((response:any) => {\n      this.tabContent = response.result;\n    });    \n  }\n  removeMB(sgid: any){\n    let param = {\"moodboard_id\":sgid,\"user_id\":this._user.getUser().getId()};\n    this.moodboardService.removeMyMB(param).subscribe((response:any) => {\n      this._toaster.success(response.message);\n      this.getMyMoodBoardList();\n    }, error => this._toaster.error('Please contact site administrator!')\n    );\n    \n  }\n  onTabChanged(ev: any){\n    this.selectedIndex = ev.index;\n    if(ev.index == 1) {\n      this.getMyMoodBoardList()\n    }\n    if(ev.index == 2) {\n      this.getDisabledMBList();\n    }\n    if(ev.index == 0) {\n      this.getMoodBoardList();\n    }\n  }  \n  createMB(){\n    this.router.navigate(['business/moodboard/create']);\n\n  }\n  getMyMoodBoardList(){\n    let param = {supplier_id:0,project_name: this.projectName}\n    this.moodboardService.getMyMoodBoardList(param).subscribe((response:any) => {\n      this.tabContent = response.result;\n    });    \n  }\n  getDisabledMBList(){\n    let param = {supplier_id:0,project_name: this.projectName}\n    this.moodboardService.getDisabledMBList(param).subscribe((response:any) => {\n      this.tabContent = response.result;\n    });    \n  }\n}","import { MatDialog } from '@angular/material/dialog';\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { QuoteCreateFormComponent } from 'projects/quote/src/lib/common/components/quote-create-form/quote-create-form.component';\nimport { AddproductComponent } from 'projects/quote/src/lib/common/components/addproduct/addproduct.component';\nimport { MoodboardService } from '../../services/moodboard.service';\nimport autoTable from 'jspdf-autotable';\n\nimport {\n  GridOptions,\n  GridReadyEvent,\n  ICellRendererParams,\n} from 'ag-grid-community';\nimport {\n  ComputationService,\n  CoreService,\n  CounterComponent,\n  ImageRendererComponent,\n  PdfService,\n  ToasterService,\n  UserService,\n} from 'projects/core/src/public-api';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  ItemTypeComponent,\n  TotalCellRendererComponent,\n} from 'projects/quote/src/public-api';\nimport jsPDF from 'jspdf';\nimport { ProductDetailsComponent } from 'projects/shop/src/projects';\nimport { MatStepper } from '@angular/material/stepper';\nimport { MatTabGroup } from '@angular/material/tabs';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport html2canvas from 'html2canvas';\nimport { ShareMBComponent } from './share-mb/share-mb.component';\n\n@Component({\n  selector: 'lib-moodboard',\n  templateUrl: './moodboard.component.html',\n  styleUrls: ['./moodboard.component.scss'],\n})\nexport class MoodboardComponent implements OnInit, AfterViewInit {\n  public mbId: any = '';\n  public userid: any = null;\n  selectedIndex = 0;\n  startCount = 0;\n  lastUserCount = 0;\n  // placeholder = 'Search Products';\n  subscription: Subscription | null = null;\n  show = false;\n\n  minRentalPrice: any = '';\n  maxRentalPrice: any = '';\n  // filter form group;\n  filterFormGroup: FormGroup = new FormGroup({});\n  @ViewChild('quickFilter', { static: true }) template: ElementRef | null =\n    null;\n  @ViewChild('stepper') private myStepper: MatStepper | null = null;\n  @ViewChild('tabsReference', { static: true })\n  tabsReference: MatTabGroup | null = null;\n\n  constructor(\n    private moodboardService: MoodboardService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private _pdf: PdfService,\n    private _router: Router,\n    private _dialog: MatDialog,\n    private _toaster: ToasterService,\n    private _user: UserService,\n    private _computationService: ComputationService,\n    private _coreService: CoreService\n  ) {\n    this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\n    this.userid = this._user.getUser().getId();\n  }\n\n  ngAfterViewInit(): void {\n    this.setProductTab(0);\n  }\n  agGrid: GridReadyEvent = {} as GridReadyEvent;\n  bannerIconImg: any = 'assets/moodboard/images/moodboard.svg';\n  bannerIconImgTxt: any = 'Moodboard';\n  moodboardDetails: any = '';\n  mbQuotesList: any = [];\n  stateList: any = [];\n  selectedQuoteIdDD: any = 0;\n  categoriesList: Subject<any[]> = new Subject();\n  catListDefault: any[] = [];\n  selectedCategory: any = null;\n  cityList: Subject<any[]> = new Subject();\n  cityListDefault: any[] = [];\n  selectedCity: any = [];\n  min_price = new FormControl('');\n  max_price = new FormControl('');\n  min_price_inventory: any = '';\n  searchTxt: any = null;\n  productdata: any = [];\n  items: any = [];\n  // min_price_change :BehaviorSubject<any> = new BehaviorSubject(null);\n  catagorydata = [\n    {\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\n      value: 'Living Room',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\n      value: 'Bedroom',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\n      value: 'Dining Room',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\n      value: 'Office',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\n      value: 'Outdoor',\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\n      value: 'Others',\n    },\n  ];\n  frameworkComponents = {\n    ImageRendererComponent: ImageRendererComponent,\n    TotalCellRendererComponent: TotalCellRendererComponent,\n    ItemTypeCellRenderer: ItemTypeComponent,\n    CounterCellRenderer: CounterComponent,\n  };\n  pinnedBottomRowData = [\n    {\n      subTotal: 'abc',\n      sgid: 'SUB TOTAL ($)',\n      is_total: '0',\n      isExtraRow: true,\n    },\n    {\n      subTotal: 'abc',\n      sgid: 'DELIVERY FEE ($)',\n      is_total: '0',\n      isExtraRow: true,\n    },\n    {\n      subTotal: 'abc',\n      sgid: 'TAXES ($)',\n      is_total: '0',\n      isExtraRow: true,\n      taxPercent: 1,\n    },\n    {\n      subTotal: 'abc',\n      sgid: 'TOTAL ($)',\n      is_total: '0',\n      isExtraRow: true,\n    },\n  ];\n\n  columnDefs = [\n    {\n      field: 'sgid',\n      width: 120,\n      headerName: '',\n      headerTooltip: '',\n      colSpan: (params: any) => (params.data.subTotal === 'abc' ? 10 : 1),\n      cellStyle: (params: any) => {\n        if (params.data.subTotal === 'abc') {\n          return { 'text-align': 'end' };\n        }\n        return '';\n      },\n    },\n    { field: 'warehouse_name', headerName: 'CITY' },\n    { field: 'sku', headerName: 'SKU' },\n    {\n      headerName: 'IMAGE',\n      cellRenderer: 'ImageRendererComponent',\n      field: 'variation.images[0].image_url.small',\n      cellStyle: {\n        padding: '0.3rem',\n      },\n      valueGetter: (params: ICellRendererParams) => {\n        return params.data?.variation?.images[0]?.image_url?.small;\n      },\n    },\n    {\n      headerName: 'PRODUCT NAME',\n      field: 'name',\n      width: '250px',\n    },\n    {\n      headerName: 'TYPE',\n      field: 'button_type',\n      cellRenderer: 'ItemTypeCellRenderer',\n      valueGetter: (params: ICellRendererParams) => {\n        return params.data.button_type === 0 ? 'Rent' : 'Buy';\n      },\n    },\n    {\n      headerName: 'QTY',\n      field: 'is_qty',\n      cellRenderer: 'CounterCellRenderer',\n    },\n    {\n      headerName: 'BUY PRICE ($)',\n      field: 'buy_price',\n      valueGetter: (params: ICellRendererParams) => {\n        return params.data.button_type === 1 ? params.data.buy_price : 'NA';\n      },\n    },\n    {\n      headerName: 'RENTAL PRICE ($) /MONTH',\n      field: 'price',\n      cellRenderer: (params: ICellRendererParams) => {\n        return params.data.button_type === 0 ? params.value : 'NA';\n      },\n    },\n    {\n      headerName: 'MONTHS',\n      field: 'months',\n    },\n    {\n      headerName: 'TOTAL ($)',\n      field: 'is_total',\n      cellRenderer: 'TotalCellRendererComponent',\n    },\n  ];\n  rowData: Observable<any[]> = new Observable();\n  gridOptions: GridOptions = {\n    onGridReady: (api: GridReadyEvent) => {\n      this.agGrid = api;\n      this.onGridReady(api);\n    },\n    rowHeight: 100,\n    context: this,\n    headerHeight: 100,\n    getRowHeight: (params: any) => {\n      return params?.data?.isExtraRow ? 50 : 100;\n    },\n  };\n  defaultColDef = {\n    wrapText: true,\n    cellClass: 'grid-cell',\n    cellStyle: {\n      'line-height': 'normal',\n      'align-items': 'center',\n      'justify-content': 'center',\n      display: 'flex',\n      padding: '0 0.5rem',\n    },\n  };\n  onGridReady(evt: GridReadyEvent) {\n    this.agGrid = evt;\n    evt.api.sizeColumnsToFit();\n    this.rowData = this.getMoodboardSummary();\n  }\n\n  counterFComponentUpdate(params: ICellRendererParams) {\n    this.moodboardService.updateMDItem(params.data).subscribe((data) => {\n      this.refresh();\n    });\n  }\n  getMoodboardSummary<T>(): Observable<T> {\n    return this.moodboardService.getMBSummary<T>(this.mbId).pipe(\n      map((data: any) => {\n        this.productdata = data;\n        this.productdata.forEach((elem: any, index: number) => {\n          this._coreService\n            .getBase64Image(elem.variation?.images[0]?.image_url?.small)\n            .subscribe((res) => {\n              elem.imagee = 'data:image/jpeg;base64,' + res;\n              this.productdata[index].variation.images[0].image_url['small64'] =\n                'data:image/jpeg;base64,' + res.imageurl;\n            });\n        });\n        return data.map((item: any, index: number) => {\n          item.sgid = index + 1;\n          return item;\n        });\n      }),\n      tap((x: any) => {\n        this.agGrid.api.redrawRows();\n      })\n    );\n  }\n  openModal(templateRef: any) {\n    let dialogRef = this._dialog.open(templateRef, {\n      width: '90%',\n      maxHeight: '85vh',\n      disableClose: true,\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log('The dialog was closed');\n    });\n  }\n  closeModal() {\n    this._dialog.closeAll();\n  }\n  updateBottomData(data: any, sub: string) {\n    this.pinnedBottomRowData[0].is_total = sub;\n    this.pinnedBottomRowData[1].is_total = data?.delivery_fee;\n    this.pinnedBottomRowData[2].sgid =\n      'TAXES (' + data?.states?.sale_tax_rate + '%) ($)';\n    this.pinnedBottomRowData[2].taxPercent = data?.states?.sale_tax_rate;\n    this.pinnedBottomRowData[2].is_total = data?.tax_amount;\n    this.pinnedBottomRowData[3].is_total = data?.net_total;\n  }\n\n  ngOnInit(): void {\n    this.getMoodboard();\n    this.getMBQuote(this.mbId);\n  }\n  scroll(el: HTMLElement) {\n    el.scrollIntoView();\n  }\n  requestRendering() {\n    this.moodboardService\n      .requestRendering({ moodboard_id: this.mbId })\n      .subscribe(\n        (response: any) => {\n          this._toaster.success('Request ' + response.result);\n        },\n        (error) => {\n          this._toaster.error('Request failed. please try later');\n        }\n      );\n  }\n  selectedQuote(ev: any) {\n    this.selectedQuoteIdDD = ev.target.value;\n  }\n\n  getMBQuote(mbId: any) {\n    this.moodboardService.getMBQuote(mbId).subscribe((response: any) => {\n      this.mbQuotesList = response.quote;\n      this.selectedQuoteIdDD = response.quote[0]?.sgid;\n    });\n  }\n  addToQuote() {\n    this._dialog\n      .open(AddproductComponent, {\n        height: '80%',\n        width: '50%',\n        data: {\n          isDialog: true,\n          quoteId: this.selectedQuoteIdDD,\n          mbid: this.mbId,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {\n        console.log(data);\n      });\n  }\n  getMoodboard() {\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response: any) => {\n      this.moodboardDetails = response;\n      this.updateBottomData(this.moodboardDetails.moodboard, this.moodboardDetails.moodboard.sub_total);\n    });\n  }\n\n  editMB() {\n    this.router.navigateByUrl('business/moodboard/edit/' + this.mbId);\n  }\n  copyMB() {\n    this.router.navigateByUrl('business/moodboard/create/' + this.mbId);\n  }\n  shareMB() {\n    this._dialog\n      .open(ShareMBComponent)\n      .afterClosed()\n      .subscribe((resp) => {\n        console.log(resp);\n      });\n  }\n\n  createNewQuote() {\n    this._dialog\n      .open(QuoteCreateFormComponent, {\n        height: '500px',\n        width: '800px',\n        data: {\n          isDialog: true,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {\n        console.log(data);\n      });\n  }\n  deleteItem(mbItem: any) {\n    let obj = {\n      button_type: mbItem.button_type,\n      moodboard_id: mbItem.moodboard_id,\n      product_id: mbItem.product_id,\n      sku: mbItem.sku,\n      warehouse_id: mbItem.warehouse_id,\n      user_id: this._user.getUser().getId(),\n    };\n    this.moodboardService.deleteItemToMoodboard(obj).subscribe(\n      (data: any) => {\n        if (data.statusCode == 200) {\n          this._toaster.success(data?.result);\n          this.getMoodboard();\n          this.onGridReady(this.agGrid);\n        } else this._toaster.error(data.result);\n      },\n      (error) => this._toaster.error('Fail to add')\n    );\n  }\n\n  // generateMDPdf() {\n  //   let data = this._pdf.getAgGridRowsAndColumns(this.agGrid);\n  //   let imagesObs = this._pdf.getAllTableBase64Images(data?.rows as [], 3);\n  //   imagesObs.subscribe((images) => {\n  //     let doc = new jsPDF();\n  //     doc.text('Moodboard Information', 10, 15);\n  //     let info = [\n  //       ['Project Name:', this.moodboardDetails?.moodboard?.project_name],\n  //       ['Company Name:', this.moodboardDetails?.moodboard?.company_name],\n  //       ['Moodboard :', this.moodboardDetails?.moodboard?.sgid],\n  //       ['State:', this.moodboardDetails?.moodboard?.state.name],\n  //       ['Moodboard Name:', this.moodboardDetails?.moodboard?.boardname],\n  //       ['City:', this.moodboardDetails?.moodboard?.city],\n  //       ['Zipcode:', this.moodboardDetails?.moodboard?.zipcode],\n  //     ];\n  //     autoTable(doc, {\n  //       ...this._pdf.getInformationTableUserOptions(),\n  //       body: info,\n  //     });\n\n  //     doc.addPage();\n  //     doc.text('Moodboard Summary', 10, 15);\n  //     autoTable(doc, {\n  //       ...this._pdf.getSummaryTableUserOptions(),\n  //       columnStyles: {\n  //         0: { cellWidth: 9 },\n  //         1: { cellWidth: 20 },\n  //         2: { cellWidth: 10 },\n  //         3: { cellWidth: 20 },\n  //         4: { cellWidth: 30 },\n  //         5: { cellWidth: 15 },\n  //         6: { cellWidth: 10 },\n  //         7: { cellWidth: 20 },\n  //         8: { cellWidth: 20 },\n  //         11: { cellWidth: 20 },\n  //       },\n  //       columns: data.columns,\n  //       body: data?.rows?.map((r: any) => {\n  //         if (!parseInt(r[0])) {\n  //           let temp = [];\n  //           temp.push({ content: r[0], colSpan: r.length - 1 });\n  //           temp.push(r[r.length - 1]);\n  //           r = temp;\n  //         }\n  //         return r;\n  //       }),\n  //       willDrawCell: (data) => {\n  //         if (data.section === 'body' && data.column.index === 3) {\n  //           data.cell.raw = '';\n  //           data.cell.text = [];\n  //         }\n  //       },\n  //       didDrawCell: (data) => {\n  //         if (data.section === 'body' && data.column.index === 3) {\n  //           var base64Img = 'data:image/jpeg;base64,' + images[data.row.index];\n  //           doc.addImage(\n  //             base64Img,\n  //             'JPEG',\n  //             data.cell.x + 1,\n  //             data.cell.y + 1,\n  //             18,\n  //             18\n  //           );\n  //         }\n  //       },\n  //     });\n  //     doc.save('moodboard.pdf');\n  //   });\n  // }\n  async generateMDPdf() {\n    let vm = this;\n    // let data = this._pdf.getAgGridRowsAndColumns(this.agGrid);\n    // data.columns.shift();\n    // data.columns.unshift('S.NO');\n    let img = document.getElementsByClassName('header-img')[0] as any;\n    const block_total = await html2canvas(img);\n    const block_canvas = block_total.toDataURL('image/png');\n    // let imagesObs = this._pdf.getAllTableBase64Images(data?.rows as [], 3);\n    // imagesObs.subscribe((images) => {\n    let doc = new jsPDF();\n    const pdf_font = this._pdf.addFont();\n    const pdf_font_bold = this._pdf.addBoldFont();\n    doc.addFileToVFS(pdf_font.name, pdf_font.value);\n    doc.addFileToVFS(pdf_font_bold.name, pdf_font_bold.value);\n    doc.addFont('Poppins.ttf', 'Poppins', 'normal');\n    doc.addFont('Poppins-Bold.ttf', 'Poppins-Bold', 'bold');\n    doc.addImage(block_canvas, 'PNG', 8, 5, 40, 10);\n    doc.setFont('Poppins-Bold', 'bold');\n    doc.setFontSize(12);\n    doc.text('Moodboard Information', 8, 25);\n    let info = [\n      [\n        'Project Name:',\n        this.moodboardDetails?.moodboard?.project_name,\n        'Company Name:',\n        this.moodboardDetails?.moodboard?.company_name,\n      ],\n      [\n        'Moodboard:',\n        this.moodboardDetails?.moodboard?.sgid,\n        'State:',\n        this.moodboardDetails?.moodboard?.state.name,\n      ],\n      [\n        'Moodboard Name:',\n        this.moodboardDetails?.moodboard?.boardname,\n        'City:',\n        this.moodboardDetails?.moodboard?.city,\n      ],\n      ['Zipcode:', this.moodboardDetails?.moodboard?.zipcode],\n      [],\n    ];\n    autoTable(doc, {\n      ...this._pdf.getInformationTableUserOptions(),\n      startY: 29,\n      margin: { left: 7 },\n      showHead: 'firstPage',\n      body: info,\n      styles: { fontSize: 8 },\n      columnStyles: {\n        0: { cellWidth: 40, font: 'Poppins-Bold', fontStyle: 'bold' },\n        1: { cellWidth: 30, font: 'Poppins', fontStyle: 'normal' },\n        2: { cellWidth: 30, font: 'Poppins-Bold', fontStyle: 'bold' },\n        3: { font: 'Poppins', fontStyle: 'normal' },\n      },\n    });\n    doc.text('Product Details', 8, 67).setFontSize(12);\n    autoTable(doc, {\n      html: '#printImage',\n      margin: { left: 8 },\n      // bodyStyles: { minCellHeight: 60, minCellWidth: 60 },\n      startY: 73,\n      theme: 'plain',\n      styles: { valign: 'middle', cellPadding: 1 },\n      tableWidth: 'auto',\n      headStyles: {\n        valign: 'middle',\n        halign: 'left',\n        fontSize: 8,\n        font: 'Poppins-Bold',\n        fontStyle: 'bold',\n        cellPadding: 2,\n      },\n      bodyStyles: {\n        fontSize: 9,\n        font: 'Poppins',\n        fontStyle: 'normal',\n      },\n      columnStyles: {\n        0: {\n          cellWidth: 40,\n          minCellHeight: 30,\n          valign: 'middle',\n          halign: 'left',\n        },\n        1: { cellWidth: 40, valign: 'top', halign: 'left' },\n        2: { cellWidth: 40, valign: 'top', halign: 'left' },\n      },\n      didDrawCell: function (data) {\n        if (data.cell.section === 'body' && data.column.index === 0) {\n          let td: any = data.cell.raw;\n          if (td) {\n            let img = td.getElementsByTagName('img')[0];\n            let product = td.getElementsByClassName('productName')[0];\n            var dim = data.cell.height - data.cell.padding('vertical');\n            doc.addImage(img.src, 'jpeg', data.cell.x, data.cell.y, 20, 20);\n          }\n        }\n      },\n      willDrawCell: function (data) {\n        let td = data.cell.raw;\n      },\n    });\n    doc.save('moodboard.pdf');\n    // });\n  }\n\n  async generateMDQuotePdf() {\n    let vm = this;\n    let data = this._pdf.getAgGridRowsAndColumns(this.agGrid);\n    data.columns.shift();\n    data.columns.unshift('S.NO');\n    let img = document.getElementsByClassName('header-img')[0] as any;\n    const block_total = await html2canvas(img);\n    const block_canvas = block_total.toDataURL('image/png');\n    let imagesObs = this._pdf.getAllTableBase64Images(data?.rows as [], 3);\n    imagesObs.subscribe((images) => {\n      let doc = new jsPDF();\n      const pdf_font = this._pdf.addFont();\n      const pdf_font_bold = this._pdf.addBoldFont();\n      doc.addFileToVFS(pdf_font.name, pdf_font.value);\n      doc.addFileToVFS(pdf_font_bold.name, pdf_font_bold.value);\n      doc.addFont('Poppins.ttf', 'Poppins', 'normal');\n      doc.addFont('Poppins-Bold.ttf', 'Poppins-Bold', 'bold');\n      doc.addImage(block_canvas, 'PNG', 8, 5, 40, 10);\n      doc.setFont('Poppins-Bold', 'bold');\n      doc.setFontSize(12);\n      doc.text('Moodboard Information', 8, 25);\n      let info = [\n        [\n          'Project Name:',\n          this.moodboardDetails?.moodboard?.project_name,\n          'Company Name:',\n          this.moodboardDetails?.moodboard?.company_name,\n        ],\n        [\n          'Moodboard:',\n          this.moodboardDetails?.moodboard?.sgid,\n          'State:',\n          this.moodboardDetails?.moodboard?.state.name,\n        ],\n        [\n          'Moodboard Name:',\n          this.moodboardDetails?.moodboard?.boardname,\n          'City:',\n          this.moodboardDetails?.moodboard?.city,\n        ],\n        ['Zipcode:', this.moodboardDetails?.moodboard?.zipcode],\n        [],\n      ];\n      autoTable(doc, {\n        ...this._pdf.getInformationTableUserOptions(),\n        startY: 29,\n        margin: { left: 7 },\n        showHead: 'firstPage',\n        body: info,\n        styles: { fontSize: 8 },\n        columnStyles: {\n          0: { cellWidth: 40, font: 'Poppins-Bold', fontStyle: 'bold' },\n          1: { cellWidth: 30, font: 'Poppins', fontStyle: 'normal' },\n          2: { cellWidth: 30, font: 'Poppins-Bold', fontStyle: 'bold' },\n          3: { font: 'Poppins', fontStyle: 'normal' },\n        },\n      });\n      doc.text('Product Details', 8, 67).setFontSize(12);\n      let productImages = this._pdf.getAllTableBase64Images(\n        this.productdata as [],\n        3\n      );\n      autoTable(doc, {\n        html: '#printImage',\n        margin: { left: 8 },\n        // bodyStyles: { minCellHeight: 60, minCellWidth: 60 },\n        startY: 73,\n        theme: 'plain',\n        styles: { valign: 'middle', cellPadding: 1 },\n        tableWidth: 'auto',\n        headStyles: {\n          valign: 'middle',\n          halign: 'left',\n          fontSize: 8,\n          font: 'Poppins-Bold',\n          fontStyle: 'bold',\n          cellPadding: 2,\n        },\n        bodyStyles: {\n          fontSize: 9,\n          font: 'Poppins',\n          fontStyle: 'normal',\n        },\n        columnStyles: {\n          0: {\n            cellWidth: 40,\n            minCellHeight: 30,\n            valign: 'middle',\n            halign: 'left',\n          },\n          1: { cellWidth: 40, valign: 'top', halign: 'left' },\n          2: { cellWidth: 40, valign: 'top', halign: 'left' },\n        },\n        didDrawCell: function (data) {\n          if (data.cell.section === 'body' && data.column.index === 0) {\n            let td: any = data.cell.raw;\n            if (td) {\n              let img = td.getElementsByTagName('img')[0];\n              let product = td.getElementsByClassName('productName')[0];\n              var dim = data.cell.height - data.cell.padding('vertical');\n              doc.addImage(img.src, 'jpeg', data.cell.x, data.cell.y, 20, 20);\n            }\n          }\n        },\n        willDrawCell: function (data) {\n          let td = data.cell.raw;\n        },\n      });\n      doc.addPage();\n      doc.text('Moodboard Summary', 10, 15, { align: 'left' });\n      autoTable(doc, {\n        ...this._pdf.getSummaryTableUserOptions(),\n        showHead: 'firstPage',\n        rowPageBreak: 'avoid',\n        columnStyles: {\n          0: { cellWidth: 11 },\n          1: { cellWidth: 20 },\n          2: { cellWidth: 18 },\n          3: { cellWidth: 20 },\n          4: { cellWidth: 30 },\n          5: { cellWidth: 15 },\n          6: { cellWidth: 14 },\n          7: { cellWidth: 20 },\n          8: { cellWidth: 20 },\n          11: { cellWidth: 12 },\n          12: { cellWidth: 18 },\n        },\n        columns: data.columns,\n        body: data?.rows?.map((r: any) => {\n          if (!parseInt(r[0])) {\n            let temp = [];\n            temp.push({ content: r[0], colSpan: r.length - 1 });\n            temp.push(r[r.length - 1]);\n            r = temp;\n          }\n          return r;\n        }),\n        willDrawCell: (data: any) => {\n          if (data.section === 'body' && data.column.index === 3) {\n            data.cell.raw = '';\n            data.cell.text = [];\n          }\n          if (data.section === 'body' && data.column.index === 10) {\n            data.cell.text = `$${data.cell.text}`;\n          }\n        },\n        didDrawCell: (data) => {\n          if (data.section === 'body' && data.column.index === 3) {\n            var base64Img = 'data:image/jpeg;base64,' + images[data.row.index];\n            doc.addImage(\n              base64Img,\n              'JPEG',\n              data.cell.x + 1,\n              data.cell.y + 1,\n              18,\n              18\n            );\n          }\n        },\n      });\n      doc.save('moodboard.pdf');\n    });\n  }\n  productDetails(item: any) {\n    this._dialog\n      .open(ProductDetailsComponent, {\n        maxWidth: '95vw',\n        height: '90%',\n        width: '100%',\n        disableClose: true,\n        data: {\n          forDialog: true,\n          forHitler: true,\n          forMoodboard:\n            this._user.getUser().getId() ===\n            this.moodboardDetails?.moodboard?.userid,\n          forQuote: false,\n          item: item,\n          mb: this.moodboardDetails?.moodboard,\n          moodboardId: this.moodboardDetails?.moodboard?.id,\n        },\n      })\n      .afterClosed()\n      .subscribe((data) => {\n        if (data && data.event) {\n          this.getMoodboard();\n          this.onGridReady(this.agGrid);\n          this.setProductTab(0);\n        }\n      });\n  }\n\n  increaseQuantity(value: any, md: any) {\n    if (value >= 1 && value <= md.total_warehouse_quantity) {\n      md.qty = md.is_qty = value;\n      let price = md.button_type == 1 ? md.buy_price : md.price;\n      md.is_total = this._computationService.getProductTotalAmount(\n        price,\n        0,\n        md.qty\n      );\n      this.moodboardService.updateMDItem(md).subscribe((data) => {\n        this.refresh();\n      });\n    }\n  }\n\n  refresh() {\n    this.getMoodboard();\n    this.onGridReady(this.agGrid);\n  }\n\n  public goto(index: number): void {\n    if (index == 0) return; // First step is not selected anymore -ok\n    this.selectedIndex = index;\n  }\n\n  setProductTab(index: number) {\n    const tabGroup = this.tabsReference;\n    if (!tabGroup || !(tabGroup instanceof MatTabGroup)) return;\n    const tabCount = tabGroup._tabs.length;\n    tabGroup.selectedIndex = index;\n  }\n\n  addMoodboardToCart() {\n    const products = this.moodboardDetails?.moodboard_items\n      ? this.moodboardDetails?.moodboard_items.length\n      : 0;\n    if (!products) { this._toaster.error(\"Add Products before add to cart\"); return }\n    const obj = {\n      moodboard_id: +this.mbId,\n      user_id: this.userid,\n      units: null\n    }\n    this.moodboardService.addMoodboardToCart(obj).subscribe((data: any) => {\n      if (data) {\n        this._toaster.success(`${data.message}`);\n        this._coreService.getCartCount();\n      }\n    }, (err) => {\n      this._toaster.error(\"Failed to add\")\n    })\n  }\n}\n","<div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n  <div class=\"mb-details\" fxLayout=\"row\" fxLayoutAlign=\" stretch\">\n    <div\n      class=\"mb-details__icon\"\n      fxFlex=\"30\"\n      fxLayout=\"column\"\n      fxLayoutAlign=\"center center\"\n    >\n      <span class=\"text-upper\">{{ bannerIconImgTxt }}</span>\n      <div class=\"img-box\">\n        <img [src]=\"bannerIconImg\" alt=\"{{ bannerIconImgTxt }}\" srcset=\"\" />\n      </div>\n    </div>\n    <div\n      class=\"mb-details__info\"\n      fxFlex=\"80\"\n      fxLayout=\"row wrap\"\n      fxLayoutAlign=\"start\"\n    >\n      <div fxFlex=\"50\" *ngIf=\"moodboardDetails?.moodboard\">\n        <span class=\"label\">Project Name: </span>\n        <span class=\"value\">{{\n          moodboardDetails?.moodboard?.project_name\n        }}</span>\n      </div>\n      <div fxFlex=\"50\">\n        <span class=\"label\">Company Name: </span>\n        <span class=\"value\">{{\n          moodboardDetails?.moodboard?.company_name\n        }}</span>\n      </div>\n      <div fxFlex=\"50\">\n        <span class=\"label\">Moodboard#: </span>\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.sgid }}</span>\n      </div>\n      <div fxFlex=\"50\">\n        <span class=\"label\">Customer City: </span>\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.city }}</span>\n      </div>\n      <div fxFlex=\"50\">\n        <span class=\"label\">Moodboard Name: </span>\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.boardname }}</span>\n      </div>\n      <div fxFlex=\"50\">\n        <span class=\"label\">Zipcode: </span>\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.zipcode }}</span>\n      </div>\n\n      <div fxFlex=\"60\" fxLayoutGap=\"1rem\">\n        <button\n          class=\"box-none\"\n          mat-mini-fab\n          color=\"accent\"\n          (click)=\"copyMB()\"\n        >\n          <mat-icon>file_copy</mat-icon>\n        </button>\n        <button\n          class=\"box-none\"\n          mat-mini-fab\n          color=\"accent\"\n          (click)=\"editMB()\"\n        >\n          <mat-icon>edit icon</mat-icon>\n        </button>\n        <button\n        class=\"box-none\"\n        mat-mini-fab\n        color=\"accent\"\n        (click)=\"shareMB()\"\n      >\n        <mat-icon>share icon</mat-icon>\n      </button>\n      </div>\n    </div>\n    <div\n      class=\"mb-details__info\"\n      fxFlex=\"20\"\n      fxLayout=\"row wrap\"\n      fxLayoutAlign=\"start\"\n    >\n      <div fxFlex=\"80\">\n        <ng-container *ngFor=\"let item of catagorydata; let i = index\">\n          <mat-card\n            *ngIf=\"\n              item.value == moodboardDetails?.moodboard?.moodboard_type_name\n            \"\n            class=\"example-card\"\n          >\n            <img\n              mat-card-image\n              src=\"{{ item.imageSrc }}\"\n              alt=\"{{ item.value }}\"\n            />\n            <mat-card-content>\n              <div\n                fxLayout=\"row\"\n                class=\"text\"\n                fxLayoutGap=\"1rem\"\n                fxLayoutAlign=\"start center\"\n              >\n                <div fxLayout=\"row\" class=\"text-lable\">{{ item.value }}</div>\n              </div>\n            </mat-card-content>\n          </mat-card>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n<div>\n  <mat-tab-group\n    color=\"accent\"\n    class=\"tabs\"\n    mat-align-tabs=\"center\"\n    #tabsReference\n  >\n    <mat-tab label=\"MY MOODBOARD\">\n      <div\n        class=\"mb-details margin-top30 moodeboard-section\"\n        fxLayout=\"column\"\n        fxLayoutGap=\"2rem\"\n        fxLayoutAlign=\"stretch\"\n      >\n        <div\n          class=\"head\"\n          fxFlex=\"100\"\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n        >\n          <div\n            class=\"head\"\n            fxLayout=\"row\"\n            fxLayoutGap=\"1rem\"\n            fxLayoutAlign=\"space-between center\"\n          >\n            <button\n              mat-button\n              color=\"accent\"\n              class=\"btn-chip-label\"\n              aria-label=\"\"\n            >\n              {{ moodboardDetails?.moodboard?.project_name }}\n            </button>\n            <button\n              mat-button\n              color=\"accent\"\n              aria-label=\"\"\n              class=\"btn-chip-label\"\n            >\n              No of products :\n              {{\n                moodboardDetails?.moodboard_items\n                  ? moodboardDetails?.moodboard_items.length\n                  : \"0\"\n              }}\n            </button>\n          </div>\n          <div\n            class=\"head\"\n            fxLayout=\"row\"\n            fxLayoutGap=\"1rem\"\n            fxLayoutAlign=\"space-between center\"\n          >\n            <button\n              mat-button\n              color=\"accent\"\n              class=\"btn-chip-md\"\n              style=\"background-color: #2c2c2c; color: #fff\"\n              aria-label=\"\"\n              (click)=\"requestRendering()\"\n            >\n              Request Rendering\n            </button>\n            <button\n              mat-button\n              color=\"accent\"\n              aria-label=\"\"\n              (click)=\"generateMDQuotePdf()\"\n              class=\"btn-chip-md\"\n            >\n              Generate Moodboard quote PDF\n            </button>\n            <button\n              mat-button\n              color=\"accent\"\n              aria-label=\"\"\n              (click)=\"generateMDPdf()\"\n              class=\"btn-chip-md\"\n            >\n              Generate Moodboard PDF\n            </button>\n          </div>\n        </div>\n        <div\n          class=\"product-wrapper\"\n          fxLayout=\"row wrap\"\n          fxLayoutGap=\"1rem\"\n          fxLayoutGap=\"10px grid\"\n          fxLayoutAlign=\"start center\"\n        >\n          <div class=\"\">\n            <div\n              class=\"cardImg add\"\n              (click)=\"setProductTab(1)\"\n              style=\"min-height: 300px\"\n            >\n              <div class=\"add-block\">\n                <img\n                  class=\"add-icon\"\n                  src=\"assets/moodboard/images/addProduct.svg\"\n                />\n                <div>ADD PRODUCT</div>\n              </div>\n            </div>\n          </div>\n          <ng-container\n            *ngFor=\"\n              let mbItem of moodboardDetails?.moodboard_items;\n              let i = index\n            \"\n          >\n            <div class=\"\">\n              <div class=\"cardImg\">\n                <div class=\"badge\" style=\"text-align: center; width: 40%\">\n                  {{ mbItem.button_type == 0 ? \"Rent\" : \"Buy\" }}\n                </div>\n                <img\n                  src=\"{{ mbItem?.variation.images[0].image_url.large }}\"\n                  alt=\"{{ mbItem.name }}\"\n                />\n                <div\n                  class=\"title\"\n                  height=\"100px\"\n                  fxLayout=\"row\"\n                  fxLayoutAlign=\"center center\"\n                >\n                  {{ mbItem.name }}\n                </div>\n                <div\n                  class=\"action\"\n                  fxLayout=\"row\"\n                  fxLayoutAlign=\"center stretch\"\n                >\n                  <app-counter\n                    fxFlex=\"50\"\n                    [min]=\"1\"\n                    [readOnly]=\"true\"\n                    [max]=\"mbItem?.total_warehouse_quantity\"\n                    [counter]=\"mbItem?.qty\"\n                    (counterChange)=\"increaseQuantity($event, mbItem)\"\n                  ></app-counter>\n                  <mat-icon\n                    style=\"cursor: pointer; color: #a8a8a8\"\n                    *ngIf=\"userid == mbItem?.userid\"\n                    (click)=\"deleteItem(mbItem)\"\n                    >delete</mat-icon\n                  >\n                </div>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n        <div\n          class=\"head margin-top30\"\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n        >\n          <div\n            class=\"head\"\n            fxLayout=\"row\"\n            fxLayoutGap=\"2rem\"\n            fxLayoutAlign=\"space-between center\"\n          >\n            <select (change)=\"selectedQuote($event)\">\n              <option *ngFor=\"let qoute of mbQuotesList\" [value]=\"qoute.sgid\">\n                {{ qoute.sgid }}-{{ qoute.name }}\n              </option>\n            </select>\n            <div\n              class=\"head\"\n              fxLayout=\"row\"\n              fxLayoutGap=\"1rem\"\n              fxLayoutAlign=\"space-between center\"\n            >\n              <button\n                (click)=\"addToQuote()\"\n                mat-button\n                color=\"accent\"\n                class=\"btn-yellow-quote\"\n                aria-label=\"\"\n              >\n                ADD TO QUOTE\n              </button>\n              <button\n                mat-button\n                color=\"accent\"\n                class=\"btn-yellow-quote\"\n                aria-label=\"\"\n                (click)=\"createNewQuote()\"\n              >\n                CREATE NEW QUOTE\n              </button>\n              <button\n              mat-flat-button\n                color=\"accent\"\n                class=\"btn-yellow-quote\"\n                [disabled]=\"(this.moodboardDetails?.moodboard_items && this.moodboardDetails?.moodboard_items.length)\n                ? false\n                : true\"\n                aria-label=\"\"\n                (click)=\"addMoodboardToCart()\"\n              >\n                ADD TO CART\n              </button>\n            </div>\n          </div>\n          <div\n            class=\"head\"\n            fxLayout=\"row\"\n            fxLayoutAlign=\"space-between center\"\n          ></div>\n        </div>\n      </div>\n    </mat-tab>\n    <mat-tab label=\"ADD PRODUCTS\">\n      <lib-shop\n        (productClick)=\"productDetails($event)\"\n        [source]=\"'MD'\"\n        [hLimit]=\"20\"\n      ></lib-shop>\n    </mat-tab>\n    <mat-tab disabled>\n      <!-- <ng-template mat-tab-label>\n        <button\n          mat-raised-button\n          type=\"button\"\n          class=\"summary_btn_position hide-box-shadow\"\n          (click)=\"scroll(mbsummary)\"\n          color=\"accent\"\n          aria-label=\"\"\n        >\n          View Moodboard Summary\n        </button>\n      </ng-template> -->\n    </mat-tab>\n  </mat-tab-group>\n</div>\n<div\n  class=\"mb-summary\"\n  #mbsummary\n  fxLayout=\"column\"\n  fxLayoutAlign=\"start stretch\"\n>\n  <!-- <div class=\"mb-summary__info\" fxLayout=\"column\" fxLayoutAlign=\"start start\">\n    <div><span class=\"mb-summary__info--value\">MOODBOARD SUMMARY</span></div>\n    <div\n      class=\"mb-summary__info\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start start\"\n      fxLayoutGap=\"2rem\"\n    >\n      <div>\n        <span class=\"mb-summary__info--label\">Customer City :</span>\n        <span class=\"mb-summary__info--value\">\n          {{ moodboardDetails?.moodboard?.city }}</span\n        >\n      </div>\n      <div>\n        <span class=\"mb-summary__info--label\">Zipcode:</span>\n        <span class=\"mb-summary__info--value\">{{\n          moodboardDetails?.moodboard?.zipcode\n        }}</span>\n      </div>\n    </div>\n  </div> -->\n  <span id=\"refresh\" (click)=\"refresh()\"></span>\n  <ag-grid-angular\n    [gridOptions]=\"gridOptions\"\n    style=\"height: 600px; width: 100%; display: none;\"\n    class=\"ag-theme-alpine quotes-table\"\n    [rowData]=\"rowData | async\"\n    [frameworkComponents]=\"frameworkComponents\"\n    [pinnedBottomRowData]=\"pinnedBottomRowData\"\n    [defaultColDef]=\"defaultColDef\"\n    [columnDefs]=\"columnDefs\"\n  >\n  </ag-grid-angular>\n  <div\n    class=\"mb-summary__actions\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"center\"\n    fxLayoutGap=\"2rem\"\n  >\n    <ng-content [select]=\"actions\"> </ng-content>\n  </div>\n</div>\n\n<table\n  class=\"table table-bordered edit-table bg-white d-none\"\n  style=\"display: none\"\n  id=\"printImage\"\n>\n  <thead>\n    <tr>\n      <td>Image</td>\n      <td>Name</td>\n      <td>Dimension</td>\n    </tr>\n  </thead>\n  <tbody style=\"text-align: center\">\n    <tr *ngFor=\"let row of productdata\">\n      <td scope=\"col pointer\">\n        <img\n          id=\"printImgImg\"\n          src=\"{{ row?.imagee }}\"\n          height=\"100\"\n          width=\"100\"\n          class=\"table_img\"\n        />\n      </td>\n      <td id=\"printImgPN\" class=\"productName\">{{ row.name | uppercase }}</td>\n      <td id=\"printImgPD\" class=\"productName\">\n        {{ row?.variation?.dimension }}\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MoodboardService } from '../../services/moodboard.service';\nimport { ToasterService, UserService } from 'projects/core/src/public-api';\nimport { QuoteService } from 'projects/quote/src/public-api';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'lib-create-moodboard',\n  templateUrl: './create-moodboard.component.html',\n  styleUrls: ['./create-moodboard.component.scss']\n})\nexport class CreateMoodboardComponent implements OnInit {\n  bannerIconImg: any = 'assets/moodboard/images/mb.png';\n  bannerIconImgTxt: any = 'Moodboard';\n  bottomTxt: any = 'Style & create look from our collection of designer furniture';\n  mbCreateForm: FormGroup;\n  stateList: any = [];\n  mbTypeList: any = [];\n  showPDropdown: any = false;\n  showDropdown: any = false;\n  dCompanyList: any = [];\n  companyList: any = [];\n  projectList: any = [];\n  selectedCompany: any = '';\n  selectedProject: any = '';\n\n  catagorydata = [{\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\n      value: 'Living Room',\n      type_id: 1\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\n      value: 'Bedroom',\n      type_id: 2\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\n      value: 'Dining Room',\n      type_id: 3\n    },\n\n    {\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\n      value: 'Office',\n      type_id: 4\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\n      value: 'Outdoor',\n      type_id: 5\n    },\n    {\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\n      value: 'Others',\n      type_id: 6\n    }\n  ]\n  mbId: any = null;\n  currentPage: any = '';\n  boardname: any = '';\n  constructor(public fb: FormBuilder, private moodboardService:MoodboardService,\n    public _user: UserService, private _toster: ToasterService,private _quoteService: QuoteService,\n    private activatedRoute: ActivatedRoute, private router: Router,\n    private _location: Location) {\n    this.mbCreateForm = this.fb.group({\n                          moodboardName: ['', Validators.required],\n                          moodboardType: ['', Validators.required],\n                          moodboardCompany: [''],\n                          moodboardProjectName: [''],\n                          company_id: [''],\n                          project_id: [''],\n                          moodboardState: ['', Validators.required],\n                          moodboardCity: ['', Validators.required],\n                          moodboardZip: ['', Validators.required]\n                        });\n      this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\n      this.currentPage = this.router.url.split('/')[3];                  \n     }\n  ngOnInit(): void {\n    this.getStates();\n    this.getMoodBoardType();  \n    this.getcompanyByUserMoodboard();\n    if(this.mbId != null){\n      this.getMoodboard();\n    }\n    this.getCompanyList();\n\n  }\n  getMoodBoardType(){\n    this.moodboardService.getMoodBoardType().subscribe((response:any) => {\n      this.mbTypeList = response.result;\n      this.catagorydata = this.mbTypeList.map((item: any, i: any) => Object.assign({}, item, this.catagorydata[i]));\n    });    \n  }\n  getcompanyByUserMoodboard(){\n    this.moodboardService.getcompanyByUserMoodboard().subscribe((response:any) => {\n      this.mbCreateForm.patchValue({moodboardCompany:response.result[0].company});\n    });    \n  }\n\n  getCompanyList() {\n    this._quoteService.getCompanyList().subscribe((data: any) => {\n      if(typeof data.result == 'string'){\n        this.companyList = [];\n        this.selectedCompany = \"\";\n        return;\n      }\n     // this.companyList = data.result.map((x: any) => x.company);\n      this.companyList  = data.result;\n      let companyId = data.result.find((x: any)=> x.company == this.selectedCompany)?.sgid;\n      if(companyId){\n        this.getProjectList(companyId, null);\n      }\n    });\n  }\n  getProjectList(companyId: any, event: any) {\n    if(event !== null) companyId = event.target.value;\n    this._quoteService.getProjectList(companyId).subscribe((data: any)=> {\n      if(typeof data.result == 'string'){\n        this.projectList = [];\n        this.selectedProject = \"\";\n      } else {\n        this.projectList  = data.result; //.map((x: any)=> x.project);\n        this.selectedProject = this.projectList[0];\n      }\n    })  \n  }\n\n  \n  getStates(){\n    this.moodboardService.getStateList().subscribe((response:any) => {\n      this.stateList = response.states;\n    });    \n\n  }\n  getMoodboard(){\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response:any) => {\n      this.boardname = response.moodboard.boardname;\n      this.mbCreateForm.setValue({\n        moodboardName: response.moodboard.boardname,\n        moodboardType: response.moodboard.boardtypeid.toString(),\n        moodboardCompany: response.moodboard.company_name,\n        moodboardProjectName: response.moodboard.project_name,\n        company_id: response.moodboard.company_id,\n        project_id: response.moodboard.project_id,\n        moodboardState: response.moodboard.state,\n        moodboardCity: response.moodboard.city,\n        moodboardZip: response.moodboard.zipcode\n      });\n    });    \n\n  }\n  resetForm(){\n    this.mbCreateForm.reset();\n    this._location.back();\n  }\n  onSubmit() {\n    let val = this.mbCreateForm.value;\n    let param: {[index: string]:any} = { \n      moodboard_name: val.moodboardName,\n      moodboard_type: val.moodboardType,\n      company_name: val.moodboardCompany,\n      project_name: val.moodboardProjectName,\n      state: val.moodboardState,\n      city: val.moodboardCity,\n      zipcode: val.moodboardZip,\n      userid: this._user.getUser().getId()\n    }\n    if(this.showDropdown == false)\n    param['company_name'] = this.companyList.find((x: any)=> x.sgid == val.company_id)?.company;\n    if(this.showPDropdown == false)\n    param['project_name'] = this.projectList.find((x: any)=> x.sgid == val.project_id)?.project;\n\n    if(this.mbId!== '' && this.currentPage != 'create') { \n      param['moodboard_id'] = this.mbId;\n      this.moodboardService.updateMoodboard(param).subscribe((response:any) => {\n        if(response.statusCode === 200){ \n          this._toster.success(response.message);\n          this.router.navigate(['moodboard',response.moodboard_id])\n      }\n        else this._toster.error(response.message);\n      }, error => this._toster.error('Please contact site administrator!')\n      );\n    }else{\n      this.moodboardService.createMoodboard(param).subscribe((response:any) => {\n        if(response.statusCode === 200)\n        { this._toster.success(response.message);\n//          this.router.navigate(['moodboard',response.moodboard_id])\n          this._location.back();\n      }\n        else this._toster.error(response.message);\n      }, error => this._toster.error('Please contact site administrator!')\n      );\n    }\n  }\n}\n","<div\n  fxFlex\n  class=\"mb-create__form\"\n  fxLayout=\"column\"\n  fxLayoutAlign=\"center center\"\n>  \n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n        <span *ngIf=\"mbId == null\" class=\"mb-create__form--title\">CREATE A NEW MOODBOARD</span>\n        <span *ngIf=\"mbId != '' && currentPage != 'create'\" class=\"mb-create__form--title\">Editing Moodboard named <strong>{{boardname}}</strong></span>\n        <span *ngIf=\"currentPage == 'create' && mbId != null\" class=\"mb-create__form--title\">Copying Moodboard named <strong>{{boardname}}</strong></span>\n    </div>\n</div>\n\n<div class=\"mb-form\">\n  <form [formGroup]=\"mbCreateForm\"  class=\"add-field\" (ngSubmit)=\"onSubmit()\">\n          <label style=\"display: flex;\" class=\"label\">Moodboard Type <span class=\"asterisk\">*</span></label>\n          <mat-button-toggle-group formControlName=\"moodboardType\" #mbtypegroup=\"matButtonToggleGroup\"   aria-label=\"Moodboard Type\">\n            <ng-container *ngFor=\"let item of catagorydata; let i = index\">\n            <mat-button-toggle [ngClass]=\"{'selected': mbtypegroup.value == item?.type_id}\" value=\"{{item?.type_id}}\">\n                <img mat-card-image width=\"100px\" height=\"100px\" src=\"{{item.imageSrc}}\" alt=\"{{item.value}}\">\n                <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"center center\">\n                  <div fxLayout=\"row\" class=\"text-lable\" >{{item.value}}</div>\n                </div>\n              </mat-button-toggle>          \n            </ng-container>\n          </mat-button-toggle-group>\n<div class=\"mb-form-inner\" style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n  <div fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \n    <!-- <mat-form-field appearance = \"fill\">\n      <label for=\"moodboardName\">Moodboard Name <span class=\"asterisk\">*</span></label>\n      <input formControlName=\"moodboardName\" matInput placeholder = \"Name your Board\">\n    </mat-form-field> -->\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Moodboard Name<span class=\"asterisk\">*</span></span>\n      <input\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardName')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardName\"\n        placeholder=\"Name your Board\"\n      />\n    </div>\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Project Name<span class=\"asterisk\"></span> </span>\n      <div fxLayout=\"row\"  style=\"width: 100%;\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\n        <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showPDropdown=!showPDropdown\" class=\"add\">\n          <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\n        </a>\n        <a *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\n          <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">        </a>\n    \n      <input *ngIf=\"showPDropdown\"\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardProjectName')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardProjectName\"\n        placeholder=\"Add Project Name\"\n      />\n      <select *ngIf=\"_user.getUser().isInternalUser() && !showPDropdown \"\n      [ngClass]=\"{\n        'error-border': mbCreateForm.get('project_id')?.invalid\n      }\"\n      formControlName=\"project_id\"\n    >\n      <option *ngFor=\"let prj of projectList\" [value]=\"prj.sgid\">\n        {{ prj.project }}\n      </option>\n    </select>\n  </div>\n    </div>\n \n    <div fxFlex=\"100\" fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">City<span class=\"asterisk\">*</span></span>\n      <input\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardCity')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardCity\"\n        placeholder=\"Enter a City\"\n      />\n    </div>\n \n\n    \n    \n   <!-- <mat-form-field appearance = \"fill\">\n    <label for=\"moodboardCompany\">Company Name <span class=\"asterisk\">*</span></label>\n    <input formControlName=\"moodboardCompany\" matInput placeholder = \"Enter Company Name\">\n </mat-form-field>\n <mat-form-field appearance = \"fill\">\n  <label for=\"moodboardProjectName\">Project Name <span class=\"asterisk\">*</span></label>\n  <input formControlName=\"moodboardProjectName\" matInput placeholder = \"Name your Project\">\n</mat-form-field> -->\n\n  </div>\n  <div fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Company Name<span class=\"asterisk\">*</span>\n    </span>\n    <div fxLayout=\"row\" style=\"width: 100%;\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\n    <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showDropdown=!showDropdown; showPDropdown=!showPDropdown\" class=\"add\">\n      <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\n    </a>\n    <a mat-button *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\n      <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\n    </a>\n    <input *ngIf=\"showDropdown\"\n        [readonly]=\"!_user.getUser().isInternalUser()\"\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardCompany')?.invalid,\n          'read-only': !_user.getUser().isInternalUser()\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardCompany\"\n        placeholder=\"Add Company Name\"\n      />\n      <select *ngIf=\"_user.getUser().isInternalUser() && !showDropdown\"\n      [ngClass]=\"{\n        'error-border': mbCreateForm.get('company_id')?.invalid\n      }\"\n      formControlName=\"company_id\"\n      (change)=\"getProjectList('', $event)\"\n    >\n      <option  *ngFor=\"let cmp of companyList\" [value]=\"cmp.sgid\" >\n        {{ cmp.company }}\n      </option>\n    </select>\n  </div>\n    </div>\n\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">State<span class=\"asterisk\">*</span></span>\n      <select\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardState')?.invalid\n        }\"\n        formControlName=\"moodboardState\"\n      >\n        <option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">\n          {{ state.name }}\n        </option>\n      </select>\n    </div>\n    \n    <div fxFlex=\"100\" fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\" stretch\">\n      <span class=\"label\">Zip Code<span class=\"asterisk\">*</span></span>\n      <input\n        [ngClass]=\"{\n          'error-border': mbCreateForm.get('moodboardZip')?.invalid\n        }\"\n        type=\"text\"\n        formControlName=\"moodboardZip\"\n        placeholder=\"Add a ZipCode\"\n      />\n    </div>\n    <!-- <mat-form-field appearance = \"fill\">\n      <mat-label>State <span class=\"asterisk\">*</span></mat-label>\n        <mat-select formControlName=\"moodboardState\">\n          <mat-option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">{{state.name}}</mat-option>\n        </mat-select>\n\n    </mat-form-field>\n    <mat-form-field appearance = \"fill\">\n      <label for=\"moodboardCity\">City <span class=\"asterisk\">*</span></label>\n      <input formControlName=\"moodboardCity\" matInput placeholder = \"Enter a City\">\n   </mat-form-field>\n   <mat-form-field appearance = \"fill\">\n    <label for=\"moodboardZip\">Zip Code <span class=\"asterisk\">*</span></label>\n    <input (input)=\"validatedCityZipCode()\" formControlName=\"moodboardZip\" matInput placeholder = \"Add a ZipCode\">\n </mat-form-field> -->\n \n  </div>\n</div>\n<div class=\"mb-form-inner\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\n  <button *ngIf=\"mbId == '' || mbId != '' && currentPage == 'create'\"   class=\"btn btn-primary\"  mat-raised-button\n  color=\"accent\"  type=\"submit\" mat-button>CREATE</button>\n  <button *ngIf=\"mbId != '' && currentPage != 'create'\" class=\"btn btn-primary\" type=\"submit\"  mat-button\n  color=\"accent\" mat-button>UPDATE</button>\n  <button (click)=\"resetForm();\" class=\"btn btn-primary btn-cancel\" mat-button color=\"accent\"  mat-button>CANCEL</button>\n  <div fxLayoutGap=\"4rem\"></div>         \n  \n</div>          \n\n</form>  \n</div>          \n</div>      \n     \n\n\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ToasterService } from 'projects/core/src/public-api';\nimport { MoodboardService } from '../../../services/moodboard.service';\n\n@Component({\n  selector: 'lib-share-mb',\n  templateUrl: './share-mb.component.html',\n  styleUrls: ['./share-mb.component.scss'],\n})\nexport class ShareMBComponent implements OnInit {\n  emailAdd = '';\n  constructor(\n    private _moodboardService: MoodboardService,\n    private _toaster: ToasterService,\n    public _dialogRef: MatDialogRef<ShareMBComponent>\n  ) {}\n\n  ngOnInit(): void {}\n\n  close() {\n    this._dialogRef.close(false);\n  }\n\n  submit() {\n    this._moodboardService\n      .shareMoodboard(this.emailAdd)\n      .subscribe((resp: any) => {\n        this._toaster.success(resp.message);\n        if (resp.statusCode == 200) {\n          this._dialogRef.close(true);\n        } else {\n          this._dialogRef.close(false);\n        }\n      });\n  }\n}\n","<div fxLayout=\"column\" fxLayoutGap=\"1rem\">\n  <div>\n    <span fxFlex></span>\n    <span style=\"cursor: pointer;\" (click)=\"close()\">\n      <mat-icon>close icon</mat-icon>\n    </span>\n  </div>\n  <mat-label>To share the Moodboard, please enter an email address :</mat-label>\n  <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n    <input\n      type=\"email\"\n      required\n      matInput\n      placeholder=\"Enter email address\"\n      [(ngModel)]=\"emailAdd\"\n    />\n  </mat-form-field>\n  <div fxLayoutAlign=\"center center\">\n    <button\n      class=\"round\"\n      mat-flat-button\n      [disabled]=\"!emailAdd\"\n      (click)=\"submit()\"\n      color=\"accent\"\n    >\n      SUBMIT\n    </button>\n  </div>\n</div>\n","import { Routes } from '@angular/router';\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\n\nexport const moodboardRoutes: Routes = [\n  {\n    path: '',\n    component: MoodboardListComponent\n  },{\n    path: 'create',\n    component: CreateMoodboardComponent\n  },{\n    path: 'create/:id',\n    component: CreateMoodboardComponent\n  },{\n    path: 'edit/:id',\n    component: CreateMoodboardComponent\n  },{\n    path:':id',\n    component:MoodboardComponent\n  }\n];\n\n\n\n\n","/*\n * Public API Surface of shop\n */\n\nexport * from './lib/service/shop.service';\nexport * from './lib/common/shop/shop.component';\nexport * from './lib/common/product-details/product-details.component';\nexport * from './lib/shop.module';\nexport * from './lib/common/shop-common.module';\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\";\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() { return this._rowspan; }\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() { return this._colspan; }\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() { return this._cols; }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() { return this._gutter; }\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() { return this._rowHeight; }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map"],"sourceRoot":"webpack:///"}