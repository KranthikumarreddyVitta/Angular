{"version":3,"sources":["./projects/moodboard/src/lib/moodboard.module.ts","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.html","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.html","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.ts","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.html","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button-toggle.js","./projects/moodboard/src/lib/moodboard-routing.ts","./projects/shop/src/projects.ts"],"names":[],"mappings":"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ACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,6DAAe;AACjC,mBAAmB,gEAAU;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA,kCAAkC,iFAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,QAAQ,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB,mFAAqB,QAAQ;AACxE;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,8BAA8B,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,8DAAmB,GAAG,+DAAwB,cAAc,+DAAwB,wCAAwC;AAC3Y,uBAAuB,+DAAwB,EAAE,gHAAgH;AACjK,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDA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","file":"moodboard-src-lib-moodboard-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\r\nimport { moodboardRoutes } from './moodboard-routing';\r\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\r\nimport { CoreModule } from 'projects/core/src/public-api';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport { CommonModule } from \"@angular/common\";\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MoodboardListComponent,\r\n    MoodboardComponent,\r\n    CreateMoodboardComponent,\r\n  ],\r\n  imports: [\r\n    RouterModule.forChild(moodboardRoutes),\r\n    CoreModule,\r\n    FlexLayoutModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    CommonModule,\r\n    MatSelectModule,\r\n    MatGridListModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatTabsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    AgGridModule,\r\n    MatCheckboxModule \r\n  ],\r\n  exports : [\r\n    \r\n  ]\r\n})\r\nexport class MoodboardModule { }\r\n","<app-banner [iconSrc]=\"bannerIconImg\" [iconAltTxt]=\"bannerIconImgTxt\" \r\n[leftTxt]=\"'MoodBoard'\" [src]=\"bannerImg\" [altTxt]=\"bannerImgTxt\" [bottomTxt]=\"bannerBottomTxt\"></app-banner>\r\n<div class=\"mb\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n        <a mat-button href=\"/moodboard/create\" mat-raised-button><mat-icon inline=\"true\">add_circle_outline</mat-icon>\r\n        </a>\r\n        <span class=\"mb-create-text\">CREATE A NEW MOOdBOARD</span>\r\n    </div>\r\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\"  fxLayoutGap=\"2rem\">\r\n        <mat-form-field class=\"select\">\r\n            <mat-label>Select a Project</mat-label>\r\n            <mat-select (selectionChange)=\"projectFilter($event.value)\">\r\n              <mat-option  *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n    </div>\r\n</div>\r\n<mat-tab-group (selectedTabChange)=\"onTabChanged($event);\" mat-align-tabs=\"center\">\r\n    <mat-tab [style]=\"'background:#e4e6e8;'\" *ngFor=\"let item of tabsData; index as i; \" label=\"{{item.title}}\">\r\n        <mat-grid-list cols=\"4\" rowHeight=\"1:1\">\r\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\r\n                <mat-grid-tile class=\"tile\" (click)=\"mbDetails(item.sgid);\" >\r\n                    <mat-card  class=\"example-card\">\r\n                        <img mat-card-image width=\"100%\" height=\"200px\"  src=\"{{item.moodboard_images}}\" alt=\"{{item.boardname}}\">\r\n                        <mat-card-content>\r\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n                            <div fxLayout=\"row\" class=\"text-lable\" >Board Name: </div>\r\n                            <div fxLayout=\"row\" class=\"text-content\" >{{item.boardname}}</div>  \r\n                          </div>\r\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1.55rem\" fxLayoutAlign=\"start center\">\r\n                            <div fxLayout=\"row\" class=\"text-lable\" >Created By: </div>\r\n                            <div fxLayout=\"row\" class=\"text-content\" >{{item.user?.first_name + ' ' + item.user?.last_name}}</div>\r\n                          </div>\r\n                        </mat-card-content>\r\n                      </mat-card>\r\n                </mat-grid-tile>\r\n           </ng-container>\r\n           </mat-grid-list>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n  \r\n<!-- <app-tabs [data]=\"tabsData\">\r\n        <mat-grid-list cols=\"3\" rowHeight=\"1:1\">\r\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\r\n                <mat-grid-tile (click)=\"mbDetails(item.sgid);\" >\r\n                    <app-cart  cart [data]=\"item\"></app-cart>\r\n                </mat-grid-tile>\r\n            </ng-container>\r\n             <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile>\r\n            <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile> \r\n          </mat-grid-list>\r\n</app-tabs> -->\r\n","import { AfterContentInit, Component, ContentChildren, OnInit, QueryList } from '@angular/core';\r\nimport { MatTab } from '@angular/material/tabs';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { MoodboardService } from '../../services/moodboard.service';\r\n\r\n@Component({\r\n  selector: 'lib-moodboard-list',\r\n  templateUrl: './moodboard-list.component.html',\r\n  styleUrls: ['./moodboard-list.component.scss']\r\n})\r\nexport class MoodboardListComponent implements OnInit {\r\n\r\n  constructor(private moodboardService:MoodboardService, private router: Router) {}\r\n  bannerIconImg: any = 'assets/moodboard/images/mb.png';\r\n  bannerIconImgTxt: any = 'Moodboard';\r\n  bannerImgTxt: any = 'Moodboard';\r\n  bannerImg: any = 'assets/moodboard/images/mb-banner.jpg';\r\n  bannerTxt: any = 'MoodBoard';\r\n  bannerBottomTxt: any = 'Style & create look from our collection of designer furniture';\r\n  tabsData: any[] = [{title:'All Moodboards', content: '' },{title:'My Moodboards', content: '' },{title:'Disabled Moodboards', content: '' } ];\r\n  tabContent: any[]= [];    \r\n  projectList: any[] = [];\r\n  projectName: any = '';\r\n  selectedIndex: any = 0;\r\n  ngOnInit(): void {\r\n    this.getMoodBoardList();\r\n    this.getProjectList();\r\n  }\r\n  mbDetails(id: any){\r\n    this.router.navigateByUrl('/moodboard/'+id);\r\n  }\r\n  projectFilter(ev:any){\r\n    this.projectName = ev;\r\n    this.onTabChanged({index: this.selectedIndex}); \r\n  }\r\n  getProjectList(){\r\n    this.moodboardService.getProjectList().subscribe((response:any) => {\r\n      this.projectList = response.moodboardProject;\r\n    });    \r\n  }\r\n  getMoodBoardList(){\r\n    let param = {supplier_id:0,project_name: this.projectName}\r\n    this.moodboardService.getMoodBoardList(param).subscribe((response:any) => {\r\n      this.tabContent = response.result;\r\n    });    \r\n  }\r\n\r\n  onTabChanged(ev: any){\r\n    console.log(ev);\r\n    if(ev.index == 1) {\r\n      this.getMyMoodBoardList()\r\n    }\r\n    if(ev.index == 2) {\r\n      this.getDisabledMBList();\r\n    }\r\n    if(ev.index == 0) {\r\n      this.getMoodBoardList();\r\n    }\r\n  }  \r\n  getMyMoodBoardList(){\r\n    let param = {supplier_id:0,project_name: this.projectName}\r\n    this.moodboardService.getMyMoodBoardList(param).subscribe((response:any) => {\r\n      this.tabContent = response.result;\r\n    });    \r\n  }\r\n  getDisabledMBList(){\r\n    let param = {supplier_id:0,project_name: this.projectName}\r\n    this.moodboardService.getDisabledMBList(param).subscribe((response:any) => {\r\n      this.tabContent = response.result;\r\n    });    \r\n  }\r\n}","import { MatDialog } from '@angular/material/dialog';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { QuoteCreateFormComponent } from 'projects/quote/src/lib/common/components/quote-create-form/quote-create-form.component';\r\nimport { MoodboardService } from '../../services/moodboard.service';\r\nimport autoTable from 'jspdf-autotable';\r\n\r\nimport {\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  ICellRendererParams,\r\n} from 'ag-grid-community';\r\nimport {\r\n  CounterComponent,\r\n  ImageRendererComponent,\r\n  PdfService,\r\n  ToasterService,\r\n  UserService,\r\n} from 'projects/core/src/public-api';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport {\r\n  ItemTypeComponent,\r\n  TotalCellRendererComponent,\r\n} from 'projects/quote/src/public-api';\r\nimport { calcPossibleSecurityContexts } from '@angular/compiler/src/template_parser/binding_parser';\r\nimport jsPDF from 'jspdf';\r\nimport { ProductDetailsComponent } from 'projects/shop/src/projects';\r\n\r\n@Component({\r\n  selector: 'lib-moodboard',\r\n  templateUrl: './moodboard.component.html',\r\n  styleUrls: ['./moodboard.component.scss'],\r\n})\r\nexport class MoodboardComponent implements OnInit {\r\n  public mbId: any = '';\r\n  public userid: any = null;\r\n  constructor(\r\n    private moodboardService: MoodboardService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private _pdf: PdfService,\r\n    private _router: Router,\r\n    private _dialog: MatDialog,\r\n    private _toaster: ToasterService,\r\n    private _user: UserService\r\n  ) {\r\n    this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\r\n    this.userid = this._user.getUser().getId();\r\n  }\r\n  agGrid: GridReadyEvent = {} as GridReadyEvent;\r\n  bannerIconImg: any = 'assets/moodboard/images/mb.png';\r\n  bannerIconImgTxt: any = 'Moodboard';\r\n  moodboardDetails: any = '';\r\n  mbQuotesList: any = [];\r\n  stateList: any = [];\r\n  categoriesList: Subject<any[]> = new Subject();\r\n  catListDefault: any[] = [];\r\n  selectedCategory: any = null;\r\n  cityList: Subject<any[]> = new Subject();\r\n  cityListDefault: any[] = [];\r\n  selectedCity: any = [];\r\n  min_price: any = '';\r\n  max_price: any = '';\r\n  min_price_inventory: any = '';\r\n  searchTxt: any = null;\r\n  items: any = [];\r\n  catagorydata = [\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\r\n      value: 'Living Room',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\r\n      value: 'Bedroom',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\r\n      value: 'Dining Room',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\r\n      value: 'Office',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\r\n      value: 'Outdoor',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\r\n      value: 'Others',\r\n    },\r\n  ];\r\n  frameworkComponents = {\r\n    ImageRendererComponent: ImageRendererComponent,\r\n    TotalCellRendererComponent: TotalCellRendererComponent,\r\n    ItemTypeCellRenderer: ItemTypeComponent,\r\n    CounterCellRenderer: CounterComponent,\r\n  };\r\n  pinnedBottomRowData = [\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'SUB TOTAL',\r\n      is_total: '012e',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'DELIVERY FEE',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'TAXES',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'TOTAL',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n  ];\r\n\r\n  columnDefs = [\r\n    {\r\n      field: 'sgid',\r\n      width: 120,\r\n      headerName: 'S. NO',\r\n      headerTooltip: 'S.NO',\r\n      colSpan: (params: any) => (params.data.subTotal === 'abc' ? 10 : 1),\r\n      cellStyle: (params: any) => {\r\n        if (params.data.subTotal === 'abc') {\r\n          return { 'text-align': 'end' };\r\n        }\r\n        return '';\r\n      },\r\n    },\r\n    { field: 'warehouse_name', headerName: 'CITY' },\r\n    { field: 'sku', headerName: 'SKU' },\r\n    {\r\n      headerName: 'IMAGE',\r\n      cellRenderer: 'ImageRendererComponent',\r\n      field: 'variation.images[0].image_url.small',\r\n      cellStyle: {\r\n        padding: '0.3rem',\r\n      },\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data?.variation?.images[0]?.image_url?.small;\r\n      },\r\n    },\r\n    {\r\n      headerName: 'PRODUCT NAME',\r\n      field: 'name',\r\n      width: '250px',\r\n    },\r\n    {\r\n      headerName: 'TYPE',\r\n      field: 'button_type',\r\n      cellRenderer: 'ItemTypeCellRenderer',\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 0 ? 'Rent' : 'Buy';\r\n      },\r\n    },\r\n    {\r\n      headerName: 'QUANTITY',\r\n      field: 'is_qty',\r\n      cellRenderer: 'CounterCellRenderer',\r\n    },\r\n    {\r\n      headerName: 'BUY PRICE ($)',\r\n      field: 'buy_price',\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 1 ? params.data.buy_price : 'NA';\r\n      },\r\n    },\r\n    {\r\n      headerName: 'RENTAL PRICE/MONTH',\r\n      field: 'price',\r\n      cellRenderer: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 0 ? params.value : 'NA';\r\n      },\r\n    },\r\n    // { headerName: 'DISCOUNT ($)', field: 'discount' },\r\n\r\n    {\r\n      headerName: 'MONTHS',\r\n      field: 'months',\r\n    },\r\n    {\r\n      headerName: 'TOTAL ($)',\r\n      field: 'is_total',\r\n      cellRenderer: 'TotalCellRendererComponent',\r\n    },\r\n  ];\r\n  rowData: Observable<any[]> = new Observable();\r\n  gridOptions: GridOptions = {\r\n    onGridReady: (api: GridReadyEvent) => {\r\n      this.agGrid = api;\r\n      this.onGridReady(api);\r\n    },\r\n    rowHeight: 100,\r\n    headerHeight: 100,\r\n    getRowHeight: (params: any) => {\r\n      return params?.data?.isExtraRow ? 50 : 100;\r\n    },\r\n  };\r\n  defaultColDef = {\r\n    wrapText: true,\r\n    cellClass: 'grid-cell',\r\n    cellStyle: {\r\n      'line-height': 'normal',\r\n      'align-items': 'center',\r\n      'justify-content': 'center',\r\n      display: 'flex',\r\n      padding: '0 0.5rem',\r\n    },\r\n  };\r\n  onGridReady(evt: GridReadyEvent) {\r\n    this.agGrid = evt;\r\n    evt.api.sizeColumnsToFit();\r\n    this.rowData = this.getMoodboardSummary();\r\n  }\r\n  getMoodboardSummary<T>(): Observable<T> {\r\n    return this.moodboardService.getMBSummary<T>(this.mbId).pipe(\r\n      tap((x: any) => {\r\n        if (x.length > 0) {\r\n          this.agGrid.api.redrawRows();\r\n          // this.agGrid.api.refreshCells({columns: ['is_total'],force: true})\r\n        }\r\n      })\r\n    );\r\n  }\r\n  openModal(templateRef: any) {\r\n    let dialogRef = this._dialog.open(templateRef, {\r\n      width: '90%',\r\n      maxHeight: '85vh',\r\n      disableClose: true,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('The dialog was closed');\r\n      // this.animal = result;\r\n    });\r\n  }\r\n  closeModal() {\r\n    this._dialog.closeAll();\r\n  }\r\n  updateBottomData(data: any) {\r\n    this.pinnedBottomRowData[1].is_total = data?.delivery_fee;\r\n    this.pinnedBottomRowData[2].sgid =\r\n      'TAXES (' + data?.states?.sale_tax_rate + '%)';\r\n    this.pinnedBottomRowData[2].is_total = data?.tax_amount;\r\n    this.pinnedBottomRowData[3].is_total = data?.tax_amount;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getMoodboard();\r\n    this.getCity();\r\n    this.getCategory();\r\n    this.getItems();\r\n    this.getMBQuote(this.mbId);\r\n  }\r\n  scroll(el: HTMLElement) {\r\n    el.scrollIntoView();\r\n  }\r\n  requestRendering() {\r\n    this.moodboardService\r\n      .requestRendering({ moodboard_id: this.mbId })\r\n      .subscribe(\r\n        (response: any) => {\r\n          this._toaster.success('Request ' + response.result);\r\n        },\r\n        (error) => {\r\n          this._toaster.error('Request failed. please try later');\r\n        }\r\n      );\r\n  }\r\n  resetFilter() {\r\n    this.cityListDefault.map((el) => (el.isChecked = false));\r\n    this.cityListDefault.sort((a, b) =>\r\n      a.warehouse_name > b.warehouse_name ? 1 : -1\r\n    );\r\n    this.catListDefault.map((el) => (el.isChecked = false));\r\n    this.catListDefault.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n    this.categoriesList.next(this.catListDefault);\r\n    this.cityList.next(this.cityListDefault);\r\n    this.max_price = '';\r\n    this.min_price = '';\r\n    this.min_price_inventory = '';\r\n    this.getItems();\r\n  }\r\n  getMBQuote(mbId: any) {\r\n    this.moodboardService.getMBQuote(mbId).subscribe((response: any) => {\r\n      this.mbQuotesList = response.quote;\r\n    });\r\n  }\r\n  getMoodboard() {\r\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response: any) => {\r\n      this.moodboardDetails = response;\r\n      this.updateBottomData(response.moodboard);\r\n    });\r\n  }\r\n  getCategory() {\r\n    this.moodboardService\r\n      .getCategoryList()\r\n      .pipe(\r\n        map((item: any) => {\r\n          item.result.map((i: any, index: any) => {\r\n            i['isChecked'] = false;\r\n            i['order'] = index;\r\n            return i;\r\n          });\r\n          return item;\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        this.categoriesList.next(response.result);\r\n        this.catListDefault = response.result;\r\n      });\r\n  }\r\n  getCity() {\r\n    this.moodboardService\r\n      .getCityList()\r\n      .pipe(\r\n        map((item: any) => {\r\n          item.data.map((i: any, index: any) => {\r\n            i['isChecked'] = false;\r\n            i['order'] = index;\r\n            return i;\r\n          });\r\n          return item;\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        this.cityList.next(response.data);\r\n        this.cityListDefault = response.data;\r\n      });\r\n  }\r\n  getItems(\r\n    start: number = 0,\r\n    count: number = 12,\r\n    category: any = null,\r\n    supplier: any = null,\r\n    warehouse: any = null,\r\n    max_price: any = 0,\r\n    min_price: any = 0,\r\n    min_price_inventory: any = 0,\r\n    searchTxt: any = null\r\n  ) {\r\n    let param = {\r\n      start: start,\r\n      count: count,\r\n      category: category,\r\n      supplier: supplier,\r\n      warehouse: warehouse,\r\n      min_price: min_price,\r\n      max_price: max_price,\r\n      min_price_inventory: min_price_inventory,\r\n      keywords: searchTxt,\r\n    };\r\n    this.moodboardService.getItems(param).subscribe((response: any) => {\r\n      this.items = response.result;\r\n    });\r\n  }\r\n  editMB() {\r\n    this.router.navigateByUrl('/moodboard/edit/' + this.mbId);\r\n  }\r\n  copyMB() {\r\n    this.router.navigateByUrl('/moodboard/create/' + this.mbId);\r\n  }\r\n  onCityChecked(city: any, i: any) {\r\n    if (city.isChecked) city.isChecked = false;\r\n    else city.isChecked = true;\r\n    this.cityListDefault[i] = city;\r\n    this.cityListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\r\n    this.cityList.next(this.cityListDefault);\r\n    this.selectedCity = this.cityListDefault\r\n      .filter((item) => item.isChecked)\r\n      .map((i) => i.sgid);\r\n    this.getItems(\r\n      0,\r\n      12,\r\n      this.selectedCategory,\r\n      null,\r\n      this.selectedCity.toString(),\r\n      this.max_price,\r\n      this.min_price,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n\r\n  onCategoriesChecked(cat: any, i: any) {\r\n    if (cat.isChecked) cat.isChecked = false;\r\n    else cat.isChecked = true;\r\n    this.catListDefault[i] = cat;\r\n    this.catListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\r\n    this.categoriesList.next(this.catListDefault);\r\n    this.selectedCategory = this.catListDefault\r\n      .filter((item) => item.isChecked)\r\n      .map((i) => i.sgid);\r\n    this.getItems(\r\n      0,\r\n      12,\r\n      this.selectedCategory.toString(),\r\n      null,\r\n      this.selectedCity,\r\n      this.max_price,\r\n      this.min_price,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  onMinPriceRangeChange(ev: any) {\r\n    this.min_price = ev;\r\n    this.getItems(\r\n      0,\r\n      12,\r\n      this.selectedCategory,\r\n      null,\r\n      this.selectedCity,\r\n      this.max_price,\r\n      this.min_price,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  onMaxPriceRangeChange(ev: any) {\r\n    this.max_price = ev;\r\n    this.getItems(\r\n      0,\r\n      12,\r\n      this.selectedCategory,\r\n      null,\r\n      this.selectedCity,\r\n      this.max_price,\r\n      this.min_price,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  onQtyChange(ev: any) {\r\n    this.min_price_inventory = ev;\r\n    this.getItems(\r\n      0,\r\n      12,\r\n      this.selectedCategory,\r\n      null,\r\n      this.selectedCity,\r\n      this.max_price,\r\n      this.min_price,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  search(ev: any) {\r\n    this.searchTxt = ev;\r\n    this.getItems(\r\n      0,\r\n      12,\r\n      this.selectedCategory,\r\n      null,\r\n      this.selectedCity,\r\n      this.max_price,\r\n      this.min_price,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  \r\n  createNewQuote() {\r\n    this._dialog\r\n      .open(QuoteCreateFormComponent, {\r\n        height: '500px',\r\n        width: '800px',\r\n        data: {\r\n          isDialog: true,\r\n        },\r\n      })\r\n      .afterClosed()\r\n      .subscribe((data) => {\r\n        console.log(data);\r\n      });\r\n  }\r\n  deleteItem(mbItem: any){\r\n    let obj = {\r\n      button_type: mbItem.button_type,\r\n      moodboard_id: mbItem.moodboard_id,\r\n      product_id: mbItem.product_id,\r\n      sku: mbItem.sku,\r\n      warehouse_id: mbItem.warehouse_id,\r\n      user_id: this._user.getUser().getId()\r\n    };\r\n  this.moodboardService.deleteItemToMoodboard(obj).subscribe(\r\n    (data: any) => {\r\n      if (data.statusCode == 200)\r\n        this._toaster.success(data?.result)\r\n      else \r\n        this._toaster.error(data.result);\r\n      },\r\n      (error) => this._toaster.error('Fail to add')\r\n  );\r\n  }\r\n\r\n  generateMDPdf() {\r\n    let data = this._pdf.getAgGridRowsAndColumns(this.agGrid);\r\n    let imagesObs = this._pdf.getAllTableBase64Images(data?.rows as [], 3);\r\n    imagesObs.subscribe((images) => {\r\n      let doc = new jsPDF();\r\n      doc.text('Moodboard Information', 5, 15);\r\n      let info = [\r\n        ['Project Name:', this.moodboardDetails?.moodboard?.project_name],\r\n        ['Company Name:', this.moodboardDetails?.moodboard?.company_name],\r\n        ['Moodboard :', this.moodboardDetails?.moodboard?.sgid],\r\n        ['State:', this.moodboardDetails?.moodboard?.state.name],\r\n        ['Moodboard Name:', this.moodboardDetails?.moodboard?.boardname],\r\n        ['City:', this.moodboardDetails?.moodboard?.city],\r\n        ['Zipcode:', this.moodboardDetails?.moodboard?.zipcode],\r\n      ];\r\n      autoTable(doc, {\r\n        ...this._pdf.getInformationTableUserOptions(),\r\n        body: info,\r\n      });\r\n\r\n      doc.addPage();\r\n      doc.text('Moodboard Summary', 5, 15);\r\n      autoTable(doc, {\r\n        ...this._pdf.getSummaryTableUserOptions(),\r\n        columnStyles: {\r\n          0: { cellWidth: 9 },\r\n          1: { cellWidth: 20 },\r\n          2: { cellWidth: 10 },\r\n          3: { cellWidth: 20 },\r\n          4: { cellWidth: 30 },\r\n          5: { cellWidth: 15 },\r\n          6: { cellWidth: 10 },\r\n          7: { cellWidth: 20 },\r\n          8: { cellWidth: 20 },\r\n          11: { cellWidth: 20 },\r\n        },\r\n        columns: data.columns,\r\n        body: data?.rows?.map((r: any) => {\r\n          if (!parseInt(r[0])) {\r\n            let temp = [];\r\n            temp.push({ content: r[0], colSpan: r.length - 1 });\r\n            temp.push(r[r.length - 1]);\r\n            r = temp;\r\n          }\r\n          return r;\r\n        }),\r\n        willDrawCell: (data) => {\r\n          if (data.section === 'body' && data.column.index === 3) {\r\n            data.cell.raw = '';\r\n            data.cell.text = [];\r\n          }\r\n        },\r\n        didDrawCell: (data) => {\r\n          if (data.section === 'body' && data.column.index === 3) {\r\n            var base64Img = 'data:image/jpeg;base64,' + images[data.row.index];\r\n            doc.addImage(\r\n              base64Img,\r\n              'JPEG',\r\n              data.cell.x + 1,\r\n              data.cell.y + 1,\r\n              18,\r\n              18\r\n            );\r\n          }\r\n        },\r\n      });\r\n      doc.save('moodboard.pdf');\r\n    });\r\n  }\r\n  productDetails(item: any, moodboardDetails: any){\r\n    this._dialog.open(ProductDetailsComponent,\r\n      {\r\n        height:\"90%\", \r\n        width:\"90%\",\r\n        disableClose: true,\r\n        data:{\r\n          forDialog: true,\r\n          forHitler: true,\r\n          forMoodboard: this._user.getUser().getId() === moodboardDetails?.moodboard?.userid,\r\n          forQuote: false,\r\n          item: item,\r\n          mb: moodboardDetails?.moodboard,\r\n          moodboardId:moodboardDetails?.moodboard?.id\r\n        }\r\n    }).afterClosed().subscribe(data=> {\r\n      console.log(data);\r\n      this.getMoodboard();\r\n    })  }\r\n}\r\n","<div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n    <div class=\"mb-details\" fxLayout=\"row\" fxLayoutAlign=\" stretch\">\r\n      <div\r\n        class=\"mb-details__icon\"\r\n        fxFlex=\"30\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\"\r\n      >\r\n        <span>{{bannerIconImgTxt}}</span>\r\n        <img [src]=\"bannerIconImg\" alt=\"{{bannerIconImgTxt}}\" srcset=\"\" />\r\n      </div>\r\n      <div\r\n        class=\"mb-details__info\"\r\n        fxFlex=\"80\"\r\n        fxLayout=\"row wrap\"\r\n        fxLayoutAlign=\"start\"\r\n      >\r\n      \r\n      <div fxFlex=\"50\" *ngIf=\"moodboardDetails?.moodboard\">\r\n        <span class=\"label\">Project Name: </span>\r\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.project_name }}</span>\r\n      </div>\r\n    <div fxFlex=\"50\">\r\n        <span class=\"label\">Company Name: </span>\r\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.company_name}}</span>\r\n    </div>\r\n        <div fxFlex=\"50\">\r\n            <span class=\"label\">Moodboard#: </span>\r\n            <span class=\"value\">{{ moodboardDetails?.moodboard?.sgid }}</span>\r\n          </div>\r\n        <div fxFlex=\"50\">\r\n          <span class=\"label\">Customer City: </span>\r\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.city }}</span>\r\n        </div>\r\n        <div fxFlex=\"50\">\r\n          <span class=\"label\">Moodboard Name: </span>\r\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.boardname }}</span>\r\n        </div>\r\n        <div fxFlex=\"50\">\r\n          <span class=\"label\">Zipcode: </span>\r\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.zipcode }}</span>\r\n        </div>\r\n\r\n        <div\r\n        fxFlex=\"60\"\r\n        fxLayoutGap=\"1rem\"\r\n      >\r\n        <button\r\n          mat-mini-fab\r\n          color=\"accent\"\r\n          aria-label=\"Example icon button with a filter list icon\"\r\n          (click)=\"copyMB();\"\r\n        >\r\n          <mat-icon>file_copy</mat-icon>\r\n        </button>\r\n        <button\r\n          mat-mini-fab\r\n          color=\"accent\"\r\n          aria-label=\"Example icon button with a filter list icon\"\r\n          (click)=\"editMB();\"\r\n          > \r\n          <mat-icon>edit icon</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div\r\n    class=\"mb-details__info\"\r\n    fxFlex=\"20\"\r\n    fxLayout=\"row wrap\"\r\n    fxLayoutAlign=\"start\"\r\n  >\r\n  <div fxFlex=\"80\">\r\n    <ng-container *ngFor=\"let item of catagorydata; let i = index\">\r\n    <mat-card *ngIf= \"item.value == moodboardDetails?.moodboard?.moodboard_type_name\" class=\"example-card\">\r\n        <img mat-card-image   src=\"{{item.imageSrc}}\" alt=\"{{item.value}}\">\r\n        <mat-card-content>\r\n          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n            <div fxLayout=\"row\" class=\"text-lable\" >{{item.value}}</div>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n      </ng-container>\r\n</div>\r\n</div>      \r\n</div>\r\n</div>\r\n<div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n    <div class=\"mb-details\" fxLayout=\"row\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"stretch\">\r\n      <div class=\"left\" fxFlex=\"22\" fxLayoutGap=\"2rem\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">      \r\n        <div class=\"filter\">\r\n          <button\r\n          mat-raised-button\r\n          (click)=\"resetFilter()\"\r\n          color=\"accent\"\r\n          aria-label=\"\"\r\n        >Clear</button>\r\n                 \r\n        </div>\r\n        <mat-card>\r\n          <div class=\"filter\">\r\n            <div class=\"filter-inner\">\r\n              <!-- <button mat-mini-fab color=\"accent\"> \r\n                <mat-icon>edit icon</mat-icon>\r\n              </button> -->\r\n              <img src=\"assets/moodboard/images/location.png\" class=\"filter-img\" alt=\"Cities\">\r\n              <div class=\"filter-label\">\r\n                <label>CITIES</label>\r\n              </div>\r\n            </div>  \r\n            <div class=\"check-wrapper\" fxLayout=\"column\">\r\n              <ng-container *ngFor=\"let city of (cityList | async)  | slice:0:3; let i as index\">\r\n                <mat-checkbox \r\n                  (change)=\"onCityChecked(city, i)\"\r\n                  [checked]=\"city.isChecked\"\r\n                  >\r\n                  {{city.warehouse_name}}\r\n                </mat-checkbox>\r\n              </ng-container> \r\n              <div class=\"view-more\" (click)=\"openModal(viewMoreCity)\">View More</div>\r\n            </div> \r\n          </div>\r\n          <div class=\"filter\">\r\n            <div class=\"filter-inner\">\r\n              <!-- <button mat-mini-fab color=\"accent\"> \r\n                <mat-icon>edit icon</mat-icon>\r\n              </button> -->\r\n              <img src=\"assets/moodboard/images/category.png\" class=\"filter-img\" alt=\"Cities\">\r\n              <div class=\"filter-label\">\r\n                <label>CATEGORIES</label>\r\n              </div>\r\n            </div>  \r\n            <!-- <mat-form-field appearance=\"fill\">\r\n              <mat-label>Filter by Categories</mat-label>\r\n              <mat-select>\r\n                <mat-option *ngFor=\"let cat of categoriesList\" (click)=\"onCategoriesChange(cat.sgid)\" [value]=\"cat.sgid\">{{cat.name}}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>              -->\r\n            <div class=\"check-wrapper\" fxLayout=\"column\">\r\n              <ng-container *ngFor=\"let cat of (categoriesList | async)  | slice:0:3; let i as index\">\r\n                <mat-checkbox \r\n                  (change)=\"onCategoriesChecked(cat, i)\"\r\n                  [checked]=\"cat.isChecked\"\r\n                  >\r\n                  {{cat.name}}\r\n                </mat-checkbox>\r\n              </ng-container> \r\n              <div class=\"view-more\" (click)=\"openModal(viewMoreCat)\">View More</div>\r\n            </div> \r\n          </div>\r\n          <div class=\"filter\">\r\n            <div class=\"filter-inner\">\r\n              <!-- <button mat-mini-fab color=\"accent\"> \r\n                <mat-icon>edit icon</mat-icon>\r\n              </button> -->\r\n              <img src=\"assets/moodboard/images/price.png\" class=\"filter-img\" alt=\"Cities\">\r\n              <div class=\"filter-label\">\r\n                <label>PRICE RANGE</label>\r\n              </div>\r\n            </div>  \r\n            <div class=\"price-input\" fxLayoutGap=\"1rem\" fxLayout=\"row wrap\">\r\n              <mat-form-field  fxFlex=\"40\" appearance=\"fill\">\r\n              <mat-label>Min $</mat-label>\r\n              <input type=\"number\" #min (input)=\"onMinPriceRangeChange(min.value)\" value=\"{{min_price}}\" matInput min=\"0\" />\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"40\" appearance=\"fill\">    \r\n              <mat-label>Max $</mat-label>\r\n              <input type=\"number\" #max (input)=\"onMaxPriceRangeChange(max.value)\" value=\"{{max_price}}\" matInput min=\"1\"/>\r\n            </mat-form-field>\r\n          </div>         \r\n          </div>\r\n          <div class=\"filter\">\r\n            <div class=\"filter-inner\">\r\n              <!-- <button mat-mini-fab color=\"accent\"> \r\n                <mat-icon>edit icon</mat-icon>\r\n              </button> -->\r\n              <img src=\"assets/moodboard/images/qty.png\" class=\"filter-img\" alt=\"Cities\">\r\n              <div class=\"filter-label\">\r\n                <label>AVAILIBEL QUANTITY</label>\r\n              </div>\r\n            </div>  \r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-label>Minimum</mat-label>\r\n              <input type=\"number\" #minQty (input)=\"onQtyChange(minQty.value)\" step=\"1\" matInput min=\"1\" value=\"{{min_price_inventory}}\"/>\r\n            </mat-form-field>             \r\n          </div>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"right\" fxFlex=\"80\" fxLayoutGap=\"2rem\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">      \r\n          <div class=\"right-head-search\" fxLayout=\"column\" >\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-label><mat-icon>search</mat-icon>Search Products</mat-label>\r\n              <input matInput (keyup)=\"search(searchInpt.value)\" value=\"\" #searchInpt type=\"search\" >\r\n            </mat-form-field>\r\n            <span><b>Add furniture to your moodboard</b></span>\r\n            <span>Search for a product and add it to your moodboard</span>\r\n          </div>\r\n          <div class=\"right-head\" fxFlex=\"100\" fxLayoutGap=\"1rem\" fxLayout=\"column\" >\r\n            <mat-card style=\"max-height: 580px; overflow-y: scroll;\">\r\n              <mat-grid-list cols=\"4\" rowHeight=\"1:1\">\r\n                <ng-container *ngFor=\"let item of items; let i = index\">\r\n                  <mat-grid-tile (click)=\"productDetails(item, moodboardDetails)\" class=\"tile\">\r\n                    <mat-card style=\"width: 100%;\" class=\"cardImg\" >\r\n                      <div class=\"tile-box\">{{item.total_warehouse_quantity}}</div>  \r\n                      <img width=\"100%\" class=\"img\" src=\"{{item.product_sku_vartion.get_display_image[0].image_url.large}}\" alt=\"{{item.product_name}}\"/></mat-card>\r\n                  </mat-grid-tile>\r\n                </ng-container>\r\n              </mat-grid-list>\r\n            </mat-card>\r\n          </div>\r\n        \r\n                \r\n      </div>\r\n    </div>\r\n    <div class=\"mb-details margin-top30\" fxLayout=\"column\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"stretch\">\r\n      <div class=\"head\" fxFlex=\"100\" fxLayout=\"row\"  fxLayoutAlign=\"space-between center\" >\r\n          <div class=\"title\">MY MOODBOARD</div>\r\n          <button\r\n          mat-raised-button\r\n          (click)=\"scroll(mbsummary)\"\r\n          color=\"accent\"\r\n          aria-label=\"\"\r\n        >VIEW MOODBOARD SUMMARY</button>\r\n\r\n      </div>\r\n      <mat-card>\r\n        <mat-grid-list cols=\"5\" rowHeight=\"1:1\">\r\n          <ng-container *ngFor=\"let mbItem of moodboardDetails?.moodboard_items; let i = index\">\r\n            <mat-grid-tile class=\"tile\">\r\n              <mat-card fxFlex=\"100\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\" class=\"cardImg\" >\r\n                <div class=\"badge\" style=\"text-align: center;width: 20%;\">{{ mbItem.button_type == 0 ?  'Rent' :'Buy'}}</div>  \r\n                <img width=\"100%\" height=\"100px\" class=\"img\" src=\"{{mbItem?.variation.images[0].image_url.large}}\" alt=\"{{mbItem.name}}\"/>\r\n                <div class=\"title\" height=\"60px\" fxLayout=\"row\"  fxLayoutAlign=\"center center\">{{mbItem.name}}</div>\r\n                <div class=\"action\" fxLayout=\"row\"  fxLayoutAlign=\"center stretch\">\r\n                  <input type=\"number\" #qty min=\"1\" value=\"1\" max=\"{{mbItem?.total_warehouse_quantity}}\" step=\"1\"/>\r\n                  <mat-icon style=\"cursor: pointer; color: #A8A8A8;\" *ngIf=\"userid==mbItem?.userid\" (click)=\"deleteItem(mbItem)\" >delete</mat-icon>\r\n                </div>\r\n              </mat-card>\r\n              </mat-grid-tile>\r\n          </ng-container>\r\n        </mat-grid-list>\r\n        <div class=\"head margin-top30\" fxLayout=\"column\"  fxLayoutAlign=\"stretch\" >\r\n          <div class=\"head\" fxLayout=\"row\"  fxLayoutAlign=\"space-between center\" >\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-select >\r\n                <mat-option *ngFor=\"let qoute of mbQuotesList\" [value]=\"qoute.sgid\">{{qoute.sgid}}-{{qoute.name}}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>             \r\n          </div>\r\n          <div class=\"head\" fxLayout=\"row\"  fxLayoutAlign=\"space-between center\" >\r\n            <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\"  fxLayoutAlign=\"space-between center\">\r\n              <button\r\n              mat-raised-button\r\n              color=\"accent\"\r\n              style=\"background-color: #2C2C2C; color:#fff;\"\r\n              aria-label=\"\"\r\n              (click)=\"createNewQuote()\"\r\n            >CREATE NEW QUOTE</button>\r\n            <button\r\n            mat-raised-button\r\n            color=\"accent\"\r\n            aria-label=\"\"\r\n          >ADD TO QUOTE OR ORDER</button>\r\n            </div>\r\n            <div class=\"head\" fxLayout=\"row\"  fxLayoutGap=\"1rem\"  fxLayoutAlign=\"space-between center\">\r\n              <button\r\n              mat-raised-button\r\n              color=\"accent\"\r\n              aria-label=\"\"\r\n              (click)=\"requestRendering();\"\r\n              style=\"background-color: #80BAFE;\"\r\n            >REQUEST RENDERING</button>\r\n            <button\r\n            mat-raised-button\r\n            color=\"accent\"\r\n            aria-label=\"\"\r\n            (click)=\"generateMDPdf()\"\r\n            style=\"background-color: #80BAFE;\"\r\n          >GENERATE MOODBOARD QUOTE PDF</button>\r\n            </div>\r\n          </div>\r\n\r\n\r\n      </div>\r\n     </mat-card>\r\n    </div>\r\n\r\n    <div class=\"mb-summary\" #mbsummary fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\r\n      <div\r\n        class=\"mb-summary__info\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"start start\"\r\n      >\r\n        <div><span class=\"mb-summary__info--value\">MOODBOARD SUMMARY</span></div>\r\n        <div\r\n        class=\"mb-summary__info\"\r\n        fxLayout=\"row\"\r\n        fxLayoutAlign=\"start start\"\r\n        fxLayoutGap=\"2rem\"\r\n      > <div>\r\n          <span class=\"mb-summary__info--label\">Customer City :</span>\r\n          <span class=\"mb-summary__info--value\"> {{moodboardDetails?.moodboard?.city}}</span>\r\n        </div>\r\n        <div>\r\n          <span class=\"mb-summary__info--label\">Zipcode:</span>\r\n          <span class=\"mb-summary__info--value\">{{moodboardDetails?.moodboard?.zipcode}}</span>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <ag-grid-angular\r\n        [gridOptions]=\"gridOptions\"\r\n        style=\"height:600px; width: 100%\"\r\n        class=\"ag-theme-alpine quotes-table\"\r\n        [rowData]=\"rowData | async\"\r\n        [frameworkComponents]=\"frameworkComponents\"\r\n        [pinnedBottomRowData]=\"pinnedBottomRowData\"\r\n        [defaultColDef]=\"defaultColDef\"\r\n        [columnDefs]=\"columnDefs\"\r\n      >\r\n      </ag-grid-angular>\r\n      <div\r\n        class=\"mb-summary__actions\"\r\n        fxLayout=\"row\"\r\n        fxLayoutAlign=\"center\"\r\n        fxLayoutGap=\"2rem\"\r\n      >\r\n      <ng-content [select]=\"actions\">\r\n      </ng-content>\r\n      </div>\r\n    </div>\r\n</div>\r\n<ng-template #viewMoreCity>\r\n<div fxLayout=\"row-reverse\">\r\n  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n </div>\r\n  <div style=\"padding: 20px\" fxLayout=\"row wrap\" fxLayoutGap=\"2rem\">\r\n    <ng-container *ngFor=\"let city of (cityListDefault); let i = index\">\r\n        <mat-checkbox fxFlex=\"25\"\r\n          (change)=\"onCityChecked(city, i)\"\r\n          [checked]=\"city.isChecked\"\r\n          >\r\n          {{city.warehouse_name}}\r\n        </mat-checkbox>\r\n  </ng-container>\r\n</div>\r\n</ng-template>        \r\n<ng-template #viewMoreCat>\r\n  <div  fxLayout=\"row-reverse\">\r\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n</div>\r\n  <div style=\"padding: 10px\" fxLayout=\"row wrap\" fxLayoutGap=\"2rem\">\r\n    <ng-container *ngFor=\"let cat of (catListDefault); let i = index\">\r\n        <mat-checkbox fxFlex=\"20\"\r\n          (change)=\"onCategoriesChecked(cat, i)\"\r\n          [checked]=\"cat.isChecked\"\r\n          >\r\n          {{cat.name}}\r\n        </mat-checkbox>\r\n  </ng-container>\r\n</div>\r\n</ng-template>        ","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MoodboardService } from '../../services/moodboard.service';\r\nimport { ToasterService, UserService } from 'projects/core/src/public-api';\r\n\r\n@Component({\r\n  selector: 'lib-create-moodboard',\r\n  templateUrl: './create-moodboard.component.html',\r\n  styleUrls: ['./create-moodboard.component.scss']\r\n})\r\nexport class CreateMoodboardComponent implements OnInit {\r\n  bannerIconImg: any = 'assets/moodboard/images/mb.png';\r\n  bannerIconImgTxt: any = 'Moodboard';\r\n  bottomTxt: any = 'Style & create look from our collection of designer furniture';\r\n  mbCreateForm: FormGroup;\r\n  stateList: any = [];\r\n  mbTypeList: any = [];\r\n  catagorydata = [{\r\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\r\n      value: 'Living Room',\r\n      type_id: 1\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\r\n      value: 'Bedroom',\r\n      type_id: 2\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\r\n      value: 'Dining Room',\r\n      type_id: 3\r\n    },\r\n\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\r\n      value: 'Office',\r\n      type_id: 4\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\r\n      value: 'Outdoor',\r\n      type_id: 5\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\r\n      value: 'Others',\r\n      type_id: 6\r\n    }\r\n  ]\r\n  mbId: any = null;\r\n  currentPage: any = '';\r\n  boardname: any = '';\r\n  constructor(public fb: FormBuilder, private moodboardService:MoodboardService,\r\n    private _user: UserService, private _toster: ToasterService,\r\n    private activatedRoute: ActivatedRoute, private router: Router) {\r\n    this.mbCreateForm = this.fb.group({\r\n                          moodboardName: ['', Validators.required],\r\n                          moodboardType: ['', Validators.required],\r\n                          moodboardCompany: ['', Validators.required],\r\n                          moodboardProjectName: ['', Validators.required],\r\n                          moodboardState: ['', Validators.required],\r\n                          moodboardCity: ['', Validators.required],\r\n                          moodboardZip: ['', Validators.required]\r\n                        });\r\n      this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\r\n      this.currentPage = this.router.url.split('/')[2];                  \r\n     }\r\n  ngOnInit(): void {\r\n    this.getStates();\r\n    this.getMoodBoardType();  \r\n    this.getcompanyByUserMoodboard();\r\n    if(this.mbId != null){\r\n      this.getMoodboard();\r\n    }\r\n  }\r\n  getMoodBoardType(){\r\n    this.moodboardService.getMoodBoardType().subscribe((response:any) => {\r\n      this.mbTypeList = response.result;\r\n      this.catagorydata = this.mbTypeList.map((item: any, i: any) => Object.assign({}, item, this.catagorydata[i]));\r\n    });    \r\n  }\r\n  getcompanyByUserMoodboard(){\r\n    this.moodboardService.getcompanyByUserMoodboard().subscribe((response:any) => {\r\n      this.mbCreateForm.patchValue({moodboardCompany:response.result[0].company});\r\n    });    \r\n  }\r\n  validatedCityZipCode(){\r\n    let param = {zipcode: this.mbCreateForm.value.moodboardZip, \r\n      city_name: this.mbCreateForm.value.moodboardCity};\r\n    this.moodboardService.validatedCityZipCode(param).subscribe((response:any) => {\r\n       response.result;\r\n    });    \r\n  }\r\n  getStates(){\r\n    this.moodboardService.getStateList().subscribe((response:any) => {\r\n      this.stateList = response.states;\r\n    });    \r\n\r\n  }\r\n  getMoodboard(){\r\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response:any) => {\r\n      this.boardname = response.moodboard.boardname;\r\n      this.mbCreateForm.setValue({\r\n        moodboardName: response.moodboard.boardname,\r\n        moodboardType: response.moodboard.boardtypeid,\r\n        moodboardCompany: response.moodboard.company_name,\r\n        moodboardProjectName: response.moodboard.project_name,\r\n        moodboardState: response.moodboard.state,\r\n        moodboardCity: response.moodboard.city,\r\n        moodboardZip: response.moodboard.zipcode\r\n      });\r\n    });    \r\n  }\r\n  resetForm(){\r\n    this.mbCreateForm.reset();\r\n  }\r\n  onSubmit() {\r\n    let val = this.mbCreateForm.value;\r\n    let param: {[index: string]:any} = { \r\n      moodboard_name: val.moodboardName,\r\n      moodboard_type: val.moodboardType,\r\n      company_name: val.moodboardCompany,\r\n      project_name: val.moodboardProjectName,\r\n      state: val.moodboardState,\r\n      city: val.moodboardCity,\r\n      zipcode: val.moodboardZip,\r\n      userid: this._user.getUser().getId()\r\n    }\r\n    if(this.mbId!== '' && this.currentPage != 'create') { \r\n      param['moodboard_id'] = this.mbId;\r\n      this.moodboardService.updateMoodboard(param).subscribe((response:any) => {\r\n        if(response.statusCode === 200){ \r\n          this._toster.success(response.message);\r\n          this.router.navigate(['moodboard',response.moodboard_id])\r\n      }\r\n        else this._toster.error(response.message);\r\n      }, error => this._toster.error('Please contact site administrator!')\r\n      );\r\n    }else{\r\n      this.moodboardService.createMoodboard(param).subscribe((response:any) => {\r\n        if(response.statusCode === 200)\r\n        { this._toster.success(response.message);\r\n          this.router.navigate(['moodboard',response.moodboard_id])\r\n        }\r\n        else this._toster.error(response.message);\r\n      }, error => this._toster.error('Please contact site administrator!')\r\n      );\r\n    }\r\n  }\r\n}\r\n","<div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n  <div class=\"mb-details\" fxLayout=\"row\" fxLayoutAlign=\" stretch\">\r\n    <div\r\n      class=\"mb-details__icon\"\r\n      fxFlex=\"100\"\r\n      fxLayout=\"row-reverse\"\r\n      fxLayoutAlign=\"center center\"\r\n    >\r\n            <span>{{bannerIconImgTxt}}</span>\r\n      <img [src]=\"bannerIconImg\" alt=\"{{bannerIconImgTxt}}\" srcset=\"\" />\r\n\r\n</div>\r\n</div>\r\n</div>\r\n<ng-container *ngIf=\"bottomTxt\">\r\n  <div class=\"banner-bottom\">\r\n    <div class=\"banner-bottom-txt\">{{ bottomTxt }}</div>\r\n  </div>\r\n</ng-container>\r\n\r\n\r\n<div class=\"mb\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n        <span *ngIf=\"mbId == null\" class=\"mb-create-text\">CREATE A NEW MOODBOARD</span>\r\n        <span *ngIf=\"mbId != '' && currentPage != 'create'\" class=\"mb-create-text\">Editing Moodboard named <strong>{{boardname}}</strong></span>\r\n        <span *ngIf=\"currentPage == 'create' && mbId != null\" class=\"mb-create-text\">Copying Moodboard named <strong>{{boardname}}</strong></span>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"mb-form\">\r\n  <form [formGroup]=\"mbCreateForm\"  class=\"add-field\" (ngSubmit)=\"onSubmit()\">\r\n          <h2 style=\"text-align: center;\">Moodboard Type *</h2>\r\n          <mat-button-toggle-group formControlName=\"moodboardType\" aria-label=\"Moodboard Type\">\r\n            <ng-container *ngFor=\"let item of catagorydata; let i = index\">\r\n            <mat-button-toggle value=\"{{item?.type_id}}\">\r\n              <mat-card class=\"example-card\">\r\n                <img mat-card-image   src=\"{{item.imageSrc}}\" alt=\"{{item.value}}\">\r\n                <mat-card-content>\r\n                  <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n                    <div fxLayout=\"row\" class=\"text-lable\" >{{item.value}}</div>\r\n                  </div>\r\n                </mat-card-content>\r\n              </mat-card>\r\n            </mat-button-toggle>\r\n            </ng-container>\r\n          </mat-button-toggle-group>\r\n<div class=\"mb-form-inner\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \r\n    <mat-form-field appearance = \"fill\">\r\n      <label for=\"moodboardName\">Moodboard Name *</label>\r\n      <input formControlName=\"moodboardName\" matInput placeholder = \"Name your Board\">\r\n    </mat-form-field>\r\n\r\n   <mat-form-field appearance = \"fill\">\r\n    <label for=\"moodboardCompany\">Company Name *</label>\r\n    <input formControlName=\"moodboardCompany\" matInput placeholder = \"Enter Company Name\">\r\n </mat-form-field>\r\n <mat-form-field appearance = \"fill\">\r\n  <label for=\"moodboardProjectName\">Project Name *</label>\r\n  <input formControlName=\"moodboardProjectName\" matInput placeholder = \"Name your Project\">\r\n</mat-form-field>\r\n\r\n  </div>\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \r\n    <mat-form-field appearance = \"fill\">\r\n      <mat-label>State *</mat-label>\r\n        <mat-select formControlName=\"moodboardState\">\r\n          <mat-option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">{{state.name}}</mat-option>\r\n        </mat-select>\r\n\r\n    </mat-form-field>\r\n    <mat-form-field appearance = \"fill\">\r\n      <label for=\"moodboardCity\">City *</label>\r\n      <input formControlName=\"moodboardCity\" matInput placeholder = \"Enter a City\">\r\n   </mat-form-field>\r\n   <mat-form-field appearance = \"fill\">\r\n    <label for=\"moodboardZip\">Zip Code *</label>\r\n    <input (input)=\"validatedCityZipCode()\" formControlName=\"moodboardZip\" matInput placeholder = \"Add a ZipCode\">\r\n </mat-form-field>\r\n  </div>\r\n</div>\r\n<div class=\"mb-form-inner\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n  <button *ngIf=\"mbId == '' || mbId != '' && currentPage == 'create'\"           mat-raised-button\r\n  color=\"accent\"  type=\"submit\" mat-button>CREATE</button>\r\n  <button *ngIf=\"mbId != '' && currentPage != 'create'\" type=\"submit\"           mat-raised-button\r\n  color=\"accent\" mat-button>UPDATE</button>\r\n  <button (click)=\"resetForm();\"  mat-raised-button color=\"accent\"  mat-button>CANCEL</button>\r\n  <div fxLayoutGap=\"4rem\"></div>         \r\n\r\n</div>          \r\n\r\n</form>  \r\n</div>          \r\n      \r\n     \r\n\r\n\r\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { Routes } from '@angular/router';\r\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\r\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\r\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\r\n\r\nexport const moodboardRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MoodboardListComponent\r\n  },{\r\n    path: 'create',\r\n    component: CreateMoodboardComponent\r\n  },{\r\n    path: 'create/:id',\r\n    component: CreateMoodboardComponent\r\n  },{\r\n    path: 'edit/:id',\r\n    component: CreateMoodboardComponent\r\n  },{\r\n    path:':id',\r\n    component:MoodboardComponent\r\n  }\r\n];\r\n\r\n\r\n\r\n\r\n","/*\r\n * Public API Surface of shop\r\n */\r\n\r\nexport * from './lib/service/shop.service';\r\nexport * from './lib/components/shop/shop.component';\r\nexport * from './lib/components/product-details/product-details.component';\r\nexport * from './lib/shop.module';\r\n"],"sourceRoot":"webpack:///"}