{"version":3,"sources":["./projects/moodboard/src/lib/moodboard.module.ts","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.html","./projects/moodboard/src/lib/components/moodboard-list/moodboard-list.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.ts","./projects/moodboard/src/lib/components/moodboard/moodboard.component.html","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.ts","./projects/moodboard/src/lib/components/create-moodboard/create-moodboard.component.html","./projects/moodboard/src/lib/moodboard-routing.ts","./projects/shop/src/projects.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"names":[],"mappings":"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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;GAEG;AAEwC;AACU;AACsB;AACzC;;;;;;;;;;;;;ACPlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiL;AACtF;AAC9B;AACV;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACwC;AACI;;AAE5C;AACA;AACA;AACA,4BAA4B,cAAc,kBAAkB,eAAe,cAAc,kBAAkB,gBAAgB,2BAA2B,MAAM,OAAO,QAAQ,SAAS,kBAAkB,aAAa,mBAAmB,uBAAuB,YAAY,UAAU,SAAS,0EAA0E,aAAa,mBAAmB,YAAY,WAAW,2BAA2B,gBAAgB,eAAe,kBAAkB,OAAO,QAAQ,8EAA8E,SAAS,UAAU,mBAAmB,kBAAkB,gGAAgG,YAAY,mCAAmC,aAAa,sBAAsB,UAAU,sBAAsB,gBAAgB,qCAAqC,SAAS,UAAU,mBAAmB,kBAAkB,yCAAyC,aAAa,qCAAqC,MAAM,qCAAqC,SAAS,gCAAgC,mBAAmB,0CAA0C,gBAAgB,kBAAkB,sCAAsC,aAAa;AAC9vC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;A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,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,qHAAqH;AACpL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,uBAAuB;AACvB,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY,OAAO,iBAAiB,KAAK,eAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,KAAK,iBAAiB,MAAM,OAAO;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,KAAK,KAAK,OAAO,SAAS,KAAK,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB,MAAM,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc,KAAK,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAsC,KAAK,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sCAAsC,KAAK,qBAAqB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+EAA+E,MAAM;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA,qDAAqD,MAAM;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA,4CAA4C,kFAAoB;AAChE;AACA;AACA,sBAAsB,qBAAqB;AAC3C,2BAA2B,mBAAmB,2BAA2B,EAAE;AAC3E;AACA,qBAAqB,wBAAwB;AAC7C;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"moodboard-src-lib-moodboard-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\r\nimport { moodboardRoutes } from './moodboard-routing';\r\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\r\nimport { CoreModule } from 'projects/core/src/public-api';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport { CommonModule } from \"@angular/common\";\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport { CreateMoodboardPopupComponent } from './components/create-moodboard-popup/create-moodboard-popup.component';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MoodboardListComponent,\r\n    MoodboardComponent,\r\n    CreateMoodboardComponent,\r\n    CreateMoodboardPopupComponent,\r\n  ],\r\n  imports: [\r\n    CoreModule,\r\n    FlexLayoutModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    CommonModule,\r\n    MatSelectModule,\r\n    MatGridListModule,\r\n    MatStepperModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatTabsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    AgGridModule,\r\n    MatCheckboxModule ,\r\n    MatDividerModule,\r\n    InfiniteScrollModule,\r\n    RouterModule.forChild(moodboardRoutes),\r\n  ],\r\n  exports : []\r\n})\r\nexport class MoodboardModule { }\r\n","<app-banner [iconSrc]=\"bannerIconImg\" [iconAltTxt]=\"bannerIconImgTxt\" \r\n[leftTxt]=\"'MoodBoard'\" [src]=\"bannerImg\" [altTxt]=\"bannerImgTxt\" [bottomTxt]=\"bannerBottomTxt\"></app-banner>\r\n<div class=\"mb\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" (click)=\"createMB()\">\r\n        <a mat-button  mat-raised-button><mat-icon inline=\"true\">add_circle_outline</mat-icon>\r\n        </a>\r\n        <span class=\"mb-create-text h2\">Create a new Moodboard</span>\r\n    </div>\r\n    <!-- <div class=\"vertical\" ></div> -->\r\n    <!-- <div fxFlex=\"40\" class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\"  fxLayoutGap=\"2rem\"> -->\r\n        <!-- <mat-form-field fxFlex appearance=\"outline\" class=\"select\">\r\n            <mat-label>Select a Project</mat-label>\r\n            <mat-select (selectionChange)=\"projectFilter($event.value)\">\r\n              <mat-option  *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</mat-option>\r\n            </mat-select>\r\n        </mat-form-field> -->\r\n        <!-- <select (change)=\"projectFilter($event)\">\r\n          <option value=\"\">Select a Project</option>\r\n          <option *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</option>\r\n        </select>\r\n    </div> -->\r\n</div>\r\n<mat-tab-group  color=\"accent\" class=\"tabs\" (selectedTabChange)=\"onTabChanged($event);\" mat-align-tabs=\"center\">\r\n    <mat-tab  *ngFor=\"let item of tabsData; index as i; \" label=\"{{item.title}}\">\r\n      <div fxLayout=\"row\"  fxLayoutAlign=\"center center\" >\r\n        <select (change)=\"projectFilter($event)\" [(ngModel)]=\"projectName\">\r\n          <option value=\"\">Select a Project</option>\r\n          <option *ngFor=\"let project of projectList\" [value]=\"project.project_name\">{{project.project_name}}</option>\r\n        </select>\r\n      </div>\r\n        <div class=\"tabs-container\" fxLayout=\"row wrap\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"center center\">\r\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\r\n                <div fxFlex=\"30\" class=\"tile\"  >\r\n                    <div fxLayout=\"column\" class=\"card\" fxLayoutAlign=\"center center\">\r\n                        <div class=\"remove-wrapper\" *ngIf=\"selectedIndex == 1\" (click)=\"removeMB(item.sgid);\">\r\n                          <a class=\"fa fa-trash pointer ng-star-inserted\" style=\"float: right; margin: 10px 10px 0 0;\"></a>\r\n                        </div>  \r\n                      <img  width=\"100%\" (click)=\"mbDetails(item.sgid);\" height=\"300px\" [src]=\"item?.is_moodboard_images?.large ? item?.is_moodboard_images?.large : defaultImg\" alt=\"{{item?.boardname}}\">\r\n                        <div class=\"content\" (click)=\"mbDetails(item.sgid);\">\r\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n                            <div class=\"h3\" >Board Name: </div>\r\n                            <div class=\"\" >{{item.boardname}}</div>  \r\n                          </div>\r\n                          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n                            <div class=\"h3\" >Created By: </div>\r\n                            <div class=\"\" >{{item.user?.first_name + ' ' + item.user?.last_name}}</div>\r\n                          </div>\r\n                          <div fxLayout=\"row\" *ngIf=\"isInternal\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n                            <div class=\"h3\" >Source: </div>\r\n                            <div class=\"\" *ngIf=\"item.application_type == 2\">Business Inhabitr</div>\r\n                            <div class=\"\" *ngIf=\"item.application_type == 1\">PDM</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                </div>\r\n           </ng-container>\r\n           </div>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n  \r\n<!-- <app-tabs [data]=\"tabsData\">\r\n        <mat-grid-list cols=\"3\" rowHeight=\"1:1\">\r\n            <ng-container *ngFor=\"let item of tabContent; let i = index\">\r\n                <mat-grid-tile (click)=\"mbDetails(item.sgid);\" >\r\n                    <app-cart  cart [data]=\"item\"></app-cart>\r\n                </mat-grid-tile>\r\n            </ng-container>\r\n             <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile>\r\n            <mat-grid-tile><app-cart  cart [data]=\"item\"></app-cart></mat-grid-tile> \r\n          </mat-grid-list>\r\n</app-tabs> -->\r\n","import { AfterContentInit, Component, ContentChildren, OnInit, QueryList } from '@angular/core';\r\nimport { MatTab } from '@angular/material/tabs';\r\nimport { Router } from '@angular/router';\r\nimport { ToasterService, UserService } from 'projects/core/src/public-api';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { MoodboardService } from '../../services/moodboard.service';\r\n\r\n@Component({\r\n  selector: 'lib-moodboard-list',\r\n  templateUrl: './moodboard-list.component.html',\r\n  styleUrls: ['./moodboard-list.component.scss']\r\n})\r\nexport class MoodboardListComponent implements OnInit {\r\n\r\n  constructor(private moodboardService:MoodboardService, \r\n    private router: Router , \r\n    private _user:UserService,\r\n    private _toaster: ToasterService\r\n    ) {}\r\n  bannerIconImg: any = 'assets/moodboard/images/moodboard.svg';\r\n  bannerIconImgTxt: any = 'Moodboard';\r\n  bannerImgTxt: any = 'Moodboard';\r\n  bannerImg: any = 'assets/moodboard/images/mb-banner.jpg';\r\n  bannerTxt: any = 'MoodBoard';\r\n  bannerBottomTxt: any = 'Style & create look from our collection of designer furniture';\r\n  tabsData: any[] = [{title:'All Moodboards', content: '' },{title:'My Moodboards', content: '' },{title:'Disabled Moodboards', content: '' } ];\r\n  tabContent: any[]= [];    \r\n  projectList: any[] = [];\r\n  projectName: any = '';\r\n  selectedIndex: any = 0;\r\n  defaultImg=\"https://inhabitr-furniture-prod.s3.amazonaws.com/noimage.jpg\";\r\n  isInternal:boolean = false;\r\n  \r\n  ngOnInit(): void {\r\n    this.getMoodBoardList();\r\n    this.getProjectList();\r\n    this.isInternal = this._user.getUser().isInternalUser();\r\n  }\r\n  mbDetails(id: any){\r\n    this.router.navigateByUrl('/moodboard/'+id);\r\n  }\r\n  projectFilter(ev:any){\r\n    this.projectName = ev?.target.value;\r\n    this.onTabChanged({index: this.selectedIndex}); \r\n  }\r\n  getProjectList(){\r\n    this.moodboardService.getProjectList().subscribe((response:any) => {\r\n      this.projectList = response.moodboardProject;\r\n    });    \r\n  }\r\n  getMoodBoardList(){\r\n    let param = {supplier_id:0,project_name: this.projectName}\r\n    this.moodboardService.getMoodBoardList(param).subscribe((response:any) => {\r\n      this.tabContent = response.result;\r\n    });    \r\n  }\r\n  removeMB(sgid: any){\r\n    let param = {\"moodboard_id\":sgid,\"user_id\":this._user.getUser().getId()};\r\n    this.moodboardService.removeMyMB(param).subscribe((response:any) => {\r\n      this._toaster.success(response.message);\r\n    }, error => this._toaster.error('Please contact site administrator!')\r\n    );\r\n    \r\n  }\r\n  onTabChanged(ev: any){\r\n    this.selectedIndex = ev.index;\r\n    if(ev.index == 1) {\r\n      this.getMyMoodBoardList()\r\n    }\r\n    if(ev.index == 2) {\r\n      this.getDisabledMBList();\r\n    }\r\n    if(ev.index == 0) {\r\n      this.getMoodBoardList();\r\n    }\r\n  }  \r\n  createMB(){\r\n    this.router.navigate(['moodboard/create']);\r\n\r\n  }\r\n  getMyMoodBoardList(){\r\n    let param = {supplier_id:0,project_name: this.projectName}\r\n    this.moodboardService.getMyMoodBoardList(param).subscribe((response:any) => {\r\n      this.tabContent = response.result;\r\n    });    \r\n  }\r\n  getDisabledMBList(){\r\n    let param = {supplier_id:0,project_name: this.projectName}\r\n    this.moodboardService.getDisabledMBList(param).subscribe((response:any) => {\r\n      this.tabContent = response.result;\r\n    });    \r\n  }\r\n}","import { MatDialog } from '@angular/material/dialog';\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { QuoteCreateFormComponent } from 'projects/quote/src/lib/common/components/quote-create-form/quote-create-form.component';\r\nimport { AddproductComponent } from 'projects/quote/src/lib/common/components/addproduct/addproduct.component';\r\nimport { MoodboardService } from '../../services/moodboard.service';\r\nimport autoTable from 'jspdf-autotable';\r\n\r\nimport {\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  ICellRendererParams,\r\n} from 'ag-grid-community';\r\nimport {\r\n  ComputationService,\r\n  CoreService,\r\n  CounterComponent,\r\n  ImageRendererComponent,\r\n  PdfService,\r\n  ToasterService,\r\n  UserService,\r\n} from 'projects/core/src/public-api';\r\nimport {\r\n  BehaviorSubject,\r\n  merge,\r\n  Observable,\r\n  Subject,\r\n  Subscription,\r\n} from 'rxjs';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport {\r\n  ItemTypeComponent,\r\n  TotalCellRendererComponent,\r\n} from 'projects/quote/src/public-api';\r\nimport { calcPossibleSecurityContexts } from '@angular/compiler/src/template_parser/binding_parser';\r\nimport jsPDF from 'jspdf';\r\nimport { ProductDetailsComponent } from 'projects/shop/src/projects';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { StepperSelectionEvent } from '@angular/cdk/stepper';\r\nimport { MatTab, MatTabGroup } from '@angular/material/tabs';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'lib-moodboard',\r\n  templateUrl: './moodboard.component.html',\r\n  styleUrls: ['./moodboard.component.scss'],\r\n})\r\nexport class MoodboardComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  public mbId: any = '';\r\n  public userid: any = null;\r\n  selectedIndex = 0;\r\n  startCount = 0;\r\n  lastUserCount = 0;\r\n  placeholder = 'Search Products';\r\n  subscription: Subscription | null = null;\r\n  show = false;\r\n\r\n  @ViewChild('quickFilter', { static: true }) template: ElementRef | null =\r\n    null;\r\n  @ViewChild('stepper') private myStepper: MatStepper | null = null;\r\n  @ViewChild('tabsReference', { static: true })\r\n  tabsReference: MatTabGroup | null = null;\r\n\r\n  constructor(\r\n    private moodboardService: MoodboardService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private _pdf: PdfService,\r\n    private _router: Router,\r\n    private _dialog: MatDialog,\r\n    private _toaster: ToasterService,\r\n    private _user: UserService,\r\n    private _computationService: ComputationService,\r\n    private _coreService: CoreService\r\n  ) {\r\n    this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\r\n    this.userid = this._user.getUser().getId();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.setProductTab(0);\r\n  }\r\n  agGrid: GridReadyEvent = {} as GridReadyEvent;\r\n  bannerIconImg: any = 'assets/moodboard/images/moodboard.svg';\r\n  bannerIconImgTxt: any = 'Moodboard';\r\n  moodboardDetails: any = '';\r\n  mbQuotesList: any = [];\r\n  stateList: any = [];\r\n  selectedQuoteIdDD: any = 0;\r\n  categoriesList: Subject<any[]> = new Subject();\r\n  catListDefault: any[] = [];\r\n  selectedCategory: any = null;\r\n  cityList: Subject<any[]> = new Subject();\r\n  cityListDefault: any[] = [];\r\n  selectedCity: any = [];\r\n  min_price = new FormControl('');\r\n  max_price = new FormControl('');\r\n  min_price_inventory: any = '';\r\n  searchTxt: any = null;\r\n  items: any = [];\r\n  // min_price_change :BehaviorSubject<any> = new BehaviorSubject(null);\r\n  catagorydata = [\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\r\n      value: 'Living Room',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\r\n      value: 'Bedroom',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\r\n      value: 'Dining Room',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\r\n      value: 'Office',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\r\n      value: 'Outdoor',\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\r\n      value: 'Others',\r\n    },\r\n  ];\r\n  frameworkComponents = {\r\n    ImageRendererComponent: ImageRendererComponent,\r\n    TotalCellRendererComponent: TotalCellRendererComponent,\r\n    ItemTypeCellRenderer: ItemTypeComponent,\r\n    CounterCellRenderer: CounterComponent,\r\n  };\r\n  pinnedBottomRowData = [\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'SUB TOTAL ($)',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'DELIVERY FEE ($)',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'TAXES ($)',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n    {\r\n      subTotal: 'abc',\r\n      sgid: 'TOTAL ($)',\r\n      is_total: '0',\r\n      isExtraRow: true,\r\n    },\r\n  ];\r\n\r\n  columnDefs = [\r\n    {\r\n      field: 'sgid',\r\n      width: 120,\r\n      headerName: '',\r\n      headerTooltip: '',\r\n      colSpan: (params: any) => (params.data.subTotal === 'abc' ? 10 : 1),\r\n      cellStyle: (params: any) => {\r\n        if (params.data.subTotal === 'abc') {\r\n          return { 'text-align': 'end' };\r\n        }\r\n        return '';\r\n      },\r\n    },\r\n    { field: 'warehouse_name', headerName: 'CITY' },\r\n    { field: 'sku', headerName: 'SKU' },\r\n    {\r\n      headerName: 'IMAGE',\r\n      cellRenderer: 'ImageRendererComponent',\r\n      field: 'variation.images[0].image_url.small',\r\n      cellStyle: {\r\n        padding: '0.3rem',\r\n      },\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data?.variation?.images[0]?.image_url?.small;\r\n      },\r\n    },\r\n    {\r\n      headerName: 'PRODUCT NAME',\r\n      field: 'name',\r\n      width: '250px',\r\n    },\r\n    {\r\n      headerName: 'TYPE',\r\n      field: 'button_type',\r\n      cellRenderer: 'ItemTypeCellRenderer',\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 0 ? 'Rent' : 'Buy';\r\n      },\r\n    },\r\n    {\r\n      headerName: 'QUANTITY',\r\n      field: 'is_qty',\r\n      cellRenderer: 'CounterCellRenderer',\r\n    },\r\n    {\r\n      headerName: 'BUY PRICE ($)',\r\n      field: 'buy_price',\r\n      valueGetter: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 1 ? params.data.buy_price : 'NA';\r\n      },\r\n    },\r\n    {\r\n      headerName: 'RENTAL PRICE ($) /MONTH',\r\n      field: 'price',\r\n      cellRenderer: (params: ICellRendererParams) => {\r\n        return params.data.button_type === 0 ? params.value : 'NA';\r\n      },\r\n    },\r\n    // { headerName: 'DISCOUNT ($)', field: 'discount' },\r\n\r\n    {\r\n      headerName: 'MONTHS',\r\n      field: 'months',\r\n    },\r\n    {\r\n      headerName: 'TOTAL ($)',\r\n      field: 'is_total',\r\n      cellRenderer: 'TotalCellRendererComponent',\r\n    },\r\n  ];\r\n  rowData: Observable<any[]> = new Observable();\r\n  gridOptions: GridOptions = {\r\n    onGridReady: (api: GridReadyEvent) => {\r\n      this.agGrid = api;\r\n      this.onGridReady(api);\r\n    },\r\n    rowHeight: 100,\r\n    headerHeight: 100,\r\n    getRowHeight: (params: any) => {\r\n      return params?.data?.isExtraRow ? 50 : 100;\r\n    },\r\n  };\r\n  defaultColDef = {\r\n    wrapText: true,\r\n    cellClass: 'grid-cell',\r\n    cellStyle: {\r\n      'line-height': 'normal',\r\n      'align-items': 'center',\r\n      'justify-content': 'center',\r\n      display: 'flex',\r\n      padding: '0 0.5rem',\r\n    },\r\n  };\r\n  onGridReady(evt: GridReadyEvent) {\r\n    this.agGrid = evt;\r\n    evt.api.sizeColumnsToFit();\r\n    this.rowData = this.getMoodboardSummary();\r\n  }\r\n  getMoodboardSummary<T>(): Observable<T> {\r\n    return this.moodboardService.getMBSummary<T>(this.mbId).pipe(\r\n      tap((x: any) => {\r\n        this.agGrid.api.redrawRows();\r\n      }),\r\n      map((data: any) => {\r\n        return data.map((item: any, index: number) => {\r\n          item.sgid = index + 1;\r\n          return item;\r\n        });\r\n      })\r\n    );\r\n  }\r\n  openModal(templateRef: any) {\r\n    let dialogRef = this._dialog.open(templateRef, {\r\n      width: '90%',\r\n      maxHeight: '85vh',\r\n      disableClose: true,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('The dialog was closed');\r\n      // this.animal = result;\r\n    });\r\n  }\r\n  closeModal() {\r\n    this._dialog.closeAll();\r\n  }\r\n  updateBottomData(data: any) {\r\n    this.pinnedBottomRowData[1].is_total = data?.delivery_fee;\r\n    this.pinnedBottomRowData[2].sgid =\r\n      'TAXES (' + data?.states?.sale_tax_rate + '%) ($)';\r\n    this.pinnedBottomRowData[2].is_total = data?.tax_amount;\r\n    this.pinnedBottomRowData[3].is_total = data?.tax_amount;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getMoodboard();\r\n    this.getCity();\r\n    this.getCategory();\r\n    this.getItems();\r\n    this.getMBQuote(this.mbId);\r\n    this.subscription = merge(\r\n      this.min_price.valueChanges,\r\n      this.max_price.valueChanges\r\n    )\r\n      .pipe(debounceTime(2000), distinctUntilChanged())\r\n      .subscribe((data: any) => {\r\n        this.onPriceChange();\r\n      });\r\n    // this.min_price.valueChanges.pipe(debounceTime(2000) , distinctUntilChanged()).subscribe((data:any) => {\r\n    //   this.onMinPriceRangeChange(data);\r\n    // })\r\n    // this.max_price.valueChanges.pipe(debounceTime(2000) , distinctUntilChanged()).subscribe((data:any) => {\r\n    //   this.onMaxPriceRangeChange(data);\r\n    // })\r\n  }\r\n  scroll(el: HTMLElement) {\r\n    el.scrollIntoView();\r\n  }\r\n  requestRendering() {\r\n    this.moodboardService\r\n      .requestRendering({ moodboard_id: this.mbId })\r\n      .subscribe(\r\n        (response: any) => {\r\n          this._toaster.success('Request ' + response.result);\r\n        },\r\n        (error) => {\r\n          this._toaster.error('Request failed. please try later');\r\n        }\r\n      );\r\n  }\r\n  resetFilter() {\r\n    this.cityListDefault.map((el) => (el.isChecked = false));\r\n    this.cityListDefault.sort((a, b) =>\r\n      a.warehouse_name > b.warehouse_name ? 1 : -1\r\n    );\r\n    this.catListDefault.map((el) => (el.isChecked = false));\r\n    this.catListDefault.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n    this.categoriesList.next(this.catListDefault);\r\n    this.cityList.next(this.cityListDefault);\r\n    this.selectedCategory = [];\r\n    this.selectedCity = [];\r\n    this.max_price.patchValue('', { emitEvent: false });\r\n    this.min_price.setValue('', { emitEvent: false });\r\n    this.min_price_inventory = '';\r\n    this.resetList();\r\n    this.getItems();\r\n  }\r\n  selectedQuote(ev: any) {\r\n    this.selectedQuoteIdDD = ev.target.value;\r\n  }\r\n\r\n  getMBQuote(mbId: any) {\r\n    this.moodboardService.getMBQuote(mbId).subscribe((response: any) => {\r\n      this.mbQuotesList = response.quote;\r\n      this.selectedQuoteIdDD = response.quote[0]?.sgid;\r\n    });\r\n  }\r\n  addToQuote() {\r\n    this._dialog\r\n      .open(AddproductComponent, {\r\n        height: '80%',\r\n        width: '50%',\r\n        data: {\r\n          isDialog: true,\r\n          quoteId: this.selectedQuoteIdDD,\r\n          mbid: this.mbId,\r\n        },\r\n      })\r\n      .afterClosed()\r\n      .subscribe((data) => {\r\n        console.log(data);\r\n      });\r\n  }\r\n  getMoodboard() {\r\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response: any) => {\r\n      this.moodboardDetails = response;\r\n      this.updateBottomData(response.moodboard);\r\n    });\r\n  }\r\n  getCategory() {\r\n    this.moodboardService\r\n      .getCategoryList()\r\n      .pipe(\r\n        map((item: any) => {\r\n          item.result.map((i: any, index: any) => {\r\n            i['isChecked'] = false;\r\n            i['order'] = index;\r\n            return i;\r\n          });\r\n          return item;\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        this.categoriesList.next(response.result);\r\n        this.catListDefault = response.result;\r\n      });\r\n  }\r\n  getCity() {\r\n    this.moodboardService\r\n      .getCityList()\r\n      .pipe(\r\n        map((item: any) => {\r\n          item.data.map((i: any, index: any) => {\r\n            i['isChecked'] = false;\r\n            i['order'] = index;\r\n            return i;\r\n          });\r\n          return item;\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        this.cityList.next(response.data);\r\n        this.cityListDefault = response.data;\r\n      });\r\n  }\r\n  getItems(\r\n    start: number = 0,\r\n    count: number = 20,\r\n    category: any = null,\r\n    supplier: any = null,\r\n    warehouse: any = null,\r\n    max_price: any = 0,\r\n    min_price: any = 0,\r\n    min_price_inventory: any = 0,\r\n    searchTxt: any = null\r\n  ) {\r\n    let param = {\r\n      start: this.lastUserCount,\r\n      count: count,\r\n      category: category,\r\n      supplier: supplier,\r\n      warehouse: warehouse,\r\n      min_price: min_price,\r\n      max_price: max_price,\r\n      min_price_inventory: min_price_inventory,\r\n      keywords: searchTxt,\r\n    };\r\n    this.moodboardService.getItems(param).subscribe((response: any) => {\r\n      // this.items = response.result;\r\n      this.updateList(response.result);\r\n      this.items = this.getLastViewedUserList();\r\n    });\r\n  }\r\n  editMB() {\r\n    this.router.navigateByUrl('/moodboard/edit/' + this.mbId);\r\n  }\r\n  copyMB() {\r\n    this.router.navigateByUrl('/moodboard/create/' + this.mbId);\r\n  }\r\n  onCityChecked(city: any, i: any) {\r\n    if (city.isChecked) city.isChecked = false;\r\n    else city.isChecked = true;\r\n    this.cityListDefault[i] = city;\r\n    this.cityListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\r\n    this.cityList.next(this.cityListDefault);\r\n    this.selectedCity = this.cityListDefault.filter((item) => item.isChecked);\r\n    this.resetList();\r\n    this.getItems(\r\n      0,\r\n      20,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n\r\n  onCategoriesChecked(cat: any, i: any) {\r\n    if (cat.isChecked) cat.isChecked = false;\r\n    else cat.isChecked = true;\r\n    this.catListDefault[i] = cat;\r\n    this.catListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\r\n    this.categoriesList.next(this.catListDefault);\r\n    this.selectedCategory = this.catListDefault.filter(\r\n      (item) => item.isChecked\r\n    );\r\n    this.resetList();\r\n    this.getItems(\r\n      0,\r\n      20,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n\r\n  onPriceChange() {\r\n    this.resetList();\r\n    this.getItems(\r\n      0,\r\n      20,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  onMinPriceRangeChange(ev: any) {\r\n    // this.min_price = ev;\r\n    this.resetList();\r\n    this.getItems(\r\n      0,\r\n      20,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  onMaxPriceRangeChange(ev: any) {\r\n    // this.max_price = ev;\r\n    this.resetList();\r\n    this.getItems(\r\n      0,\r\n      20,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  onQtyChange(ev: any) {\r\n    this.min_price_inventory = ev;\r\n    this.resetList();\r\n    this.getItems(\r\n      0,\r\n      20,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n  search(ev: any) {\r\n    this.searchTxt = ev == '' ? null : ev;\r\n    this.resetList();\r\n    this.getItems(\r\n      0,\r\n      20,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n\r\n  createNewQuote() {\r\n    this._dialog\r\n      .open(QuoteCreateFormComponent, {\r\n        height: '500px',\r\n        width: '800px',\r\n        data: {\r\n          isDialog: true,\r\n        },\r\n      })\r\n      .afterClosed()\r\n      .subscribe((data) => {\r\n        console.log(data);\r\n      });\r\n  }\r\n  deleteItem(mbItem: any) {\r\n    let obj = {\r\n      button_type: mbItem.button_type,\r\n      moodboard_id: mbItem.moodboard_id,\r\n      product_id: mbItem.product_id,\r\n      sku: mbItem.sku,\r\n      warehouse_id: mbItem.warehouse_id,\r\n      user_id: this._user.getUser().getId(),\r\n    };\r\n    this.moodboardService.deleteItemToMoodboard(obj).subscribe(\r\n      (data: any) => {\r\n        if (data.statusCode == 200) {\r\n          this._toaster.success(data?.result);\r\n          this.getMoodboard();\r\n          this.onGridReady(this.agGrid);\r\n        } else this._toaster.error(data.result);\r\n      },\r\n      (error) => this._toaster.error('Fail to add')\r\n    );\r\n  }\r\n\r\n  generateMDPdf() {\r\n    let data = this._pdf.getAgGridRowsAndColumns(this.agGrid);\r\n    let imagesObs = this._pdf.getAllTableBase64Images(data?.rows as [], 3);\r\n    imagesObs.subscribe((images) => {\r\n      let doc = new jsPDF();\r\n      doc.text('Moodboard Information', 10, 15);\r\n      let info = [\r\n        ['Project Name:', this.moodboardDetails?.moodboard?.project_name],\r\n        ['Company Name:', this.moodboardDetails?.moodboard?.company_name],\r\n        ['Moodboard :', this.moodboardDetails?.moodboard?.sgid],\r\n        ['State:', this.moodboardDetails?.moodboard?.state.name],\r\n        ['Moodboard Name:', this.moodboardDetails?.moodboard?.boardname],\r\n        ['City:', this.moodboardDetails?.moodboard?.city],\r\n        ['Zipcode:', this.moodboardDetails?.moodboard?.zipcode],\r\n      ];\r\n      autoTable(doc, {\r\n        ...this._pdf.getInformationTableUserOptions(),\r\n        body: info,\r\n      });\r\n\r\n      doc.addPage();\r\n      doc.text('Moodboard Summary', 10, 15);\r\n      autoTable(doc, {\r\n        ...this._pdf.getSummaryTableUserOptions(),\r\n        columnStyles: {\r\n          0: { cellWidth: 9 },\r\n          1: { cellWidth: 20 },\r\n          2: { cellWidth: 10 },\r\n          3: { cellWidth: 20 },\r\n          4: { cellWidth: 30 },\r\n          5: { cellWidth: 15 },\r\n          6: { cellWidth: 10 },\r\n          7: { cellWidth: 20 },\r\n          8: { cellWidth: 20 },\r\n          11: { cellWidth: 20 },\r\n        },\r\n        columns: data.columns,\r\n        body: data?.rows?.map((r: any) => {\r\n          if (!parseInt(r[0])) {\r\n            let temp = [];\r\n            temp.push({ content: r[0], colSpan: r.length - 1 });\r\n            temp.push(r[r.length - 1]);\r\n            r = temp;\r\n          }\r\n          return r;\r\n        }),\r\n        willDrawCell: (data) => {\r\n          if (data.section === 'body' && data.column.index === 3) {\r\n            data.cell.raw = '';\r\n            data.cell.text = [];\r\n          }\r\n        },\r\n        didDrawCell: (data) => {\r\n          if (data.section === 'body' && data.column.index === 3) {\r\n            var base64Img = 'data:image/jpeg;base64,' + images[data.row.index];\r\n            doc.addImage(\r\n              base64Img,\r\n              'JPEG',\r\n              data.cell.x + 1,\r\n              data.cell.y + 1,\r\n              18,\r\n              18\r\n            );\r\n          }\r\n        },\r\n      });\r\n      doc.save('moodboard.pdf');\r\n    });\r\n  }\r\n  productDetails(item: any, moodboardDetails: any) {\r\n    this._dialog\r\n      .open(ProductDetailsComponent, {\r\n        height: '90%',\r\n        width: '90%',\r\n        disableClose: true,\r\n        data: {\r\n          forDialog: true,\r\n          forHitler: true,\r\n          forMoodboard:\r\n            this._user.getUser().getId() ===\r\n            moodboardDetails?.moodboard?.userid,\r\n          forQuote: false,\r\n          item: item,\r\n          mb: moodboardDetails?.moodboard,\r\n          moodboardId: moodboardDetails?.moodboard?.id,\r\n        },\r\n      })\r\n      .afterClosed()\r\n      .subscribe((data) => {\r\n        if (data && data.event) {\r\n          this.getMoodboard();\r\n          this.onGridReady(this.agGrid);\r\n          this.setProductTab(0);\r\n        }\r\n      });\r\n  }\r\n\r\n  increaseQuantity(value: any, md: any) {\r\n    if (value >= 1 && value <= md.total_warehouse_quantity) {\r\n      md.qty = md.is_qty = value;\r\n      let price = md.button_type == 1 ? md.buy_price : md.price;\r\n      md.is_total = this._computationService.getProductTotalAmount(\r\n        price,\r\n        0,\r\n        md.qty\r\n      );\r\n      this._coreService.updateMDItem(md).subscribe((data) => {\r\n        this.refresh();\r\n      });\r\n    }\r\n  }\r\n\r\n  refresh() {\r\n    this.getMoodboard();\r\n    this.onGridReady(this.agGrid);\r\n  }\r\n\r\n  //Functionalities taken from shop module\r\n  public selectionChange($event?: StepperSelectionEvent): void {\r\n    // console.log('stepper.selectedIndex: ' + this.selectedIndex\r\n    //     + '; $event.selectedIndex: ' + $event.selectedIndex);\r\n    // if ($event?.selectedIndex == 0) return; // First step is still selected\r\n    // this.selectedIndex = $event.selectedIndex;\r\n  }\r\n\r\n  public goto(index: number): void {\r\n    if (index == 0) return; // First step is not selected anymore -ok\r\n    this.selectedIndex = index;\r\n  }\r\n\r\n  filterProductPopup() {\r\n    this.selectedCategory = this.catListDefault.filter(\r\n      (item) => item.isChecked\r\n    );\r\n    this.selectedCity = this.cityListDefault.filter((item) => item.isChecked);\r\n    let catIds =\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.catListDefault\r\n            .filter((item) => item.isChecked)\r\n            .map((i) => i.sgid)\r\n            .toString()\r\n        : null;\r\n    let cityIds =\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.cityListDefault\r\n            .filter((item) => item.isChecked)\r\n            .map((i) => i.sgid)\r\n            .toString()\r\n        : null;\r\n\r\n    // this.show = true;\r\n    this.closeModal();\r\n    // let param: any = {\r\n    //   start: this.lLimit,\r\n    //   count: this.hLimit,\r\n    //   category: catIds,\r\n    //   warehouse: cityIds,\r\n    // };\r\n    // if(this.min_price_popup){ param['min_price'] = this.min_price_popup};\r\n    // if(this.max_price_popup){ param['max_price'] = this.max_price_popup};\r\n    // if(this.min_price_inventory_popup){ param['min_price_inventory'] = this.min_price_inventory_popup};\r\n    // console.log(this.min_price , this.max_price);\r\n    // if(this.min_price != '') param['min_price'] = this.min_price;\r\n    // if(this.max_price != '') param['max_price'] = this.max_price;\r\n    // if(this.min_price_inventory != '') param['min_price_inventory'] = this.min_price_inventory;\r\n    this.getItems(\r\n      0,\r\n      15,\r\n      this.selectedCategory && this.selectedCategory.length\r\n        ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      null,\r\n      this.selectedCity && this.selectedCity.length\r\n        ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n        : null,\r\n      this.max_price.value,\r\n      this.min_price.value,\r\n      this.min_price_inventory,\r\n      this.searchTxt\r\n    );\r\n  }\r\n\r\n  setProductTab(index: number) {\r\n    const tabGroup = this.tabsReference;\r\n    if (!tabGroup || !(tabGroup instanceof MatTabGroup)) return;\r\n\r\n    const tabCount = tabGroup._tabs.length;\r\n    tabGroup.selectedIndex = index;\r\n  }\r\n\r\n  onScroll() {\r\n    let param = {\r\n      start: this.lastUserCount,\r\n      count: 20,\r\n      category:\r\n        this.selectedCategory && this.selectedCategory.length\r\n          ? this.selectedCategory.map((i: any) => i.sgid).toString()\r\n          : null,\r\n      supplier: null,\r\n      warehouse:\r\n        this.selectedCity && this.selectedCity.length\r\n          ? this.selectedCity.map((i: any) => i.sgid).toString()\r\n          : null,\r\n      min_price: this.min_price.value,\r\n      max_price: this.max_price.value,\r\n      min_price_inventory: this.min_price_inventory,\r\n      searchTxt: this.searchTxt,\r\n    };\r\n    if (this.startCount !== this.lastUserCount) {\r\n      this.moodboardService.getItems(param).subscribe((response: any) => {\r\n        if (response && response.result && response.result.length) {\r\n          this.updateList(response.result);\r\n        }\r\n      });\r\n      this.items = this.getLastViewedUserList();\r\n      this.startCount = this.lastUserCount;\r\n    }\r\n  }\r\n\r\n  getLastViewedUserList() {\r\n    return this.items;\r\n  }\r\n\r\n  updateList(obj: any) {\r\n    let isResult = false;\r\n    if (obj && obj.length) {\r\n      this.items.push(...obj);\r\n      isResult = true;\r\n    }\r\n    if (isResult === true) {\r\n      this.lastUserCount += 20;\r\n    }\r\n  }\r\n\r\n  resetList() {\r\n    this.items = [];\r\n    this.startCount = 0;\r\n    this.lastUserCount = 0;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription?.unsubscribe();\r\n  }\r\n  onCatUnchecked(cat: any) {\r\n    cat.isChecked = false;\r\n    this.catListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\r\n    this.categoriesList.next(this.catListDefault);\r\n    this.selectedCategory = this.catListDefault.filter(\r\n      (item) => item.isChecked\r\n    );\r\n    this.resetList();\r\n    this.getItems();\r\n  }\r\n  onCityUnchecked(city: any) {\r\n    city.isChecked = false;\r\n    this.cityListDefault.sort((a, b) => (a.isChecked > b.isChecked ? -1 : 1));\r\n    this.cityList.next(this.cityListDefault);\r\n    this.selectedCity = this.cityListDefault.filter((item) => item.isChecked);\r\n    this.resetList();\r\n    this.getItems();\r\n  }\r\n  onPriceRemove() {\r\n    this.min_price.patchValue(0, { emitEvent: false });\r\n    this.max_price.patchValue(0, { emitEvent: false });\r\n    this.resetList();\r\n    this.getItems();\r\n  }\r\n}\r\n","<div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n    <div class=\"mb-details\" fxLayout=\"row\" fxLayoutAlign=\" stretch\">\r\n      <div\r\n        class=\"mb-details__icon\"\r\n        fxFlex=\"30\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\"\r\n      >\r\n        <span>{{bannerIconImgTxt}}</span>\r\n        <div class=\"img-box\">\r\n          <img [src]=\"bannerIconImg\" alt=\"{{bannerIconImgTxt}}\" srcset=\"\" />\r\n        </div>\r\n      </div>\r\n      <div\r\n        class=\"mb-details__info\"\r\n        fxFlex=\"80\"\r\n        fxLayout=\"row wrap\"\r\n        fxLayoutAlign=\"start\"\r\n      >\r\n      \r\n      <div fxFlex=\"50\" *ngIf=\"moodboardDetails?.moodboard\">\r\n        <span class=\"label\">Project Name: </span>\r\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.project_name }}</span>\r\n      </div>\r\n    <div fxFlex=\"50\">\r\n        <span class=\"label\">Company Name: </span>\r\n        <span class=\"value\">{{ moodboardDetails?.moodboard?.company_name}}</span>\r\n    </div>\r\n        <div fxFlex=\"50\">\r\n            <span class=\"label\">Moodboard#: </span>\r\n            <span class=\"value\">{{ moodboardDetails?.moodboard?.sgid }}</span>\r\n          </div>\r\n        <div fxFlex=\"50\">\r\n          <span class=\"label\">Customer City: </span>\r\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.city }}</span>\r\n        </div>\r\n        <div fxFlex=\"50\">\r\n          <span class=\"label\">Moodboard Name: </span>\r\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.boardname }}</span>\r\n        </div>\r\n        <div fxFlex=\"50\">\r\n          <span class=\"label\">Zipcode: </span>\r\n          <span class=\"value\">{{ moodboardDetails?.moodboard?.zipcode }}</span>\r\n        </div>\r\n\r\n        <div\r\n        fxFlex=\"60\"\r\n        fxLayoutGap=\"1rem\"\r\n      >\r\n        <button\r\n          mat-mini-fab\r\n          color=\"accent\"\r\n          aria-label=\"Example icon button with a filter list icon\"\r\n          (click)=\"copyMB();\"\r\n        >\r\n          <mat-icon>file_copy</mat-icon>\r\n        </button>\r\n        <button\r\n          mat-mini-fab\r\n          color=\"accent\"\r\n          aria-label=\"Example icon button with a filter list icon\"\r\n          (click)=\"editMB();\"\r\n          > \r\n          <mat-icon>edit icon</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div\r\n    class=\"mb-details__info\"\r\n    fxFlex=\"20\"\r\n    fxLayout=\"row wrap\"\r\n    fxLayoutAlign=\"start\"\r\n  >\r\n  <div fxFlex=\"80\">\r\n    <ng-container *ngFor=\"let item of catagorydata; let i = index\">\r\n    <mat-card *ngIf= \"item.value == moodboardDetails?.moodboard?.moodboard_type_name\" class=\"example-card\">\r\n        <img mat-card-image   src=\"{{item.imageSrc}}\" alt=\"{{item.value}}\">\r\n        <mat-card-content>\r\n          <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n            <div fxLayout=\"row\" class=\"text-lable\" >{{item.value}}</div>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n      </ng-container>\r\n</div>\r\n</div>      \r\n</div>\r\n</div>\r\n<div>\r\n  <mat-tab-group color=\"accent\" class=\"tabs\" mat-align-tabs=\"center\" #tabsReference>\r\n    <mat-tab label=\"MY MOODBOARD\">\r\n      <div class=\"mb-details margin-top30 moodeboard-section\" fxLayout=\"column\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"stretch\">\r\n        <div class=\"head\" fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n          <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\r\n            <button mat-button color=\"accent\" class=\"btn-chip-label\"\r\n              aria-label=\"\">{{ moodboardDetails?.moodboard?.project_name }}</button>\r\n            <button mat-button color=\"accent\" aria-label=\"\" class=\"btn-chip-label\">No of\r\n              products : {{moodboardDetails?.moodboard_items ? moodboardDetails?.moodboard_items.length : '0'}}</button>\r\n          </div>\r\n          <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\r\n            <button mat-raised-button color=\"accent\" class=\"btn-chip-md\" style=\"background-color: #2C2C2C; color:#fff;\"\r\n              aria-label=\"\" (click)=\"requestRendering();\">Request Rendering</button>\r\n            <button mat-raised-button color=\"accent\" aria-label=\"\" (click)=\"generateMDPdf()\" class=\"btn-chip-md\">Generate\r\n              Moodboard quote PDF</button>\r\n          </div>\r\n        </div>\r\n        <div class=\"product-wrapper\" fxLayout=\"row wrap\"  fxLayoutGap=\"1rem\" fxLayoutGap=\"10px grid\" fxLayoutAlign=\"start center\">\r\n          <!-- <mat-grid-list cols=\"5\" rowHeight=\"1:1\">\r\n            <mat-grid-tile class=\"tile\">\r\n              <div fxFlex=\"80\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\" (click)=\"setProductTab(demo2BtnClick,1)\" class=\"cardImg add-product-image\">\r\n                <div class=\"add-block\">\r\n                  <img class=\"add-icon  \" src=\"assets/moodboard/images/addProduct.svg\" />\r\n                  <div>ADD PRODUCT</div>\r\n                </div>\r\n              </div>\r\n            </mat-grid-tile> -->\r\n            <div class=\"\" >\r\n              <div class=\"cardImg add\" (click)=\"setProductTab(1)\" style=\"min-height: 300px;\">\r\n                <div class=\"add-block\">\r\n                  <img class=\"add-icon  \" src=\"assets/moodboard/images/addProduct.svg\" />\r\n                  <div>ADD PRODUCT</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ng-container *ngFor=\"let mbItem of moodboardDetails?.moodboard_items; let i = index\">\r\n              <div class=\"\" >\r\n                <div class=\"cardImg\">\r\n                  <div class=\"badge\" style=\"text-align: center;width: 40%;\">{{ mbItem.button_type == 0 ? 'Rent' :'Buy'}}\r\n                  </div>\r\n                  <img  src=\"{{mbItem?.variation.images[0].image_url.large}}\"\r\n                    alt=\"{{mbItem.name}}\" />\r\n                  <div class=\"title\" height=\"100px\" fxLayout=\"row\" fxLayoutAlign=\"center center\">{{mbItem.name}}</div>\r\n                  <div class=\"action\" fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\r\n                    <app-counter fxFlex=\"50\" [min]=\"1\" [readOnly]=\"true\" [max]=\"mbItem?.total_warehouse_quantity\"\r\n                      [counter]=\"mbItem?.qty\" (counterChange)=\" increaseQuantity($event,mbItem)\"></app-counter>\r\n                    <!-- <input type=\"number\" #qty  [value]=\"mbItem?.qty\" (click)=\"\"  step=\"1\"/> -->\r\n                    <mat-icon style=\"cursor: pointer; color: #A8A8A8;\" *ngIf=\"userid==mbItem?.userid\"\r\n                      (click)=\"deleteItem(mbItem)\">delete</mat-icon>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n          <!-- </mat-grid-list> -->\r\n        </div>\r\n          <div class=\"head margin-top30\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"space-between center\">\r\n              <!-- <mat-form-field appearance=\"fill\">\r\n                <mat-select>\r\n                  <mat-option *ngFor=\"let qoute of mbQuotesList\" [value]=\"qoute.sgid\">{{qoute.sgid}}-{{qoute.name}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field> -->\r\n              <select (change)=\"selectedQuote($event)\">\r\n                <option *ngFor=\"let qoute of mbQuotesList\" [value]=\"qoute.sgid\">{{qoute.sgid}}-{{qoute.name}}</option>\r\n              </select>\r\n              <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\r\n                <button (click)=\"addToQuote()\" mat-button color=\"accent\" class=\"btn-yellow-quote\" aria-label=\"\">ADD TO QUOTE</button>\r\n                <button mat-button color=\"accent\" class=\"btn-yellow-quote\"  aria-label=\"\"\r\n                  (click)=\"createNewQuote()\">CREATE NEW QUOTE</button>\r\n                \r\n              </div>\r\n            </div>\r\n            <div class=\"head\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n              <!-- <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\r\n                <button mat-raised-button color=\"accent\" style=\"background-color: #2C2C2C; color:#fff;\" aria-label=\"\"\r\n                  (click)=\"createNewQuote()\">CREATE NEW QUOTE</button>\r\n                <button mat-raised-button color=\"accent\" aria-label=\"\">ADD TO QUOTE OR ORDER</button>\r\n              </div> -->\r\n              <!-- <div class=\"head\" fxLayout=\"row\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between center\">\r\n                <button mat-raised-button color=\"accent\" aria-label=\"\" (click)=\"requestRendering();\"\r\n                  style=\"background-color: #80BAFE;\">REQUEST RENDERING</button>\r\n                <button mat-raised-button color=\"accent\" aria-label=\"\" (click)=\"generateMDPdf()\"\r\n                  style=\"background-color: #80BAFE;\">GENERATE MOODBOARD QUOTE PDF</button>\r\n              </div> -->\r\n            </div>\r\n          </div>\r\n      </div>\r\n    </mat-tab>\r\n    <mat-tab label=\"ADD PRODUCTS\">\r\n      <div class=\"mb\" fxLayout=\"column\" fxLayoutAlign=\" stretch\" style=\"padding: 1rem;\">\r\n        <div class=\"mb-details\" fxLayout=\"row\" fxLayoutGap=\"2rem\" fxLayoutAlign=\"stretch\">\r\n          <div class=\"left\" fxFlex=\"22\" fxLayoutGap=\"2rem\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">      \r\n            <div class=\"filter\" fxLayoutGap=\"1rem\" fxLayout=\"row wrap\">\r\n              <!-- <button mat-raised-button (click)=\"openModal(quickFilter)\" color=\"accent\" aria-label=\"\">View All Filters</button> -->\r\n              <button mat-raised-button (click)=\"resetFilter()\" style=\"margin-top:1rem !important\" color=\"accent\" aria-label=\"\">Clear Filters</button>\r\n            \r\n            </div>\r\n            <mat-card>\r\n              <div class=\"filter\">\r\n                <div class=\"filter-inner\">\r\n                  <i _ngcontent-ynr-c111=\"\" class=\"fas fa-funnel-dollar filter-img filter-icon\"></i>\r\n                  <div class=\"filter-label\">\r\n                    <label>APPLIED FILTER</label>\r\n                  </div>\r\n                </div>  \r\n                <div class=\"check-wrapper\" fxLayout=\"column\">\r\n                  <div class=\"row mt-2 mr-2 pl-2 pull-left\" >\r\n          \r\n                    <!-- applied warehouse and category filter -->\r\n                    <ng-container *ngFor=\"let cat of selectedCategory\">\r\n                      <span (click)=\"onCatUnchecked(cat);\" class=\"badge badge-secondary p-2 pointer mr-2 mb-2\">\r\n                        <span >{{cat.name}}</span>\r\n                          <span>&nbsp;<i class=\"fa fa-close\"></i></span>\r\n                      </span>\r\n                    </ng-container>\r\n          \r\n                    <ng-container *ngFor=\"let city of selectedCity\">\r\n                      <span (click)=\"onCityUnchecked(city);\" class=\"badge badge-secondary p-2 pointer mr-2 mb-2\">\r\n                        <span *ngIf=\"city.warehouse_name\">{{city.warehouse_name}}</span>\r\n                          <span>&nbsp;<i class=\"fa fa-close\"></i></span>\r\n                      </span>\r\n                    </ng-container>\r\n                    <!-- applied price range -->\r\n                    <ng-container>\r\n                      <span (click)=\"onPriceRemove()\" class=\"badge badge-secondary p-2 pointer mr-2 mb-2\" *ngIf=\"min_price.value != '' && max_price.value != ''\">\r\n                        <span *ngIf=\"min_price.value != '' && max_price.value != ''\">{{min_price.value}} - {{max_price.value}}</span>\r\n                        <span *ngIf=\"min_price.value != '' && !max_price.value\">>{{min_price.value}}</span>\r\n                        <span *ngIf=\"!min_price.value && max_price.value != ''\"><{{max_price.value}}</span>\r\n                        <span>&nbsp;<i class=\"fa fa-close\"></i></span>\r\n                      </span>\r\n                      <!-- <span (click)=\"onPriceRemovePopup()\" class=\"badge badge-secondary p-2 pointer mr-2 mb-2\" *ngIf=\"min_price_popup && max_price_popup && show\">\r\n                        <span *ngIf=\"min_price_popup && max_price_popup\">{{min_price_popup}} - {{max_price_popup}}</span>\r\n                        <span *ngIf=\"min_price_popup && !max_price_popup\">>{{min_price_popup}}</span>\r\n                        <span *ngIf=\"!min_price_popup && max_price_popup\"><{{max_price_popup}}</span>\r\n                        <span>&nbsp;<i class=\"fa fa-close\"></i></span>\r\n                      </span> -->\r\n          \r\n                    </ng-container>\r\n          \r\n                    <!-- applied minimum inv -->\r\n                    <span (click)=\"onQtyChange(0)\" class=\"badge badge-secondary p-2 pointer mr-2 mb-2\" *ngIf=\"min_price_inventory > 0\" >\r\n                      <span *ngIf=\"min_price_inventory\">Inv: {{min_price_inventory}}</span>\r\n                      <span>&nbsp;<i class=\"fa fa-close\"></i></span>\r\n                    </span>\r\n                    <!-- applied minimum inv -->\r\n                    <!-- <span (click)=\"onQtyChange(0)\" class=\"badge badge-secondary p-2 pointer mr-2 mb-2\" *ngIf=\"min_price_inventory_popup > 0\" >\r\n                      <span *ngIf=\"min_price_inventory_popup\">Inv: {{min_price_inventory_popup}}</span>\r\n                      <span>&nbsp;<i class=\"fa fa-close\"></i></span>\r\n                    </span> -->\r\n                    \r\n                  </div> \r\n          \r\n                </div> \r\n              </div>\r\n              <div class=\"filter\">\r\n                <div class=\"filter-inner\">\r\n                  <!-- <button mat-mini-fab color=\"accent\"> \r\n                    <mat-icon>edit icon</mat-icon>\r\n                  </button> -->\r\n                  <img src=\"assets/moodboard/images/locationNew.svg\" class=\"filter-img\" alt=\"Cities\">\r\n                  <div class=\"filter-label\">\r\n                    <label>CITIES</label>\r\n                  </div>\r\n                </div>  \r\n                <div class=\"check-wrapper\" fxLayout=\"column\">\r\n                  <ng-container *ngFor=\"let city of (cityList | async)  | slice:0:3; let i as index\">\r\n                    <mat-checkbox \r\n                      (change)=\"onCityChecked(city, i)\"\r\n                      [checked]=\"city.isChecked\"\r\n                      >\r\n                      {{city.warehouse_name}}\r\n                    </mat-checkbox>\r\n                  </ng-container> \r\n                  <div class=\"view-more\" (click)=\"openModal(viewMoreCity)\">View More</div>\r\n                </div> \r\n              </div>\r\n              <div class=\"filter\">\r\n                <div class=\"filter-inner\">\r\n                  <!-- <button mat-mini-fab color=\"accent\"> \r\n                    <mat-icon>edit icon</mat-icon>\r\n                  </button> -->\r\n                  <img src=\"assets/moodboard/images/categoryNew.svg\" class=\"filter-img\" alt=\"Cities\">\r\n                  <div class=\"filter-label\">\r\n                    <label>CATEGORIES</label>\r\n                  </div>\r\n                </div>  \r\n                <!-- <mat-form-field appearance=\"fill\">\r\n                  <mat-label>Filter by Categories</mat-label>\r\n                  <mat-select>\r\n                    <mat-option *ngFor=\"let cat of categoriesList\" (click)=\"onCategoriesChange(cat.sgid)\" [value]=\"cat.sgid\">{{cat.name}}</mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>              -->\r\n                <div class=\"check-wrapper\" fxLayout=\"column\">\r\n                  <ng-container *ngFor=\"let cat of (categoriesList | async)  | slice:0:3; let i as index\">\r\n                    <mat-checkbox \r\n                      (change)=\"onCategoriesChecked(cat, i)\"\r\n                      [checked]=\"cat.isChecked\"\r\n                      >\r\n                      {{cat.name}}\r\n                    </mat-checkbox>\r\n                  </ng-container> \r\n                  <div class=\"view-more\" (click)=\"openModal(viewMoreCat)\">View More</div>\r\n                </div> \r\n              </div>\r\n              <div class=\"filter\">\r\n                <div class=\"filter-inner\">\r\n                  <!-- <button mat-mini-fab color=\"accent\"> \r\n                    <mat-icon>edit icon</mat-icon>\r\n                  </button> -->\r\n                  <img src=\"assets/moodboard/images/budgetNew.svg\" class=\"filter-img\" alt=\"Cities\">\r\n                  <div class=\"filter-label\">\r\n                    <label>PRICE RANGE</label>\r\n                  </div>\r\n                </div>  \r\n                <div class=\"price-input\" fxLayoutGap=\"1rem\" fxLayout=\"row wrap\">\r\n                    <mat-form-field fxFlex=\"40\" appearance=\"fill\">\r\n                      <mat-label>Min $</mat-label>\r\n                      <input type=\"number\" #min [formControl]=\"min_price\" matInput />\r\n                    </mat-form-field>\r\n                    <mat-form-field fxFlex=\"40\" appearance=\"fill\">\r\n                      <mat-label>Max $</mat-label>\r\n                      <input type=\"number\" #max [formControl]=\"max_price\" matInput />\r\n                    </mat-form-field>\r\n              </div>         \r\n              </div>\r\n              <div class=\"filter\">\r\n                <div class=\"filter-inner\">\r\n                  <!-- <button mat-mini-fab color=\"accent\"> \r\n                    <mat-icon>edit icon</mat-icon>\r\n                  </button> -->\r\n                  <img src=\"assets/moodboard/images/quantityNew.svg\" class=\"filter-img\" alt=\"Cities\">\r\n                  <div class=\"filter-label\">\r\n                    <label>AVAILABLE QUANTITY</label>\r\n                  </div>\r\n                </div>  \r\n                <mat-form-field appearance=\"fill\">\r\n                  <mat-label>Minimum</mat-label>\r\n                  <input type=\"number\" #minQty (focusout)=\"onQtyChange(minQty.value)\" step=\"1\" matInput min=\"1\" value=\"{{min_price_inventory}}\"/>\r\n                </mat-form-field>             \r\n              </div>\r\n            </mat-card>\r\n          </div>\r\n          <div class=\"right\" fxFlex=\"80\" fxLayoutGap=\"1rem\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">      \r\n              <div class=\"right-head-search\" fxLayout=\"column\" >\r\n                <app-search-bar (search)=\"search($event)\" [placeholder]=\"placeholder\"></app-search-bar>\r\n                <!-- <mat-form-field appearance=\"fill\">\r\n                  <mat-label><mat-icon>search</mat-icon>Search Products</mat-label>\r\n                  <input matInput (keyup)=\"search(searchInpt.value)\" value=\"\" #searchInpt type=\"search\" >\r\n                </mat-form-field> -->\r\n                <section class=\"search_placeholder\">\r\n                <p><b>Add furniture to your moodboard</b></p>\r\n                <p style=\"margin-bottom: 0px;\">Search for a product and add it to your moodboard</p>\r\n                </section>\r\n                \r\n              </div>\r\n              <div class=\"right-head\" fxFlex=\"100\" fxLayoutGap=\"1rem\" fxLayout=\"column\" >\r\n                <!-- <mat-card  class=\"shop__card\" *ngIf=\"(items && items.length == 0)\" fxFlex=\"100\" fxLayoutAlign=\"stretch stretch\" >\r\n                  <p>No Data Found.</p>\r\n                </mat-card> -->\r\n                <mat-card style=\"max-height: 580px; overflow-y: scroll;\" infiniteScroll [infiniteScrollDistance]=\"1\"\r\n                  [infiniteScrollThrottle]=\"50\" [scrollWindow]=\"false\" (scrolled)=\"onScroll()\">\r\n                  <mat-grid-list cols=\"5\" rowHeight=\"1:1\">\r\n                    <ng-container *ngFor=\"let item of items; let i = index\">\r\n                      <mat-grid-tile (click)=\"productDetails(item, moodboardDetails)\" class=\"tile\">\r\n                        <mat-card  class=\"cardImg\" >\r\n                          <div class=\"tile-box\">{{item.total_warehouse_quantity}}</div>  \r\n                          <img width=\"100%\" class=\"img\" src=\"{{item?.product_sku_vartion?.get_display_image[0]?.image_url?.small}}\" alt=\"{{item.product_name}}\"/></mat-card>\r\n                      </mat-grid-tile>\r\n                    </ng-container>\r\n                  </mat-grid-list>\r\n                </mat-card>\r\n              </div>    \r\n          </div>\r\n        </div>\r\n    </div>\r\n    </mat-tab>\r\n    <mat-tab disabled>\r\n      <ng-template mat-tab-label>\r\n        <button mat-raised-button type=\"button\" class=\"summary_btn_position\" (click)=\"scroll(mbsummary)\" color=\"accent\" aria-label=\"\">View Moodboard Summary</button>\r\n      </ng-template>\r\n  </mat-tab>\r\n  </mat-tab-group>\r\n    <!-- <button mat-raised-button type=\"button\" class=\"summary_btn_position\" (click)=\"scroll(mbsummary)\" color=\"accent\" aria-label=\"\">VIEW MOODBOARD SUMMARY</button> -->\r\n</div>\r\n<div class=\"mb-summary\"  #mbsummary fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\r\n  <div\r\n    class=\"mb-summary__info\"\r\n    fxLayout=\"column\"\r\n    fxLayoutAlign=\"start start\"\r\n  >\r\n    <div><span class=\"mb-summary__info--value\">MOODBOARD SUMMARY</span></div>\r\n    <div\r\n    class=\"mb-summary__info\"\r\n    fxLayout=\"row\"\r\n    fxLayoutAlign=\"start start\"\r\n    fxLayoutGap=\"2rem\"\r\n  > <div>\r\n      <span class=\"mb-summary__info--label\">Customer City :</span>\r\n      <span class=\"mb-summary__info--value\"> {{moodboardDetails?.moodboard?.city}}</span>\r\n    </div>\r\n    <div>\r\n      <span class=\"mb-summary__info--label\">Zipcode:</span>\r\n      <span class=\"mb-summary__info--value\">{{moodboardDetails?.moodboard?.zipcode}}</span>\r\n    </div>\r\n  </div>\r\n  </div>\r\n  <span id=\"refresh\" (click)=\"refresh()\"></span>\r\n  <ag-grid-angular\r\n    [gridOptions]=\"gridOptions\"\r\n    style=\"height:600px; width: 100%\"\r\n    class=\"ag-theme-alpine quotes-table\"\r\n    [rowData]=\"rowData | async\"\r\n    [frameworkComponents]=\"frameworkComponents\"\r\n    [pinnedBottomRowData]=\"pinnedBottomRowData\"\r\n    [defaultColDef]=\"defaultColDef\"\r\n    [columnDefs]=\"columnDefs\"\r\n  >\r\n  </ag-grid-angular>\r\n  <div\r\n    class=\"mb-summary__actions\"\r\n    fxLayout=\"row\"\r\n    fxLayoutAlign=\"center\"\r\n    fxLayoutGap=\"2rem\"\r\n  >\r\n  <ng-content [select]=\"actions\">\r\n  </ng-content>\r\n  </div>\r\n</div>\r\n<ng-template #viewMoreCity>\r\n<div fxLayout=\"row-reverse\">\r\n  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n </div>\r\n  <div style=\"padding: 20px\" fxLayout=\"row wrap\" fxLayoutGap=\"2rem\">\r\n    <ng-container *ngFor=\"let city of (cityListDefault); let i = index\">\r\n        <mat-checkbox fxFlex=\"25\"\r\n          (change)=\"onCityChecked(city, i)\"\r\n          [checked]=\"city.isChecked\"\r\n          >\r\n          {{city.warehouse_name}}\r\n        </mat-checkbox>\r\n  </ng-container>\r\n</div>\r\n</ng-template>        \r\n<ng-template #viewMoreCat>\r\n  <div  fxLayout=\"row-reverse\">\r\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n</div>\r\n  <div style=\"padding: 10px\" fxLayout=\"row wrap\" fxLayoutGap=\"2rem\">\r\n    <ng-container *ngFor=\"let cat of (catListDefault); let i = index\">\r\n        <mat-checkbox fxFlex=\"20\"\r\n          (change)=\"onCategoriesChecked(cat, i)\"\r\n          [checked]=\"cat.isChecked\"\r\n          >\r\n          {{cat.name}}\r\n        </mat-checkbox>\r\n  </ng-container>\r\n</div>\r\n</ng-template>        \r\n\r\n<ng-template #quickFilter>\r\n  <mat-horizontal-stepper [linear]=\"false\" [selectedIndex]=\"this.selectedIndex\"\r\n    (selectionChange)=\"selectionChange($event)\" #stepper>\r\n    <mat-step>\r\n      <div fxLayout=\"row-reverse\" style=\"background: #f8f8f8; margin: 0px -24px 0px -24px;\"\r\n        fxLayoutAlign=\"space-between center\">\r\n        <h2 mat-dialog-title>\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n        </h2>\r\n      </div>\r\n      <mat-dialog-content class=\"mat-typography\" fxLayoutGap=\"2rem\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n        <h1 class=\"text-center popup-title\">WANT TO FURNISH YOUR PROPERTY?</h1>\r\n        <h1 class=\"text-center popup-title-head\"> Let’s get started</h1>\r\n        <div class=\"row justify-content-center mt-5\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n          <div (click)=\"goto(1)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\r\n            <img class=\"img-icon\" src=\"assets/shop/location.svg\" alt=\"\" />\r\n            <span>Location</span>\r\n          </div>\r\n          <div style=\"margin:0 -18px 0px -5px\">\r\n            <img class=\"img-icon line\" src=\"assets/shop/Line.svg\" alt=\"\" />\r\n          </div>\r\n          <div (click)=\"goto(2)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\r\n            <img class=\"img-icon\" src=\"assets/shop/category.svg\" alt=\"\" />\r\n            <span>Categories</span>\r\n          </div>\r\n          <div style=\"margin:0 -5px 0 -18px\">\r\n            <img class=\"img-icon line\" src=\"assets/shop/Line.svg\" alt=\"\" />\r\n          </div>\r\n          <div (click)=\"goto(3)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\r\n            <img class=\"img-icon\" src=\"assets/shop/quantity.svg\" alt=\"\" />\r\n            <span>Quantity</span>\r\n          </div>\r\n          <div style=\"margin:0 -1px 0 -5px\">\r\n            <img class=\"img-icon line\" src=\"assets/shop/Line.svg\" alt=\"\" />\r\n          </div>\r\n          <div (click)=\"goto(4)\" class=\"img-icon-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\r\n            <img class=\"img-icon\" src=\"assets/shop/budget.svg\" alt=\"\" />\r\n            <span>Budget</span>\r\n          </div>\r\n        </div>\r\n        <div fxLayoutAlign=\"center center\">\r\n          <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\">START</button>\r\n        </div>\r\n      </mat-dialog-content>\r\n\r\n    </mat-step>\r\n    <mat-step>\r\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\r\n        fxLayoutAlign=\"space-between center\">\r\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\r\n          <img src=\"assets/shop/location.svg\" class=\"filter-img\" style=\"margin-top: 33px;\r\n          margin-right: 10px;\r\n      \" alt=\"Cities\">\r\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\r\n            Location\r\n          </h2>\r\n        </div>\r\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-content class=\"mat-typography\" fxLayout=\"column\" fxLayoutAlign=\"stretch center\">\r\n        <div>\r\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\"> What locations you are looking to Furnish units in?\r\n          </h2>\r\n        </div>\r\n        <div style=\"padding: 10px;\" fxLayout=\"row wrap\" fxLayoutGap=\"1rem\">\r\n          <ng-container *ngFor=\"let city of cityListDefault; let i as index\">\r\n            <mat-checkbox fxFlex=\"22\" (change)=\"onCityChecked(city, i)\" [checked]=\"city.isChecked\">\r\n              {{city.warehouse_name}}\r\n            </mat-checkbox>\r\n          </ng-container>\r\n        </div>\r\n        <div fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\r\n          <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\">Next</button>\r\n        </div>\r\n      </mat-dialog-content>\r\n    </mat-step>\r\n    <mat-step>\r\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\r\n        fxLayoutAlign=\"space-between center\">\r\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\r\n          <img src=\"assets/shop/category.svg\" class=\"filter-img\" style=\"margin-top: 33px;\r\n        margin-right: 10px;\r\n    \" alt=\"Cities\">\r\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\r\n            Category\r\n          </h2>\r\n        </div>\r\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-content style=\"max-height: 60vh;\" class=\"mat-typography\" fxLayout=\"column\"\r\n        fxLayoutAlign=\"stretch center\">\r\n        <div>\r\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\"> Looking for products in any particular category?</h2>\r\n        </div>\r\n        <div style=\"padding: 10px;\" fxLayout=\"row wrap\" fxLayoutGap=\"1rem\">\r\n          <ng-container *ngFor=\"let cat of catListDefault; let i as index\">\r\n            <mat-checkbox (change)=\"onCategoriesChecked(cat, i)\" fxFlex=\"23\" [checked]=\"cat.isChecked\">\r\n              {{cat.name}}\r\n            </mat-checkbox>\r\n          </ng-container>\r\n        </div>\r\n      </mat-dialog-content>\r\n      <div style=\"padding: 1rem;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\r\n        <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\">Next</button>\r\n      </div>\r\n    </mat-step>\r\n    <mat-step>\r\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\r\n        fxLayoutAlign=\"space-between center\">\r\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\r\n          <img src=\"assets/shop/budget.svg\" class=\"filter-img\" style=\"margin-top: 33px;\r\n          margin-right: 10px;\r\n      \" alt=\"Cities\">\r\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\r\n            Budget\r\n          </h2>\r\n        </div>\r\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-content class=\"mat-typography\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n        <div>\r\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\">Is there a Budget Range you are working with?</h2>\r\n        </div>\r\n        <div style=\"padding: 10px 0px;\" class=\"price-input\" fxLayoutAlign=\"center center\" fxLayoutGap=\"1rem\"\r\n          fxLayout=\"row wrap\">\r\n          <mat-form-field fxFlex=\"30\" appearance=\"fill\">\r\n            <mat-label>$ Starting from</mat-label>\r\n            <input type=\"number\" #min (input)=\"onMinPriceRangeChange(min.value)\" value=\"{{min_price}}\" matInput\r\n              min=\"0\" />\r\n          </mat-form-field>\r\n          <mat-form-field fxFlex=\"30\" appearance=\"fill\">\r\n            <mat-label>$ Ending to</mat-label>\r\n            <input type=\"number\" #max (input)=\"onMaxPriceRangeChange(max.value)\" value=\"{{max_price}}\" matInput\r\n              min=\"1\" />\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\r\n          <button mat-raised-button matStepperNext color=\"accent\" class=\"btn\" aria-label=\"\">Next</button>\r\n        </div>\r\n      </mat-dialog-content>\r\n    </mat-step>\r\n    <mat-step>\r\n      <div fxLayout=\"row\" style=\"margin: 0 -25px; height: 50px; background: rgb(248, 248, 248);\"\r\n        fxLayoutAlign=\"space-between center\">\r\n        <div fxLayout=\"row\" style=\"margin: 0 25px;\" fxLayoutAlign=\"space-between center\">\r\n          <img src=\"assets/shop/quantity.svg\" class=\"filter-img\" style=\"margin-top: 33px;\r\n          margin-right: 10px;\r\n      \" alt=\"Cities\">\r\n          <h2 style=\"margin: 0;\" class=\"font25\" mat-dialog-title>\r\n            Quantity\r\n          </h2>\r\n        </div>\r\n        <div class=\"\" fxLayout=\"row-reverse\" style=\"margin: 0 25px;\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-content class=\"mat-typography\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n        <div>\r\n          <h2 style=\"font-size: 25px; font-family: 'Sofia Pro';\"> What is the minimum quantity you are interested in?\r\n          </h2>\r\n        </div>\r\n        <div style=\"padding: 10px 0px;\" fxLayoutAlign=\"center center\">\r\n          <mat-form-field appearance=\"fill\" fxFlex=\"70\">\r\n            <mat-label>Miniumum Quantity</mat-label>\r\n            <input type=\"number\" #minQty step=\"1\" (input)=\"onQtyChange(minQty.value);\" matInput min=\"1\"\r\n              value=\"{{min_price_inventory}}\" />\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\" fxLayout=\"row\">\r\n          <button mat-raised-button matStepperNext color=\"accent\" aria-label=\"\" class=\"btn\"\r\n            (click)=\"filterProductPopup();\">FINISH</button>\r\n        </div>\r\n      </mat-dialog-content>\r\n    </mat-step>\r\n  </mat-horizontal-stepper>\r\n\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MoodboardService } from '../../services/moodboard.service';\r\nimport { ToasterService, UserService } from 'projects/core/src/public-api';\r\nimport { QuoteService } from 'projects/quote/src/public-api';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'lib-create-moodboard',\r\n  templateUrl: './create-moodboard.component.html',\r\n  styleUrls: ['./create-moodboard.component.scss']\r\n})\r\nexport class CreateMoodboardComponent implements OnInit {\r\n  bannerIconImg: any = 'assets/moodboard/images/mb.png';\r\n  bannerIconImgTxt: any = 'Moodboard';\r\n  bottomTxt: any = 'Style & create look from our collection of designer furniture';\r\n  mbCreateForm: FormGroup;\r\n  stateList: any = [];\r\n  mbTypeList: any = [];\r\n  showPDropdown: any = false;\r\n  showDropdown: any = false;\r\n  dCompanyList: any = [];\r\n  companyList: any = [];\r\n  projectList: any = [];\r\n  selectedCompany: any = '';\r\n  selectedProject: any = '';\r\n\r\n  catagorydata = [{\r\n      imageSrc: 'assets/moodboard/images/Categories-01.png',\r\n      value: 'Living Room',\r\n      type_id: 1\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-02.png',\r\n      value: 'Bedroom',\r\n      type_id: 2\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-03.png',\r\n      value: 'Dining Room',\r\n      type_id: 3\r\n    },\r\n\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-04.png',\r\n      value: 'Office',\r\n      type_id: 4\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-05.png',\r\n      value: 'Outdoor',\r\n      type_id: 5\r\n    },\r\n    {\r\n      imageSrc: 'assets/moodboard/images/Categories-06.png',\r\n      value: 'Others',\r\n      type_id: 6\r\n    }\r\n  ]\r\n  mbId: any = null;\r\n  currentPage: any = '';\r\n  boardname: any = '';\r\n  constructor(public fb: FormBuilder, private moodboardService:MoodboardService,\r\n    public _user: UserService, private _toster: ToasterService,private _quoteService: QuoteService,\r\n    private activatedRoute: ActivatedRoute, private router: Router,\r\n    private _location: Location) {\r\n    this.mbCreateForm = this.fb.group({\r\n                          moodboardName: ['', Validators.required],\r\n                          moodboardType: ['', Validators.required],\r\n                          moodboardCompany: [''],\r\n                          moodboardProjectName: [''],\r\n                          company_id: [''],\r\n                          project_id: [''],\r\n                          moodboardState: ['', Validators.required],\r\n                          moodboardCity: ['', Validators.required],\r\n                          moodboardZip: ['', Validators.required]\r\n                        });\r\n      this.mbId = this.activatedRoute.snapshot.paramMap.get('id');\r\n      this.currentPage = this.router.url.split('/')[2];                  \r\n     }\r\n  ngOnInit(): void {\r\n    this.getStates();\r\n    this.getMoodBoardType();  \r\n    this.getcompanyByUserMoodboard();\r\n    if(this.mbId != null){\r\n      this.getMoodboard();\r\n    }\r\n    this.getCompanyList();\r\n\r\n  }\r\n  getMoodBoardType(){\r\n    this.moodboardService.getMoodBoardType().subscribe((response:any) => {\r\n      this.mbTypeList = response.result;\r\n      this.catagorydata = this.mbTypeList.map((item: any, i: any) => Object.assign({}, item, this.catagorydata[i]));\r\n    });    \r\n  }\r\n  getcompanyByUserMoodboard(){\r\n    this.moodboardService.getcompanyByUserMoodboard().subscribe((response:any) => {\r\n      this.mbCreateForm.patchValue({moodboardCompany:response.result[0].company});\r\n    });    \r\n  }\r\n\r\n  getCompanyList() {\r\n    this._quoteService.getCompanyList().subscribe((data: any) => {\r\n      if(typeof data.result == 'string'){\r\n        this.companyList = [];\r\n        this.selectedCompany = \"\";\r\n        return;\r\n      }\r\n     // this.companyList = data.result.map((x: any) => x.company);\r\n      this.companyList  = data.result;\r\n      let companyId = data.result.find((x: any)=> x.company == this.selectedCompany)?.sgid;\r\n      if(companyId){\r\n        this.getProjectList(companyId, null);\r\n      }\r\n    });\r\n  }\r\n  getProjectList(companyId: any, event: any) {\r\n    if(event !== null) companyId = event.target.value;\r\n    this._quoteService.getProjectList(companyId).subscribe((data: any)=> {\r\n      if(typeof data.result == 'string'){\r\n        this.projectList = [];\r\n        this.selectedProject = \"\";\r\n      } else {\r\n        this.projectList  = data.result; //.map((x: any)=> x.project);\r\n        this.selectedProject = this.projectList[0];\r\n      }\r\n    })  \r\n  }\r\n\r\n  validatedCityZipCode(){\r\n    let param = {zipcode: this.mbCreateForm.value.moodboardZip, \r\n      city_name: this.mbCreateForm.value.moodboardCity};\r\n    this.moodboardService.validatedCityZipCode(param).subscribe((response:any) => {\r\n       response.result;\r\n    });    \r\n  }\r\n  getStates(){\r\n    this.moodboardService.getStateList().subscribe((response:any) => {\r\n      this.stateList = response.states;\r\n    });    \r\n\r\n  }\r\n  getMoodboard(){\r\n    this.moodboardService.getMoodBoard(this.mbId).subscribe((response:any) => {\r\n      this.boardname = response.moodboard.boardname;\r\n      this.mbCreateForm.setValue({\r\n        moodboardName: response.moodboard.boardname,\r\n        moodboardType: response.moodboard.boardtypeid.toString(),\r\n        moodboardCompany: response.moodboard.company_name,\r\n        moodboardProjectName: response.moodboard.project_name,\r\n        company_id: response.moodboard.company_id,\r\n        project_id: response.moodboard.project_id,\r\n        moodboardState: response.moodboard.state,\r\n        moodboardCity: response.moodboard.city,\r\n        moodboardZip: response.moodboard.zipcode\r\n      });\r\n    });    \r\n\r\n  }\r\n  resetForm(){\r\n    this.mbCreateForm.reset();\r\n    this._location.back();\r\n  }\r\n  onSubmit() {\r\n    let val = this.mbCreateForm.value;\r\n    let param: {[index: string]:any} = { \r\n      moodboard_name: val.moodboardName,\r\n      moodboard_type: val.moodboardType,\r\n      company_name: val.moodboardCompany,\r\n      project_name: val.moodboardProjectName,\r\n      state: val.moodboardState,\r\n      city: val.moodboardCity,\r\n      zipcode: val.moodboardZip,\r\n      userid: this._user.getUser().getId()\r\n    }\r\n    if(this.showDropdown == false)\r\n    param['company_name'] = this.companyList.find((x: any)=> x.sgid == val.company_id)?.company;\r\n    if(this.showPDropdown == false)\r\n    param['project_name'] = this.projectList.find((x: any)=> x.sgid == val.project_id)?.project;\r\n\r\n    if(this.mbId!== '' && this.currentPage != 'create') { \r\n      param['moodboard_id'] = this.mbId;\r\n      this.moodboardService.updateMoodboard(param).subscribe((response:any) => {\r\n        if(response.statusCode === 200){ \r\n          this._toster.success(response.message);\r\n          this.router.navigate(['moodboard',response.moodboard_id])\r\n      }\r\n        else this._toster.error(response.message);\r\n      }, error => this._toster.error('Please contact site administrator!')\r\n      );\r\n    }else{\r\n      this.moodboardService.createMoodboard(param).subscribe((response:any) => {\r\n        if(response.statusCode === 200)\r\n        { this._toster.success(response.message);\r\n//          this.router.navigate(['moodboard',response.moodboard_id])\r\n          this._location.back();\r\n      }\r\n        else this._toster.error(response.message);\r\n      }, error => this._toster.error('Please contact site administrator!')\r\n      );\r\n    }\r\n  }\r\n}\r\n","<div\r\n  fxFlex\r\n  class=\"mb-create__form\"\r\n  fxLayout=\"column\"\r\n  fxLayoutAlign=\"center center\"\r\n>  \r\n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n    <div class=\"mb-create\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n        <span *ngIf=\"mbId == null\" class=\"mb-create__form--title\">CREATE A NEW MOODBOARD</span>\r\n        <span *ngIf=\"mbId != '' && currentPage != 'create'\" class=\"mb-create__form--title\">Editing Moodboard named <strong>{{boardname}}</strong></span>\r\n        <span *ngIf=\"currentPage == 'create' && mbId != null\" class=\"mb-create__form--title\">Copying Moodboard named <strong>{{boardname}}</strong></span>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"mb-form\">\r\n  <form [formGroup]=\"mbCreateForm\"  class=\"add-field\" (ngSubmit)=\"onSubmit()\">\r\n          <label style=\"display: flex;\" class=\"label\">Moodboard Type <span class=\"asterisk\">*</span></label>\r\n          <mat-button-toggle-group formControlName=\"moodboardType\" #mbtypegroup=\"matButtonToggleGroup\"   aria-label=\"Moodboard Type\">\r\n            <ng-container *ngFor=\"let item of catagorydata; let i = index\">\r\n            <mat-button-toggle [ngClass]=\"{'selected': mbtypegroup.value == item?.type_id}\" value=\"{{item?.type_id}}\">\r\n                <img mat-card-image width=\"100px\" height=\"100px\" src=\"{{item.imageSrc}}\" alt=\"{{item.value}}\">\r\n                <div fxLayout=\"row\" class=\"text\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start center\">\r\n                  <div fxLayout=\"row\" class=\"text-lable\" >{{item.value}}</div>\r\n                </div>\r\n              </mat-button-toggle>          \r\n            </ng-container>\r\n          </mat-button-toggle-group>\r\n<div class=\"mb-form-inner\" style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n  <div fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \r\n    <!-- <mat-form-field appearance = \"fill\">\r\n      <label for=\"moodboardName\">Moodboard Name <span class=\"asterisk\">*</span></label>\r\n      <input formControlName=\"moodboardName\" matInput placeholder = \"Name your Board\">\r\n    </mat-form-field> -->\r\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Moodboard Name<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [ngClass]=\"{\r\n          'error-border': mbCreateForm.get('moodboardName')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"moodboardName\"\r\n        placeholder=\"Name your Board\"\r\n      />\r\n    </div>\r\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Project Name<span class=\"asterisk\">*</span> </span>\r\n      <div fxLayout=\"row\"  style=\"width: 100%;\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\r\n        <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showPDropdown=!showPDropdown\" class=\"add\">\r\n          <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\r\n        </a>\r\n        <a *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\r\n          <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">        </a>\r\n    \r\n      <input *ngIf=\"showPDropdown\"\r\n        [ngClass]=\"{\r\n          'error-border': mbCreateForm.get('moodboardProjectName')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"moodboardProjectName\"\r\n        placeholder=\"Add Project Name\"\r\n      />\r\n      <select *ngIf=\"_user.getUser().isInternalUser() && !showPDropdown \"\r\n      [ngClass]=\"{\r\n        'error-border': mbCreateForm.get('project_id')?.invalid\r\n      }\"\r\n      formControlName=\"project_id\"\r\n    >\r\n      <option *ngFor=\"let prj of projectList\" [value]=\"prj.sgid\">\r\n        {{ prj.project }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n    </div>\r\n \r\n    <div fxFlex=\"100\" fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">City<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [ngClass]=\"{\r\n          'error-border': mbCreateForm.get('moodboardCity')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"moodboardCity\"\r\n        placeholder=\"Enter a City\"\r\n      />\r\n    </div>\r\n \r\n\r\n    \r\n    \r\n   <!-- <mat-form-field appearance = \"fill\">\r\n    <label for=\"moodboardCompany\">Company Name <span class=\"asterisk\">*</span></label>\r\n    <input formControlName=\"moodboardCompany\" matInput placeholder = \"Enter Company Name\">\r\n </mat-form-field>\r\n <mat-form-field appearance = \"fill\">\r\n  <label for=\"moodboardProjectName\">Project Name <span class=\"asterisk\">*</span></label>\r\n  <input formControlName=\"moodboardProjectName\" matInput placeholder = \"Name your Project\">\r\n</mat-form-field> -->\r\n\r\n  </div>\r\n  <div fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\"> \r\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Company Name<span class=\"asterisk\">*</span>\r\n    </span>\r\n    <div fxLayout=\"row\" style=\"width: 100%;\" fxLayoutAlign=\"stretch\" style=\"padding: 0px; margin: 0 0 0 -15px;\">\r\n    <a mat-button *ngIf=\"_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" (click)=\"showDropdown=!showDropdown; showPDropdown=!showPDropdown\" class=\"add\">\r\n      <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\r\n    </a>\r\n    <a mat-button *ngIf=\"!_user.getUser().isInternalUser()\" style=\"padding: 0px 10px 0px 9px; margin: -4px -5px -5px 0px;\" class=\"add\">\r\n      <img src=\"assets/moodboard/images/SVG-Icons-06.svg\">\r\n    </a>\r\n    <input *ngIf=\"showDropdown\"\r\n        [readonly]=\"!_user.getUser().isInternalUser()\"\r\n        [ngClass]=\"{\r\n          'error-border': mbCreateForm.get('moodboardCompany')?.invalid,\r\n          'read-only': !_user.getUser().isInternalUser()\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"moodboardCompany\"\r\n        placeholder=\"Add Company Name\"\r\n      />\r\n      <select *ngIf=\"_user.getUser().isInternalUser() && !showDropdown\"\r\n      [ngClass]=\"{\r\n        'error-border': mbCreateForm.get('company_id')?.invalid\r\n      }\"\r\n      formControlName=\"company_id\"\r\n      (change)=\"getProjectList('', $event)\"\r\n    >\r\n      <option  *ngFor=\"let cmp of companyList\" [value]=\"cmp.sgid\" >\r\n        {{ cmp.company }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n    </div>\r\n\r\n    <div fxFlex=\"100\" style=\"width: 100%;\" fxLayout=\"column\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">State<span class=\"asterisk\">*</span></span>\r\n      <select\r\n        [ngClass]=\"{\r\n          'error-border': mbCreateForm.get('moodboardState')?.invalid\r\n        }\"\r\n        formControlName=\"moodboardState\"\r\n      >\r\n        <option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">\r\n          {{ state.name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n    \r\n    <div fxFlex=\"100\" fxLayout=\"column\" style=\"width: 100%;\" fxLayoutAlign=\" stretch\">\r\n      <span class=\"label\">Zip Code<span class=\"asterisk\">*</span></span>\r\n      <input\r\n        [ngClass]=\"{\r\n          'error-border': mbCreateForm.get('moodboardZip')?.invalid\r\n        }\"\r\n        type=\"text\"\r\n        formControlName=\"moodboardZip\"\r\n        placeholder=\"Add a ZipCode\"\r\n      />\r\n    </div>\r\n    <!-- <mat-form-field appearance = \"fill\">\r\n      <mat-label>State <span class=\"asterisk\">*</span></mat-label>\r\n        <mat-select formControlName=\"moodboardState\">\r\n          <mat-option *ngFor=\"let state of stateList\" [value]=\"state.sgid\">{{state.name}}</mat-option>\r\n        </mat-select>\r\n\r\n    </mat-form-field>\r\n    <mat-form-field appearance = \"fill\">\r\n      <label for=\"moodboardCity\">City <span class=\"asterisk\">*</span></label>\r\n      <input formControlName=\"moodboardCity\" matInput placeholder = \"Enter a City\">\r\n   </mat-form-field>\r\n   <mat-form-field appearance = \"fill\">\r\n    <label for=\"moodboardZip\">Zip Code <span class=\"asterisk\">*</span></label>\r\n    <input (input)=\"validatedCityZipCode()\" formControlName=\"moodboardZip\" matInput placeholder = \"Add a ZipCode\">\r\n </mat-form-field> -->\r\n \r\n  </div>\r\n</div>\r\n<div class=\"mb-form-inner\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"2rem\">\r\n  <button *ngIf=\"mbId == '' || mbId != '' && currentPage == 'create'\"   class=\"btn btn-primary\"  mat-raised-button\r\n  color=\"accent\"  type=\"submit\" mat-button>CREATE</button>\r\n  <button *ngIf=\"mbId != '' && currentPage != 'create'\" class=\"btn btn-primary\" type=\"submit\"           mat-raised-button\r\n  color=\"accent\" mat-button>UPDATE</button>\r\n  <button (click)=\"resetForm();\" class=\"btn btn-primary\" mat-raised-button color=\"accent\"  mat-button>CANCEL</button>\r\n  <div fxLayoutGap=\"4rem\"></div>         \r\n  \r\n</div>          \r\n\r\n</form>  \r\n</div>          \r\n</div>      \r\n     \r\n\r\n\r\n","import { Routes } from '@angular/router';\r\nimport { CreateMoodboardComponent } from './components/create-moodboard/create-moodboard.component';\r\nimport { MoodboardListComponent } from './components/moodboard-list/moodboard-list.component';\r\nimport { MoodboardComponent } from './components/moodboard/moodboard.component';\r\n\r\nexport const moodboardRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MoodboardListComponent\r\n  },{\r\n    path: 'create',\r\n    component: CreateMoodboardComponent\r\n  },{\r\n    path: 'create/:id',\r\n    component: CreateMoodboardComponent\r\n  },{\r\n    path: 'edit/:id',\r\n    component: CreateMoodboardComponent\r\n  },{\r\n    path:':id',\r\n    component:MoodboardComponent\r\n  }\r\n];\r\n\r\n\r\n\r\n\r\n","/*\r\n * Public API Surface of shop\r\n */\r\n\r\nexport * from './lib/service/shop.service';\r\nexport * from './lib/components/shop/shop.component';\r\nexport * from './lib/components/product-details/product-details.component';\r\nexport * from './lib/shop.module';\r\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\";\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() { return this._rowspan; }\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() { return this._colspan; }\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() { return this._cols; }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() { return this._gutter; }\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() { return this._rowHeight; }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map"],"sourceRoot":"webpack:///"}